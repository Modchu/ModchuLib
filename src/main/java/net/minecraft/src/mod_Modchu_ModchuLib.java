package net.minecraft.src;import java.lang.reflect.Field;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_Version;import modchu.lib.forgeonly.characteristic.Modchu_ForgeEVENTHandler;import modchu.lib.forgeonly.characteristic.Modchu_ThreadInit;import modchu.lib.forgeonly.characteristic.Modchu_TickHandler;import net.minecraftforge.common.MinecraftForge;import cpw.mods.fml.common.FMLCommonHandler;import cpw.mods.fml.common.Loader;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLMissingMappingsEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;@Mod(modid="mod_Modchu_ModchuLib", name="mod_Modchu_ModchuLib", version=Modchu_Main.versionString)public class mod_Modchu_ModchuLib {	public Modchu_ThreadInit loadCheckThread;	static {		Modchu_Main.init();	}	public mod_Modchu_ModchuLib() {		if (Modchu_Main.isServer) return;	}	public String getName() {		return Modchu_Main.modName;	}	public String getVersion() {		return Modchu_Main.versionString;	}	@Mod.EventHandler	public void load(FMLInitializationEvent event) {		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib load()");		FMLCommonHandler.instance().bus().register(new Modchu_TickHandler());		MinecraftForge.EVENT_BUS.register(new Modchu_ForgeEVENTHandler());		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib load() end.");	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib preInit()");		Modchu_Main.load(this);		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib preInit() end.");	}	@Mod.EventHandler	public void MissingMappingsEvent(FMLMissingMappingsEvent event){		event.applyModContainer(Loader.instance().activeModContainer());		for(FMLMissingMappingsEvent.MissingMapping mapping : event.get()){			Modchu_Reflect.invokeMethod(mapping.getClass(), "ignore", mapping);		}	}	@EventHandler	public void init(FMLInitializationEvent event) {		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib init");		if (Modchu_Main.isServer) return;		loadCheckThread = new Modchu_ThreadInit();		loadCheckThread.start();		loadCheckThread.register(Modchu_Reflect.getMethod(getClass(), "initModsLoaded"));		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib init end.");	}	public boolean onTickInGame(float f, Object minecraft) {		return Modchu_Main.onTickInGame(null, f, (Object) minecraft, (byte)0);	}	public void modsLoaded() {	}	public static void initModsLoaded() {		Modchu_Main.initModsLoadedStating = true;		Modchu_Main.baseModInstance.loadCheckThread.yield();		Modchu_Main.baseModInstance.loadCheckThread = null;	}	public void keyboardEvent(Object keybinding) {		Modchu_Main.keyboardEvent(keybinding);	}	public void load() {	}	public String getMcVersion() {		if (Modchu_Main.isServer) return Modchu_Version.getMinecraftVersionString();		String s = null;		s = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject("ModLoader", "VERSION", -1));		if (s != null) {			if (s.indexOf(" ") > 0){				return Modchu_Main.lastIndexProcessing(s, " ");			}			return s;		}		String s1 = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("net.minecraftforge.common.ForgeVersion", "getMinorVersion", -1));		if (s1 != null) {			String s2 = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("net.minecraftforge.common.ForgeVersion", "getBuildVersion", -1));			s = Modchu_Main.getForgeVersionBuildVersionToMcVersion(s1, s2);		}		if (s != null) return s;		Field f = Modchu_Reflect.getField(net.minecraft.client.Minecraft.class, "field_110447_Z", "launchedVersion");		if (f != null) {			try {				return (String) f.get(net.minecraft.client.Minecraft.getMinecraft());			} catch (Exception e) {			}		}		return s;	}}