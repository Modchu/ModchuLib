package net.minecraft.src;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_ForgeEVENTHandler;import modchu.lib.characteristic.Modchu_TickHandler;import modchu.lib.fmlonly.characteristic.Modchu_ThreadInit;import net.minecraftforge.common.MinecraftForge;import cpw.mods.fml.common.FMLCommonHandler;import cpw.mods.fml.common.Loader;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLMissingMappingsEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;@Mod(modid="mod_Modchu_ModchuLib", name="mod_Modchu_ModchuLib", version=Modchu_Main.versionString)public class mod_Modchu_ModchuLib {	public Modchu_ThreadInit loadCheckThread;	static {		Object o = Modchu_Reflect.invokeMethod("cpw.mods.fml.common.FMLCommonHandler", "instance");		if (o != null) {			o = Modchu_Reflect.invokeMethod(o.getClass(), "getSide", o);			if (o != null) {				if ((Boolean) Modchu_Reflect.invokeMethod(o.getClass(), "isServer", o)) Modchu_Main.isServer = true;			} else {				//Modchu_Debug.Debug("static 2 o == null !!");			}		} else {			Modchu_Main.isServer = Modchu_Reflect.getFieldObject("ModLoader", "getMinecraftInstance") != null;			//Modchu_Debug.Debug("static o == null !!");		}		//Modchu_Debug.Debug("static isServer="+isServer);	}	public mod_Modchu_ModchuLib() {		if (Modchu_Main.isServer) return;	}	public String getName() {		return Modchu_Main.modName;	}	public String getVersion() {		return Modchu_Main.versionString;	}	@Mod.EventHandler	public void load(FMLInitializationEvent event) {		FMLCommonHandler.instance().bus().register(new Modchu_TickHandler());		MinecraftForge.EVENT_BUS.register(new Modchu_ForgeEVENTHandler());	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {	//public void load() {		Modchu_Debug.lDebug("mod_Modchu_ModchuLib modchu_Main preInit");		//if (isServer) {			//Modchu_Debug.systemDebug("mod_Modchu_ModchuLib isServer return.", 999);			//Modchu_Debug.lDebug("mod_Modchu_ModchuLib isServer return.");			//return;		//}		Modchu_Main.baseModInstance = this;		Modchu_Main modchu_Main = new Modchu_Main();		modchu_Main.load();		//ModLoader.setInGameHook(this, true, true);	}	@Mod.EventHandler	public void MissingMappingsEvent(FMLMissingMappingsEvent event){		event.applyModContainer(Loader.instance().activeModContainer());		for(FMLMissingMappingsEvent.MissingMapping mapping : event.get()){			Modchu_Reflect.invokeMethod(mapping.getClass(), "ignore", mapping);		}	}	@EventHandler	public void init(FMLInitializationEvent event) {	//public void modsLoaded() {		Modchu_Debug.lDebug("mod_Modchu_ModchuLib init");		if (Modchu_Main.isServer) return;		loadCheckThread = new Modchu_ThreadInit();		loadCheckThread.start();		loadCheckThread.register(Modchu_Reflect.getMethod("modchu.lib.Modchu_Main", "modsLoaded"));		Modchu_Debug.lDebug("mod_Modchu_ModchuLib init loadCheckThread.start end.");	}	public boolean onTickInGame(float f, Object minecraft) {		return Modchu_Main.onTickInGame(f, (Object) minecraft, (byte)0);	}	public void modsLoaded() {		Modchu_Main.modsLoaded();	}	public void keyboardEvent(Object keybinding) {		Modchu_Main.keyboardEvent(keybinding);	}	public void load() {	}}