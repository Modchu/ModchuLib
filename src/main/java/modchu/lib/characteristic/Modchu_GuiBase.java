package modchu.lib.characteristic;import java.io.IOException;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IGuiBaseMaster;import modchu.lib.Modchu_Reflect;import net.minecraft.client.gui.GuiScreen;import net.minecraft.client.gui.GuiButton;public class Modchu_GuiBase extends GuiScreen {	public Modchu_IGuiBaseMaster master;	public Modchu_GuiBase(Class masterClass, Object world) {		this(masterClass, null, world, (Object) null);	}	public Modchu_GuiBase(Class masterClass, Object guiScreen, Object world, Object... o) {		super();		Modchu_Debug.lDebug("Modchu_GuiBase init");		Object instance = Modchu_Reflect.newInstance(masterClass, new Class[]{ Object.class, Object.class, Object.class, Object[].class }, new Object[]{ this, guiScreen, world, (Object[])o });		Modchu_Debug.lDebug("Modchu_GuiBase instance="+instance);		master = instance != null				&& instance instanceof Modchu_IGuiBaseMaster ? (Modchu_IGuiBaseMaster) instance : null;		if (master != null); else throw new RuntimeException("Modchu_GuiBase master null !! masterClass="+masterClass);	}	public void initGui() {		master.initGui();	}	public Object getFontRenderer() {		return master.getFontRenderer();	}	public void setFontRenderer(Object fontRenderer) {		master.setFontRenderer(fontRenderer);	}	@Override	protected void actionPerformed(GuiButton guibutton) {		master.actionPerformed(guibutton);	}	@Override	public void updateScreen() {		master.updateScreen();	}	@Override	public void drawScreen(int i, int j, float f) {		master.drawScreen(i, j, f);	}	public void superDrawScreen(int i, int j, float f) {		super.drawScreen(i, j, f);	}	@Override	public void onGuiClosed() {		master.onGuiClosed();	}	public void superOnGuiClosed() {		super.onGuiClosed();	}	@Override	public void handleMouseInput() {		if (master.handleMouseInput()) {			try {				super.handleMouseInput();			} catch (IOException e) {				e.printStackTrace();			}		}	}	public void superHandleMouseInput() {		try {			super.handleMouseInput();		} catch (IOException e) {			e.printStackTrace();		}	}	@Override	protected void keyTyped(char c, int i) {		if (master.keyTyped(c, i)) {			try {				super.keyTyped(c, i);			} catch (IOException e) {				e.printStackTrace();			}		}	}	public void superKeyTyped(char c, int i) {		try {			super.keyTyped(c, i);		} catch (IOException e) {			e.printStackTrace();		}	}	@Override	public void mouseClicked(int x, int y, int i) {		if (master.mouseClicked(x, y, i)) {			try {				super.mouseClicked(x, y, i);			} catch (IOException e) {				e.printStackTrace();			}		}	}	public void superMouseClicked(int x, int y, int i) {		try {			super.mouseClicked(x, y, i);		} catch (IOException e) {			e.printStackTrace();		}	}	@Override	protected void mouseClickMove(int mouseX, int mouseY, int clickButton, long time) {		master.mouseClickMove(mouseX, mouseY, clickButton, time);	}	protected void superMouseClickMove(int mouseX, int mouseY, int clickButton, long time) {		super.mouseClickMove(mouseX, mouseY, clickButton, time);	}	@Override	protected void mouseReleased(int mouseX, int mouseY, int clickButton) {		master.mouseReleased(mouseX, mouseY, clickButton);	}	public void superMouseReleased(int mouseX, int mouseY, int clickButton) {		super.mouseReleased(mouseX, mouseY, clickButton);	}	@Override	public boolean doesGuiPauseGame() {		return master.doesGuiPauseGame();	}	public boolean superDoesGuiPauseGame() {		return super.doesGuiPauseGame();	}	public void superDrawDefaultBackground() {		super.drawDefaultBackground();	}}