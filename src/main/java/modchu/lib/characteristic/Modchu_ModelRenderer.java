package modchu.lib.characteristic;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IModelRenderer;import modchu.lib.Modchu_Reflect;import modchu.lib.replace.Modchu_ModelBoxBaseBase;import modchu.lib.replace.Modchu_ModelRendererBase;import modchu.lib.replacepoint.Modchu_ModelMultiReplacePoint;import modchu.lib.replacepoint.Modchu_ModelRendererReplacePoint;import modchu.model.ModchuModel_IModelCaps;import net.minecraft.client.model.TextureOffset;import net.minecraft.client.renderer.RenderBlocks;import net.minecraft.client.renderer.entity.Render;import net.minecraft.entity.Entity;import net.minecraft.item.EnumAction;import net.minecraft.item.ItemStack;public class Modchu_ModelRenderer extends Modchu_ModelRendererReplacePoint {	public Modchu_IModelRenderer master;	public Modchu_ModelRenderer(Modchu_ModelMultiReplacePoint modelBase) {		this(null, modelBase, 0, 0, null, null);	}	public Modchu_ModelRenderer(Modchu_ModelMultiReplacePoint modelBase, String s) {		this(null, modelBase, 0, 0, s, null);	}	public Modchu_ModelRenderer(Modchu_ModelMultiReplacePoint modelBase, int i, int j) {		this(null, modelBase, i, j, null, null);	}	public Modchu_ModelRenderer(Modchu_ModelMultiReplacePoint modelBase, int i, int j, String s) {		this(null, modelBase, i, j, s, null);	}	public Modchu_ModelRenderer(Modchu_ModelMultiReplacePoint modelBase, int i, int j, String s, Modchu_ModelRenderer modelRenderer) {		this(null, modelBase, i, j, s, modelRenderer);	}	public Modchu_ModelRenderer(Modchu_ModelMultiReplacePoint modelBase, int i, int j, Modchu_ModelRenderer modelRenderer) {		this(null, modelBase, i, j, null, modelRenderer);	}	public Modchu_ModelRenderer(Class masterClass, Modchu_ModelMultiReplacePoint modelBase) {		this(masterClass, modelBase, 0, 0, null, null);	}	public Modchu_ModelRenderer(Class masterClass, Modchu_ModelMultiReplacePoint modelBase, String s) {		this(masterClass, modelBase, 0, 0, s, null);	}	public Modchu_ModelRenderer(Class masterClass, Modchu_ModelMultiReplacePoint modelBase, int i, int j) {		this(masterClass, modelBase, i, j, null, null);	}	public Modchu_ModelRenderer(Class masterClass, Modchu_ModelMultiReplacePoint modelBase, int i, int j, String s) {		this(masterClass, modelBase, i, j, s, null);	}	public Modchu_ModelRenderer(Class masterClass, Modchu_ModelMultiReplacePoint modelBase, int i, int j, Modchu_ModelRenderer modelRenderer) {		this(masterClass, modelBase, i, j, null, modelRenderer);	}	public Modchu_ModelRenderer(Class masterClass, Modchu_ModelMultiReplacePoint modelBase, int i, int j, String s, Modchu_ModelRenderer modelRenderer) {		super(modelBase, i, j);		init(masterClass, modelBase, i, j, s, modelRenderer);	}	public void init(Class masterClass, Modchu_ModelMultiReplacePoint modelBase, int i, int j, String s, Modchu_ModelRenderer modelRenderer) {		if (masterClass != null) ;else masterClass = Modchu_Reflect.loadClass("modchu.model.ModchuModel_ModelRendererMaster");		if (masterClass != null) ;else throw new RuntimeException("Modchu_ModelRenderer init masterClass null !!");		Object instance = Modchu_Reflect.newInstance(masterClass, new Class[]{ Modchu_ModelRenderer.class, Modchu_ModelMultiReplacePoint.class, int.class, int.class, String.class, Modchu_ModelRenderer.class }, new Object[]{ this, modelBase, i, j, s, modelRenderer });		//Modchu_Debug.mDebug("Modchu_ModelRenderer instance="+instance);		master = instance instanceof Modchu_IModelRenderer ? (Modchu_IModelRenderer) instance : null;		if (master != null) ;else throw new RuntimeException("Modchu_ModelRenderer init master null !! masterClass=" + masterClass);	}	@Override	public Modchu_ModelRenderer setTextureOffset(int i, int j) {		return master != null ? master.setTextureOffset(i, j) : this;	}	public int getTextureOffsetX() {		return master.getTextureOffsetX();	}	public int getTextureOffsetY() {		return master.getTextureOffsetY();	}	public ConcurrentHashMap<String, TextureOffset> getTextureOffsetMap() {		return master.getTextureOffsetMap();	}	public void setTextureOffset(String s, int par2, int par3) {		master.setTextureOffset(s, par2, par3);	}	public TextureOffset getTextureOffset(String s) {		return (TextureOffset) master.getTextureOffset(s);	}	public Modchu_ModelRenderer addCubeList(Object object) {		return master.addCubeList(object);	}	public void addChild(Modchu_ModelRenderer pModelRenderer) {		master.addChild(pModelRenderer);	}	@Override	public Modchu_ModelRenderer addBox(String pName, float pX, float pY, float pZ, int pWidth, int pHeight, int pDepth) {		return master.addBox(pName, pX, pY, pZ, pWidth, pHeight, pDepth);	}	@Override	public Modchu_ModelRenderer addBox(float pX, float pY, float pZ, int pWidth, int pHeight, int pDepth) {		return master.addBox(pX, pY, pZ, pWidth, pHeight, pDepth);	}	@Override	public Modchu_ModelRenderer addBox(float pX, float pY, float pZ, int pWidth, int pHeight, int pDepth, float pSizeAdjust) {		return master.addBox(pX, pY, pZ, pWidth, pHeight, pDepth, pSizeAdjust);	}	public Modchu_ModelRenderer addBox(float pX, float pY, float pZ, int pWidth, int pHeight, int pDepth, float pSizeAdjust, boolean b) {		return master.addBox(pX, pY, pZ, pWidth, pHeight, pDepth, pSizeAdjust, b);	}	@Override	public Modchu_ModelRendererBase addParts(Class pModelBoxBase, String pName, Object... pArg) {		return master.addParts(pModelBoxBase, pName, (Object[]) pArg);	}	@Override	public Modchu_ModelRenderer addParts(Class pModelBoxBase, Object... pArg) {		return master.addParts(pModelBoxBase, (Object[]) pArg);	}	public Modchu_ModelRenderer addParts(Class pModelBoxBase, Class constructorClass, Object... pArg) {		return master.addParts(pModelBoxBase, constructorClass, (Object[]) pArg);	}	@Override	public Modchu_ModelRenderer addPartsTexture(Class pModelBoxBase, String pName, Object... pArg) {		return master.addPartsTexture(pModelBoxBase, pName, (Object[]) pArg);	}	@Override	public Modchu_ModelRenderer addPartsTexture(Class pModelBoxBase, Object... pArg) {		return master.addPartsTexture(pModelBoxBase, (Object[]) pArg);	}	public Modchu_ModelBoxBaseBase superGetModelBoxBase(Class pModelBoxBase, Object ... pArg) {		return super.getModelBoxBase(pModelBoxBase, (Object[])pArg);	}	@Override	public Modchu_ModelRenderer addPlate(float f, float f1, float f2, int i, int j, int k) {		return master.addPlate(f, f1, f2, i, j, k);	}	@Override	public Modchu_ModelRenderer addPlate(float f, float f1, float f2, int i, int j, int k, float f3) {		return master.addPlate(f, f1, f2, i, j, k, f3);	}	public Modchu_ModelRenderer addPlateFreeShape(float[][] vertex, float[][] vertexN, int px, int py) {		return master.addPlateFreeShape(vertex, vertexN, px, py);	}	public Modchu_ModelRenderer addPlateFreeShape(float[][] vertex, float[][] texUV, float[][] vertexN) {		return master.addPlateFreeShape(vertex, texUV, vertexN);	}	public Modchu_ModelRenderer addPlateFreeShape(float[][] var1, float[][] var2, float[][] var3, float[] var4) {		return master.addPlateFreeShape(var1, var2, var3, var4);	}	public Modchu_ModelRenderer addBall(float var1, float var2, float var3, float var4, float var5, float var6) {		return master.addBall(var1, var2, var3, var4, var5, var6);	}	/**	 * 描画用のボックス、子供をクリアする	 */	@Override	public void clearCubeList() {		master.clearCubeList();	}	public void renderItemsHead(Modchu_ModelMultiReplacePoint pModelMulti, ModchuModel_IModelCaps pEntityCaps, float scale, int addSupport) {		master.renderItemsHead(pModelMulti, pEntityCaps, scale, addSupport);	}	public void renderItemsHead(Modchu_ModelMultiReplacePoint pModelMulti, ModchuModel_IModelCaps pEntityCaps, ItemStack lis, float scale, int addSupport) {		master.renderItemsHead(pModelMulti, pEntityCaps, lis, scale, addSupport);	}	public boolean renderItems(Modchu_ModelMultiReplacePoint pModelMulti, ModchuModel_IModelCaps pEntityCaps, boolean pRealBlock, int pIndex) {		return master.renderItems(pModelMulti, pEntityCaps, pRealBlock, pIndex);	}	public void renderItems(Entity pEntityLiving, Render pRender, boolean pRealBlock, EnumAction pAction, ItemStack pItemStack, float scale, int addSupport) {		master.renderItems(pEntityLiving, pRender, pRealBlock, pAction, pItemStack, scale, addSupport);	}	public void renderItems(Entity pEntityLiving, Render pRender, boolean pRealBlock, EnumAction pAction, ItemStack pItemStack) {		master.renderItems(pEntityLiving, pRender, pRealBlock, pAction, pItemStack);	}	public void renderItems(Entity pEntityLiving, Render pRender, boolean pRealBlock, EnumAction pAction, ItemStack itemstack, float scale) {		master.renderItems(pEntityLiving, pRender, pRealBlock, pAction, itemstack, scale);	}	public boolean renderBlockDoublePlant(RenderBlocks renderBlocks, Object blockDoublePlant, int i, double d, int x, int y, int z) {		return master.renderBlockDoublePlant(renderBlocks, blockDoublePlant, i, d, x, y, z);	}	public boolean renderDecoBlock(Entity pEntityLiving, Render pRender, boolean pRealBlock, EnumAction pAction, float scale, int addSupport) {		return master.renderDecoBlock(pEntityLiving, pRender, pRealBlock, pAction, scale, addSupport);	}	@Override	public void setRotatePriority(int pValue) {		master.setRotatePriority(pValue);	}	@Override	protected void setRotation() {		master.setRotation();	}	@Override	public void renderObject(float par1, boolean b) {		master.renderObject(par1, b);	}	@Override	public void render(float par1) {		master.render(par1);	}	@Override	public void render(float par1, boolean b) {		master.render(par1, b);	}	@Override	public void renderWithRotation(float par1) {		master.renderWithRotation(par1);	}	@Override	public void postRender(float par1) {		master.postRender(par1);	}	public void postRenderAll(float par1, boolean b) {		master.postRenderAll(par1, b);	}	/**	* Compiles a GL display list for this model	*/	@Override	public void compileDisplayList(float par1) {		master.compileDisplayList(par1);	}	public void preRotateRender(float f) {		master.preRotateRender(f);	}	public void preRotateRenderDeg(float f) {		master.preRotateRenderDeg(f);	}	protected boolean setParentsRotate() {		return master.setParentsRotate();	}	public void setPreRotationPointLM(float f, float f1, float f2) {		master.setPreRotationPointLM(f, f1, f2);	}	public void individuallyHidePreRotateRender(float par1) {		master.individuallyHidePreRotateRender(par1);	}	public void addBoneChild(Modchu_ModelRenderer par1ModelRenderer) {		master.addBoneChild(par1ModelRenderer);	}	public void addBoneSpecialChild(Modchu_ModelRenderer par1ModelRenderer) {		master.addBoneSpecialChild(par1ModelRenderer);	}	public void removeChild(Modchu_ModelRenderer par1ModelRenderer) {		master.removeChild(par1ModelRenderer);	}	public void removeBoneChild(Modchu_ModelRenderer par1ModelRenderer) {		master.removeBoneChild(par1ModelRenderer);	}	public void removeBoneSpecialChild(Modchu_ModelRenderer par1ModelRenderer) {		master.removeBoneSpecialChild(par1ModelRenderer);	}	public void clearChildModels() {		master.clearChildModels();	}	public void clearBoneChildModels() {		master.clearBoneChildModels();	}	public void clearBoneSpecialChildModels() {		master.clearBoneSpecialChildModels();	}	public void setCompiled(boolean b) {		master.setCompiled(b);	}	public int getBoxSizeX() {		return master.getBoxSizeX();	}	public int getBoxSizeY() {		return master.getBoxSizeY();	}	public int getBoxSizeZ() {		return master.getBoxSizeZ();	}	public int getboxSizeX(int i) {		return master.getboxSizeX(i);	}	public int getboxSizeY(int i) {		return master.getboxSizeY(i);	}	public int getboxSizeZ(int i) {		return master.getboxSizeZ(i);	}	public Object getFreeVariable(String s) {		return master.getFreeVariable(s);	}	public void setFreeVariable(String s, Object o) {		master.setFreeVariable(s, o);	}	public void removeFreeVariable(String s) {		master.removeFreeVariable(s);	}	//SmartMoving関連↓	public void reset() {		master.reset();	}	public void fadeStore(float var1) {		master.fadeStore(var1);	}	public void fadeIntermediate(float var1) {		master.fadeIntermediate(var1);	}	public void setParentModel(Modchu_ModelRenderer modelRenderer) {		master.setParentModel(modelRenderer);	}	public List<Modchu_ModelRenderer> getBoneChildModels() {		return master.getBoneChildModels();	}	public List<Modchu_ModelRenderer> getBoneSpecialChildModels() {		return master.getBoneSpecialChildModels();	}	public String getBoxName() {		return master.getBoxName();	}	public void setBoxName(String s) {		master.setBoxName(s);	}}