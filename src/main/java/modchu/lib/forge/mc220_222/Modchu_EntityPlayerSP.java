package modchu.lib.forge.mc220_222;import java.util.Collection;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.Set;import java.util.UUID;import com.mojang.authlib.GameProfile;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityHelper;import modchu.lib.Modchu_IEntityDataManager;import modchu.lib.Modchu_IEntityPlayerSP;import modchu.lib.Modchu_IEntityPlayerSPMaster;import modchu.lib.Modchu_Main;import net.minecraft.block.Block;import net.minecraft.block.material.EnumPushReaction;import net.minecraft.block.material.Material;import net.minecraft.block.state.IBlockState;import net.minecraft.client.Minecraft;import net.minecraft.client.entity.EntityPlayerSP;import net.minecraft.client.network.NetHandlerPlayClient;import net.minecraft.client.network.NetworkPlayerInfo;import net.minecraft.command.CommandResultStats;import net.minecraft.command.CommandResultStats.Type;import net.minecraft.crash.CrashReportCategory;import net.minecraft.entity.Entity;import net.minecraft.entity.EntityLivingBase;import net.minecraft.entity.EnumCreatureAttribute;import net.minecraft.entity.EnumCreatureType;import net.minecraft.entity.IMerchant;import net.minecraft.entity.MoverType;import net.minecraft.entity.SharedMonsterAttributes;import net.minecraft.entity.ai.attributes.AbstractAttributeMap;import net.minecraft.entity.ai.attributes.IAttribute;import net.minecraft.entity.ai.attributes.IAttributeInstance;import net.minecraft.entity.effect.EntityLightningBolt;import net.minecraft.entity.item.EntityItem;import net.minecraft.entity.passive.AbstractHorse;import net.minecraft.entity.passive.EntityHorse;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.entity.player.EntityPlayerMP;import net.minecraft.entity.player.EnumPlayerModelParts;import net.minecraft.entity.player.InventoryPlayer;import net.minecraft.inventory.EntityEquipmentSlot;import net.minecraft.inventory.IInventory;import net.minecraft.inventory.InventoryEnderChest;import net.minecraft.item.Item;import net.minecraft.item.ItemStack;import net.minecraft.item.crafting.IRecipe;import net.minecraft.nbt.NBTTagCompound;import net.minecraft.nbt.NBTTagList;import net.minecraft.network.datasync.DataParameter;import net.minecraft.network.datasync.EntityDataManager;import net.minecraft.potion.Potion;import net.minecraft.potion.PotionEffect;import net.minecraft.scoreboard.Scoreboard;import net.minecraft.scoreboard.Team;import net.minecraft.server.MinecraftServer;import net.minecraft.stats.RecipeBook;import net.minecraft.stats.StatBase;import net.minecraft.stats.StatisticsManager;import net.minecraft.tileentity.CommandBlockBaseLogic;import net.minecraft.tileentity.TileEntityCommandBlock;import net.minecraft.tileentity.TileEntitySign;import net.minecraft.tileentity.TileEntityStructure;import net.minecraft.util.CombatTracker;import net.minecraft.util.CooldownTracker;import net.minecraft.util.DamageSource;import net.minecraft.util.EnumActionResult;import net.minecraft.util.EnumFacing;import net.minecraft.util.EnumHand;import net.minecraft.util.EnumHandSide;import net.minecraft.util.FoodStats;import net.minecraft.util.Mirror;import net.minecraft.util.ResourceLocation;import net.minecraft.util.Rotation;import net.minecraft.util.SoundCategory;import net.minecraft.util.SoundEvent;import net.minecraft.util.math.AxisAlignedBB;import net.minecraft.util.math.BlockPos;import net.minecraft.util.math.RayTraceResult;import net.minecraft.util.math.Vec2f;import net.minecraft.util.math.Vec3d;import net.minecraft.util.text.ITextComponent;import net.minecraft.util.text.event.HoverEvent;import net.minecraft.world.Explosion;import net.minecraft.world.GameType;import net.minecraft.world.IInteractionObject;import net.minecraft.world.LockCode;import net.minecraft.world.World;import net.minecraftforge.common.capabilities.Capability;public class Modchu_EntityPlayerSP extends EntityPlayerSP implements Modchu_IEntityPlayerSP {	public Modchu_IEntityPlayerSPMaster master;	public Modchu_EntityPlayerSP(HashMap<String, Object> map) {		super((Minecraft)map.get("Object"), (World)map.get("Object1"), (NetHandlerPlayClient)map.get("Object2"), (StatisticsManager)map.get("Object3"), (RecipeBook)map.get("Object4"));		map.put("base", this);		Object instance = Modchu_Main.newModchuCharacteristicInstance(map);		//Modchu_Debug.lDebug("Modchu_EntityPlayerSP init instance="+instance);		master = instance != null				&& instance instanceof Modchu_IEntityPlayerSPMaster ? (Modchu_IEntityPlayerSPMaster) instance : null;		if (master != null); else Modchu_Debug.lDebug("Modchu_EntityPlayerSP init master == null !!");	}	// 194~220共通コピペ　↓	@Override	public boolean isDamageInvincible() {		return master != null ? master.isDamageInvincible() : false;	}	@Override	public void entityDataManagerRegister(Class[] c1, int i, Object o) {		((Modchu_IEntityDataManager) dataManager).entityDataManagerRegister(c1, i, o);	}	@Override	public Object getDataWatcherWatchableObject(int i) {		return ((Modchu_IEntityDataManager) dataManager).getDataWatcherWatchableObject(i);	}	@Override	public void setDataWatcherWatchableObject(int i, Object o) {		((Modchu_IEntityDataManager) dataManager).setDataWatcherWatchableObject(i, o);	}	@Override	public int getDamageInvincibleCount() {		return master != null ? master.getDamageInvincibleCount() : 0;	}	@Override	public void setDamageInvincibleCount(int i) {		if (master != null) master.setDamageInvincibleCount(i);	}	@Override	public boolean isInitFlag() {		return master != null;	}	@Override	public int getTempIsRiding() {		return master != null ? master.getTempIsRiding() : 0;	}	@Override	public void setTempIsRiding(int i) {		if (master != null) master.setTempIsRiding(i);	}	@Override	public int getDataWatcherWatchableObjectIdFirst() {		return 15;	}	@Override	public void dataParameterMapSetting(HashMap<Integer, Object> map) {	}	@Override	public int getEntityDataManagerEntriesCount() {		return Modchu_EntityHelper.getInstance().getEntityDataManagerEntriesCount(this);	}	@Override	public void sendDeathMessage(Object damageSource) {		if (master != null) master.sendDeathMessage(damageSource);	}	@Override	public boolean canSendDeathMessage() {		return master != null ? master.canSendDeathMessage() : false;	}	@Override	public Entity getRidingEntity2() {		return (Entity) (master != null ? master.getRidingEntity2() : null);	}	@Override	public boolean isRiding2() {		return master != null ? master.isRiding2() : false;	}	@Override	public void dismountRidingEntity2() {		if (master != null) master.dismountRidingEntity2();	}	@Override	public Object getFreeVariable(String s) {		return master.getFreeVariable(s);	}	@Override	public void setFreeVariable(String s, Object o) {		master.setFreeVariable(s, o);	}	@Override	public void init() {		if (master != null) master.init();	}	@Override	public void wakeUpPlayer(boolean flag, boolean flag1, boolean flag2) {		super.wakeUpPlayer(flag, flag1, flag2);		if (master != null) master.wakeUpPlayer(flag, flag1, flag2);	}	@Override	public void preparePlayerToSpawn() {		super.preparePlayerToSpawn();		if (master != null) master.preparePlayerToSpawn();	}	@Override	public void setPositionCorrection(double par1, double par3, double par5) {		if (master != null) master.setPositionCorrection(par1, par3, par5);	}	@Override	public void onLivingUpdate() {		if (master != null) master.onLivingUpdate();		super.onLivingUpdate();	}	@Override	public EnumCreatureAttribute getCreatureAttribute() {		if (master != null) return (EnumCreatureAttribute) master.getCreatureAttribute();		return super.getCreatureAttribute();	}	@Override	public EnumCreatureAttribute supergetCreatureAttribute() {		return super.getCreatureAttribute();	}	@Override	protected void setSize(float f, float f1) {		if (master != null) master.setSize(f, f1);	}	@Override	public void supersetSize(float f, float f1) {		super.setSize(f, f1);	}	@Override	public double getMountedYOffset() {		if (master != null) return master.getMountedYOffset();		return super.getMountedYOffset();	}	@Override	protected void doWaterSplashEffect() {		if (master != null) master.doWaterSplashEffect();	}	@Override	public double getYOffset() {		if (master != null) return master.getYOffset();		return super.getYOffset();	}	@Override	public boolean pushOutOfBlocks(double d, double d1, double d2) {		if (master != null) return master.pushOutOfBlocks(d, d1, d2);		return super.pushOutOfBlocks(d, d1, d2);	}	@Override	public boolean superpushOutOfBlocks(double d, double d1, double d2) {		return super.pushOutOfBlocks(d, d1, d2);	}	@Override	public boolean isEntityInsideOpaqueBlock() {		if (master != null) return master.isEntityInsideOpaqueBlock();		return super.isEntityInsideOpaqueBlock();	}	public void copyPlayer(EntityPlayer entityplayer) {		if (master != null) master.copyPlayer(entityplayer);	}	public void supercopyPlayer(EntityPlayer entityplayer) {		//super.copyPlayer(entityplayer);	}	public void copyInventory(InventoryPlayer inventoryplayer) {		if (master != null) master.copyInventory(inventoryplayer);	}	@Override	public void publicDoWaterSplashEffect() {		if (master != null) master.doWaterSplashEffect();	}	@Override	public void publicSetSize(float f, float f1) {		if (master != null) master.setSize(f, f1);	}	@Override	public void updateRidden() {		if (master != null) master.updateRidden();	}	@Override	public void superupdateRidden() {		super.updateRidden();	}	public boolean attackEntityFrom(Entity var1, DamageSource par1DamageSource, int par2) {		return master != null ? master.attackEntityFrom(var1, par1DamageSource, par2) : false;	}	public boolean attackEntityFrom(DamageSource par1DamageSource, int par2) {		return master != null ? master.attackEntityFrom(par1DamageSource, par2) : false;	}	public boolean superattackEntityFrom(DamageSource par1DamageSource, int par2) {		return super.attackEntityFrom(par1DamageSource, par2);	}	@Override	public void onDeath(DamageSource par1DamageSource) {		if (master != null) master.onDeath(par1DamageSource);	}	public void superonDeath(DamageSource par1DamageSource) {		super.onDeath(par1DamageSource);	}	@Override	public void setHealth(float f) {		if (master != null) master.setHealth((int) f);	}/*	@Override	public void sendMotionUpdates() {		if (master != null) master.sendMotionUpdates();	}	public void supersendMotionUpdates() {		super.sendMotionUpdates();	}*//*	public float getMaxHealth() {		return master != null ? master.getMaxHealth() : super.getMaxHealth();	}*/	public float getEntityHealth() {		return (Float) (master != null ? master.getHealth() : super.getHealth());	}	public void setEntityHealth(float f) {		if (master != null) master.setHealth(f);	}	@Override	public Object supercopyPlayer(Object entityplayer) {		return null;	}	@Override	public boolean superattackEntityFrom(Object damageSource, int par2) {		return super.attackEntityFrom((DamageSource) damageSource, par2);	}	@Override	public void superwakeUpPlayer(boolean flag, boolean flag1, boolean flag2) {		super.wakeUpPlayer(flag, flag1, flag2);	}	@Override	public void superpreparePlayerToSpawn() {		super.preparePlayerToSpawn();	}	@Override	public void supersetPositionCorrection(double par1, double par3, double par5) {	}	@Override	public void superonLivingUpdate() {		super.onLivingUpdate();	}	@Override	public double supergetMountedYOffset() {		return super.getMountedYOffset();	}	@Override	public void superdoWaterSplashEffect() {		super.doWaterSplashEffect();	}	@Override	public double supergetYOffset() {		return super.getYOffset();	}	@Override	public boolean superisEntityInsideOpaqueBlock() {		return super.isEntityInsideOpaqueBlock();	}	@Override	public Object supercopyInventory(Object inventoryplayer) {		return null;	}	@Override	public boolean superattackEntityFrom(Object entity, Object damageSource, int i) {		return super.attackEntityFrom((DamageSource) damageSource, i);	}	@Override	public float supergetMaxHealth() {		return super.getMaxHealth();	}	@Override	public int supergetMaxHealthInt() {		return (int) super.getMaxHealth();	}	@Override	public float supergetHealth() {		return super.getHealth();	}	@Override	public int supergetHealthInt() {		return (int) super.getHealth();	}	@Override	public void supersetHealth(float f) {		super.setHealth(f);	}	@Override	public void supersetHealthInt(int i) {		super.setHealth(i);	}	@Override	public void superonDeath(Object damageSource) {		super.onDeath((DamageSource) damageSource);	}	@Override	public void supersendMotionUpdates() {	}	// 180~	@Override	public boolean attackEntityFrom(DamageSource damageSource, float amount) {		return master != null ? master.attackEntityFrom(damageSource, amount) : super.attackEntityFrom(damageSource, amount);	}	@Override	public boolean superattackEntityFrom(Object damageSource, float amount) {		return super.attackEntityFrom((DamageSource) damageSource, amount);	}	@Override	public void heal(float healAmount) {		if (master != null) master.heal(healAmount);		else super.heal(healAmount);	}	@Override	public void superheal(float healAmount) {		super.heal(healAmount);	}	@Override	public boolean startRiding(Entity entity) {		return master != null ? master.startRiding(entity) : super.startRiding(entity);	}	@Override	public boolean superstartRiding(Object entity) {		return super.startRiding((Entity) entity);	}	@Override	public void onUpdate() {		if (master != null) master.onUpdate();		else super.onUpdate();	}	@Override	public void superonUpdate() {		super.onUpdate();	}	@Override	public EntityItem dropItem(boolean p_71040_1_) {		return (EntityItem) (master != null ? master.dropItem(p_71040_1_) : super.dropItem(p_71040_1_));	}	@Override	public EntityItem superdropItem(boolean p_71040_1_) {		return super.dropItem(p_71040_1_);	}	@Override	public ItemStack dropItemAndGetStack(EntityItem entityItem) {		return (ItemStack) (master != null ? master.dropItemAndGetStack(entityItem) : super.dropItemAndGetStack(entityItem));	}	@Override	public Object superdropItemAndGetStack(Object entityItem) {		return super.dropItemAndGetStack((EntityItem) entityItem);	}	@Override	public void sendChatMessage(String p_71165_1_) {		if (master != null) master.sendChatMessage(p_71165_1_);		else super.sendChatMessage(p_71165_1_);	}	@Override	public void supersendChatMessage(String p_71165_1_) {		super.sendChatMessage(p_71165_1_);	}	@Override	public void swingArm(EnumHand enumHand) {		if (master != null) master.swingArm(enumHand);		else super.swingArm(enumHand);	}	@Override	public void superswingArm(Object enumHand) {		super.swingArm((EnumHand) enumHand);	}	@Override	public void respawnPlayer() {		if (master != null) master.respawnPlayer();		else super.respawnPlayer();	}	@Override	public void superrespawnPlayer() {		super.respawnPlayer();	}	@Override	protected void damageEntity(DamageSource damageSource, float damageAmount) {		if (master != null) master.damageEntity(damageSource, damageAmount);		else super.damageEntity(damageSource, damageAmount);	}	@Override	public void superdamageEntity(Object damageSource, float damageAmount) {		super.damageEntity((DamageSource) damageSource, damageAmount);	}	@Override	public void closeScreen() {		if (master != null) master.closeScreen();		else super.closeScreen();	}	@Override	public void supercloseScreen() {		super.closeScreen();	}	@Override	public void closeScreenAndDropStack() {		if (master != null) master.closeScreenAndDropStack();		else super.closeScreenAndDropStack();	}	@Override	public void supercloseScreenAndDropStack() {		super.closeScreenAndDropStack();	}	@Override	public void setPlayerSPHealth(float p_71150_1_) {		if (master != null) master.setPlayerSPHealth(p_71150_1_);		else super.setPlayerSPHealth(p_71150_1_);	}	@Override	public void supersetPlayerSPHealth(float p_71150_1_) {		super.setPlayerSPHealth(p_71150_1_);	}	@Override	public void addStat(StatBase statBase, int amount) {		if (master != null) master.addStat(statBase, amount);		else super.addStat(statBase, amount);	}	@Override	public void superaddStat(Object statBase, int amount) {		super.addStat((StatBase) statBase, amount);	}	@Override	public void sendPlayerAbilities() {		if (master != null) master.sendPlayerAbilities();		else super.sendPlayerAbilities();	}	@Override	public void supersendPlayerAbilities() {		super.sendPlayerAbilities();	}	@Override	public boolean isUser() {		return master != null ? master.isUser() : super.isUser();	}	@Override	public boolean superisUser() {		return super.isUser();	}	@Override	protected void sendHorseJump() {		if (master != null) master.sendHorseJump();		else super.sendHorseJump();	}	@Override	public void supersendHorseJump() {		super.sendHorseJump();	}	@Override	public void sendHorseInventory() {		if (master != null) master.sendHorseInventory();		else super.sendHorseInventory();	}	@Override	public void supersendHorseInventory() {		super.sendHorseInventory();	}	@Override	public StatisticsManager getStatFileWriter() {		return (StatisticsManager) (master != null ? master.getStatFileWriter() : super.getStatFileWriter());	}	@Override	public StatisticsManager supergetStatFileWriter() {		return super.getStatFileWriter();	}	@Override	public void setSprinting(boolean sprinting) {		if (master != null) master.setSprinting(sprinting);		else super.setSprinting(sprinting);	}	@Override	public void supersetSprinting(boolean sprinting) {		super.setSprinting(sprinting);	}	@Override	public void setXPStats(float currentXP, int maxXP, int level) {		if (master != null) master.setXPStats(currentXP, maxXP, level);		else super.setXPStats(currentXP, maxXP, level);	}	@Override	public void supersetXPStats(float currentXP, int maxXP, int level) {		super.setXPStats(currentXP, maxXP, level);	}	@Override	public BlockPos getPosition() {		return (BlockPos) (master != null ? master.getPosition() : super.getPosition());	}	@Override	public BlockPos supergetPosition() {		return super.getPosition();	}	@Override	public void playSound(SoundEvent soundEvent, float volume, float pitch) {		if (master != null) master.playSound(soundEvent, volume, pitch);		else super.playSound(soundEvent, volume, pitch);	}	@Override	public void superplaySound(Object name, float volume, float pitch) {		super.playSound((SoundEvent) name, volume, pitch);	}	@Override	public boolean isServerWorld() {		return master != null ? master.isServerWorld() : super.isServerWorld();	}	@Override	public boolean superisServerWorld() {		return super.isServerWorld();	}	@Override	public boolean isRidingHorse() {		return master != null ? master.isRidingHorse() : super.isRidingHorse();	}	@Override	public boolean superisRidingHorse() {		return super.isRidingHorse();	}	@Override	public float getHorseJumpPower() {		return master != null ? master.getHorseJumpPower() : super.getHorseJumpPower();	}	@Override	public float supergetHorseJumpPower() {		return super.getHorseJumpPower();	}	@Override	public void openEditSign(TileEntitySign tileEntitySign) {		if (master != null) master.openEditSign(tileEntitySign);		else super.openEditSign(tileEntitySign);	}	@Override	public void superopenEditSign(Object tileEntitySign) {		super.openEditSign((TileEntitySign) tileEntitySign);	}	@Override	public void displayGuiEditCommandCart(CommandBlockBaseLogic commandBlockBaseLogic) {		if (master != null) master.displayGuiEditCommandCart(commandBlockBaseLogic);		else super.displayGuiEditCommandCart(commandBlockBaseLogic);	}	@Override	public void superdisplayGuiEditCommandCart(Object commandBlockBaseLogic) {		super.displayGuiEditCommandCart((CommandBlockBaseLogic) commandBlockBaseLogic);	}	@Override	public void openBook(ItemStack itemStack, EnumHand enumHand) {		if (master != null) master.openBook(itemStack, enumHand);		else super.openBook(itemStack, enumHand);	}	@Override	public void superopenBook(Object itemStack, Object enumHand) {		super.openBook((ItemStack) itemStack, (EnumHand) enumHand);	}	@Override	public void displayGUIChest(IInventory iInventory) {		if (master != null) master.displayGUIChest(iInventory);		else super.displayGUIChest(iInventory);	}	@Override	public void superdisplayGUIChest(Object iInventory) {		super.displayGUIChest((IInventory) iInventory);	}	@Override	public void superopenGuiHorseInventory(Object entityHorse, Object iInventory) {		super.openGuiHorseInventory((EntityHorse) entityHorse, (IInventory) iInventory);	}	@Override	public void displayGui(IInteractionObject iInteractionObject) {		if (master != null) master.displayGui(iInteractionObject);		else super.displayGui(iInteractionObject);	}	@Override	public void superdisplayGui(Object iInteractionObject) {		super.displayGui((IInteractionObject) iInteractionObject);	}	@Override	public void displayVillagerTradeGui(IMerchant iMerchant) {		if (master != null) master.displayVillagerTradeGui(iMerchant);		else super.displayVillagerTradeGui(iMerchant);	}	@Override	public void superdisplayVillagerTradeGui(Object iMerchant) {		super.displayVillagerTradeGui((IMerchant) iMerchant);	}	@Override	public void onCriticalHit(Entity entity) {		if (master != null) master.onCriticalHit(entity);		else super.onCriticalHit(entity);	}	@Override	public void superonCriticalHit(Object entity) {		super.onCriticalHit((Entity) entity);	}	@Override	public void onEnchantmentCritical(Entity entity) {		if (master != null) master.onEnchantmentCritical(entity);		else super.onEnchantmentCritical(entity);	}	@Override	public void superonEnchantmentCritical(Object entity) {		super.onEnchantmentCritical((Entity) entity);	}	@Override	public boolean isSneaking() {		return master != null ? master.isSneaking() : super.isSneaking();	}	@Override	public boolean superisSneaking() {		return super.isSneaking();	}	@Override	public void updateEntityActionState() {		if (master != null) master.updateEntityActionState();		else super.updateEntityActionState();	}	@Override	public void superupdateEntityActionState() {		super.updateEntityActionState();	}	@Override	protected boolean isCurrentViewEntity() {		return master != null ? master.isCurrentViewEntity() : super.isCurrentViewEntity();	}	@Override	public boolean superisCurrentViewEntity() {		return super.isCurrentViewEntity();	}	@Override	public boolean isSpectator() {		return master != null ? master.isSpectator() : super.isSpectator();	}	@Override	public boolean superisSpectator() {		return super.isSpectator();	}	@Override	public boolean hasPlayerInfo() {		return master != null ? master.hasPlayerInfo() : super.hasPlayerInfo();	}	@Override	public boolean superhasPlayerInfo() {		return super.hasPlayerInfo();	}	@Override	protected NetworkPlayerInfo getPlayerInfo() {		return (NetworkPlayerInfo) (master != null ? master.getPlayerInfo() : super.getPlayerInfo());	}	@Override	public NetworkPlayerInfo supergetPlayerInfo() {		return super.getPlayerInfo();	}	@Override	public boolean hasSkin() {		return master != null ? master.hasSkin() : super.hasSkin();	}	@Override	public boolean superhasSkin() {		return super.hasSkin();	}	@Override	public ResourceLocation getLocationSkin() {		return (ResourceLocation) (master != null ? master.getLocationSkin() : super.getLocationSkin());	}	@Override	public ResourceLocation supergetLocationSkin() {		return super.getLocationSkin();	}	@Override	public ResourceLocation getLocationCape() {		return (ResourceLocation) (master != null ? master.getLocationCape() : super.getLocationCape());	}	@Override	public ResourceLocation supergetLocationCape() {		return super.getLocationCape();	}	@Override	public String getSkinType() {		return master != null ? master.getSkinType() : super.getSkinType();	}	@Override	public String supergetSkinType() {		return super.getSkinType();	}	@Override	public float getFovModifier() {		return master != null ? master.getFovModifier() : super.getFovModifier();	}	@Override	public float supergetFovModifier() {		return super.getFovModifier();	}	@Override	protected void applyEntityAttributes() {		if (master != null) master.applyEntityAttributes();		else super.applyEntityAttributes();	}	@Override	public void superapplyEntityAttributes() {		super.applyEntityAttributes();	}	@Override	protected void entityInit() {		Modchu_EntityHelper.getInstance().entityInit(this);	}	@Override	public void superentityInit() {	}	@Override	public int getItemInUseCount() {		return master != null ? master.getItemInUseCount() : super.getItemInUseCount();	}	@Override	public int supergetItemInUseCount() {		return super.getItemInUseCount();	}	@Override	public boolean isHandActive() {		return master != null ? master.isHandActive() : super.isHandActive();	}	@Override	public boolean superisHandActive() {		return super.isHandActive();	}	@Override	public int getMaxInPortalTime() {		return master != null ? master.getMaxInPortalTime() : super.getMaxInPortalTime();	}	@Override	public int supergetMaxInPortalTime() {		return super.getMaxInPortalTime();	}	@Override	protected SoundEvent getSwimSound() {		return (SoundEvent) (master != null ? master.getSwimSound() : super.getSwimSound());	}	@Override	public Object supergetSwimSound() {		return super.getSwimSound();	}	@Override	protected SoundEvent getSplashSound() {		return (SoundEvent) (master != null ? master.getSplashSound() : super.getSplashSound());	}	@Override	public Object supergetSplashSound() {		return super.getSplashSound();	}	@Override	public int getPortalCooldown() {		return master != null ? master.getPortalCooldown() : super.getPortalCooldown();	}	@Override	public int supergetPortalCooldown() {		return super.getPortalCooldown();	}	@Override	protected void updateItemUse(ItemStack itemStack, int p_71010_2_) {		if (master != null) master.updateItemUse(itemStack, p_71010_2_);		else super.updateItemUse(itemStack, p_71010_2_);	}	@Override	public void superupdateItemUse(Object itemStack, int p_71010_2_) {		super.updateItemUse((ItemStack) itemStack, p_71010_2_);	}	@Override	protected void onItemUseFinish() {		if (master != null) master.onItemUseFinish();		else super.onItemUseFinish();	}	@Override	public void superonItemUseFinish() {		super.onItemUseFinish();	}	@Override	public void handleStatusUpdate(byte p_70103_1_) {		if (master != null) master.handleStatusUpdate(p_70103_1_);		else super.handleStatusUpdate(p_70103_1_);	}	@Override	public void superhandleStatusUpdate(byte p_70103_1_) {		super.handleStatusUpdate(p_70103_1_);	}	@Override	protected boolean isMovementBlocked() {		return master != null ? master.isMovementBlocked() : super.isMovementBlocked();	}	@Override	public boolean superisMovementBlocked() {		return super.isMovementBlocked();	}	@Override	public int getScore() {		return master != null ? master.getScore() : super.getScore();	}	@Override	public int supergetScore() {		return super.getScore();	}	@Override	public void setScore(int p_85040_1_) {		if (master != null) master.setScore(p_85040_1_);		else super.setScore(p_85040_1_);	}	@Override	public void supersetScore(int p_85040_1_) {		super.setScore(p_85040_1_);	}	@Override	public void addScore(int p_85039_1_) {		if (master != null) master.addScore(p_85039_1_);		else super.addScore(p_85039_1_);	}	@Override	public void superaddScore(int p_85039_1_) {		super.addScore(p_85039_1_);	}	@Override	protected SoundEvent getDeathSound() {		return (SoundEvent) (master != null ? master.getDeathSound() : super.getDeathSound());	}	@Override	public Object supergetDeathSound() {		return super.getDeathSound();	}	@Override	public EntityItem dropItem(ItemStack itemStack, boolean unused) {		return (EntityItem) (master != null ? master.dropItem(itemStack, unused) : super.dropItem(itemStack, unused));	}	@Override	public EntityItem superdropItem(Object itemStack, boolean unused) {		return super.dropItem((ItemStack) itemStack, unused);	}	@Override	public EntityItem dropItem(ItemStack itemStack, boolean dropAround, boolean traceItem) {		return (EntityItem) (master != null ? master.dropItem(itemStack, dropAround, traceItem) : super.dropItem(itemStack, dropAround, traceItem));	}	@Override	public EntityItem superdropItem(Object itemStack, boolean dropAround, boolean traceItem) {		return super.dropItem((ItemStack) itemStack, dropAround, traceItem);	}	@Override	public float getDigSpeed(IBlockState iBlockState) {		return master != null ? master.getDigSpeed(iBlockState) : super.getDigSpeed(iBlockState);	}	@Override	public float supergetToolDigEfficiency(Object iBlockState) {		return super.getDigSpeed((IBlockState) iBlockState);	}	@Override	public float getDigSpeed(IBlockState iBlockState, BlockPos blockPos) {		return master != null ? master.getDigSpeed(iBlockState, blockPos) : super.getDigSpeed(iBlockState, blockPos);	}	@Override	public float supergetDigSpeed(Object iBlockState, Object blockPos) {		return super.getDigSpeed((IBlockState) iBlockState, (BlockPos) blockPos);	}	@Override	public boolean canHarvestBlock(IBlockState iBlockState) {		return master != null ? master.canHarvestBlock(iBlockState) : super.canHarvestBlock(iBlockState);	}	@Override	public boolean supercanHarvestBlock(Object block) {		return super.canHarvestBlock((IBlockState) block);	}	@Override	public void readEntityFromNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.readEntityFromNBT(nBTTagCompound);		else super.readEntityFromNBT(nBTTagCompound);	}	@Override	public void superreadEntityFromNBT(Object nBTTagCompound) {		super.readEntityFromNBT((NBTTagCompound) nBTTagCompound);	}	@Override	public void writeEntityToNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.writeEntityToNBT(nBTTagCompound);		else super.writeEntityToNBT(nBTTagCompound);	}	@Override	public void superwriteEntityToNBT(Object nBTTagCompound) {		super.writeEntityToNBT((NBTTagCompound) nBTTagCompound);	}	@Override	public boolean canAttackPlayer(EntityPlayer entityPlayer) {		return master != null ? master.canAttackPlayer(entityPlayer) : super.canAttackPlayer(entityPlayer);	}	@Override	public boolean supercanAttackPlayer(Object entityPlayer) {		return super.canAttackPlayer((EntityPlayer) entityPlayer);	}	@Override	protected void damageArmor(float p_70675_1_) {		if (master != null) master.damageArmor(p_70675_1_);		else super.damageArmor(p_70675_1_);	}	@Override	public void superdamageArmor(float p_70675_1_) {		super.damageArmor(p_70675_1_);	}	@Override	public int getTotalArmorValue() {		return master != null ? master.getTotalArmorValue() : super.getTotalArmorValue();	}	@Override	public int supergetTotalArmorValue() {		return super.getTotalArmorValue();	}	@Override	public float getArmorVisibility() {		return master != null ? master.getArmorVisibility() : super.getArmorVisibility();	}	@Override	public float supergetArmorVisibility() {		return super.getArmorVisibility();	}	@Override	public ItemStack getHeldItemMainhand() {		return (ItemStack) (master != null ? master.getHeldItemMainhand() : super.getHeldItemMainhand());	}	@Override	public ItemStack supergetHeldItemMainhand() {		return super.getHeldItemMainhand();	}	@Override	public void attackTargetEntityWithCurrentItem(Entity entity) {		if (master != null) master.attackTargetEntityWithCurrentItem(entity);		else super.attackTargetEntityWithCurrentItem(entity);	}	@Override	public void superattackTargetEntityWithCurrentItem(Object entity) {		super.attackTargetEntityWithCurrentItem((Entity) entity);	}	@Override	public void setDead() {		if (master != null) master.setDead();		else super.setDead();	}	@Override	public void supersetDead() {		super.setDead();	}	@Override	public GameProfile getGameProfile() {		return (GameProfile) (master != null ? master.getGameProfile() : super.getGameProfile());	}	@Override	public GameProfile supergetGameProfile() {		return super.getGameProfile();	}	@Override	public SleepResult trySleep(BlockPos blockPos) {		return (SleepResult) (master != null ? master.trySleep(blockPos) : super.trySleep(blockPos));	}	@Override	public SleepResult supertrySleep(Object blockPos) {		return super.trySleep((BlockPos) blockPos);	}	@Override	public float getBedOrientationInDegrees() {		return master != null ? master.getBedOrientationInDegrees() : super.getBedOrientationInDegrees();	}	@Override	public float supergetBedOrientationInDegrees() {		return super.getBedOrientationInDegrees();	}	@Override	public boolean isPlayerSleeping() {		return master != null ? master.isPlayerSleeping() : super.isPlayerSleeping();	}	@Override	public boolean superisPlayerSleeping() {		return super.isPlayerSleeping();	}	@Override	public boolean isPlayerFullyAsleep() {		return master != null ? master.isPlayerFullyAsleep() : super.isPlayerFullyAsleep();	}	@Override	public boolean superisPlayerFullyAsleep() {		return super.isPlayerFullyAsleep();	}	@Override	public int getSleepTimer() {		return master != null ? master.getSleepTimer() : super.getSleepTimer();	}	@Override	public int supergetSleepTimer() {		return super.getSleepTimer();	}	@Override	public BlockPos getBedLocation() {		return (BlockPos) (master != null ? master.getBedLocation() : super.getBedLocation());	}	@Override	public BlockPos supergetBedLocation() {		return super.getBedLocation();	}	@Override	public boolean isSpawnForced() {		return master != null ? master.isSpawnForced() : super.isSpawnForced();	}	@Override	public boolean superisSpawnForced() {		return super.isSpawnForced();	}	@Override	public void setSpawnPoint(BlockPos blockPos, boolean forced) {		if (master != null) master.setSpawnPoint(blockPos, forced);		else super.setSpawnPoint(blockPos, forced);	}	@Override	public void supersetSpawnPoint(Object blockPos, boolean forced) {		super.setSpawnPoint((BlockPos) blockPos, forced);	}	@Override	public void addStat(StatBase statBase) {		if (master != null) master.addStat(statBase);		else super.addStat(statBase);	}	@Override	public void superaddStat(Object statBase) {		super.addStat((StatBase) statBase);	}	@Override	public void takeStat(StatBase statBase) {		if (master != null) master.takeStat(statBase);		else super.takeStat(statBase);	}	@Override	public void supertakeStat(Object statBase) {		super.takeStat((StatBase) statBase);	}	@Override	public void jump() {		if (master != null) master.jump();		else super.jump();	}	@Override	public void superjump() {		super.jump();	}	@Override	public float getAIMoveSpeed() {		return master != null ? master.getAIMoveSpeed() : super.getAIMoveSpeed();	}	@Override	public float supergetAIMoveSpeed() {		return super.getAIMoveSpeed();	}	@Override	public void addMovementStat(double p_71000_1_, double p_71000_3_, double p_71000_5_) {		if (master != null) master.addMovementStat(p_71000_1_, p_71000_3_, p_71000_5_);		else super.addMovementStat(p_71000_1_, p_71000_3_, p_71000_5_);	}	@Override	public void superaddMovementStat(double p_71000_1_, double p_71000_3_, double p_71000_5_) {		super.addMovementStat(p_71000_1_, p_71000_3_, p_71000_5_);	}	@Override	public void fall(float distance, float damageMultiplier) {		if (master != null) master.fall(distance, damageMultiplier);		else super.fall(distance, damageMultiplier);	}	@Override	public void superfall(float distance, float damageMultiplier) {		super.fall(distance, damageMultiplier);	}	@Override	protected SoundEvent getFallSound(int damageValue) {		return (SoundEvent) (master != null ? master.getFallSound(damageValue) : super.getFallSound(damageValue));	}	@Override	public Object supergetFallSound(int damageValue) {		return super.getFallSound(damageValue);	}	@Override	public void onKillEntity(EntityLivingBase entityLivingBase) {		if (master != null) master.onKillEntity(entityLivingBase);		else super.onKillEntity(entityLivingBase);	}	@Override	public void superonKillEntity(Object entityLivingBase) {		super.onKillEntity((EntityLivingBase) entityLivingBase);	}	@Override	public void setInWeb() {		if (master != null) master.setInWeb();		else super.setInWeb();	}	@Override	public void supersetInWeb() {		super.setInWeb();	}	@Override	public ItemStack getItemStackFromSlot(EntityEquipmentSlot entityEquipmentSlot) {		return (ItemStack) (master != null ? master.getItemStackFromSlot(entityEquipmentSlot) : super.getItemStackFromSlot(entityEquipmentSlot));	}	@Override	public Object supergetItemStackFromSlot(Object entityEquipmentSlot) {		return super.getItemStackFromSlot((EntityEquipmentSlot) entityEquipmentSlot);	}	@Override	public void addExperience(int amount) {		if (master != null) master.addExperience(amount);		else super.addExperience(amount);	}	@Override	public void superaddExperience(int amount) {		super.addExperience(amount);	}	@Override	public int getXPSeed() {		return master != null ? master.getXPSeed() : super.getXPSeed();	}	@Override	public int supergetXPSeed() {		return super.getXPSeed();	}	@Override	public void addExperienceLevel(int levels) {		if (master != null) master.addExperienceLevel(levels);		else super.addExperienceLevel(levels);	}	@Override	public void superaddExperienceLevel(int levels) {		super.addExperienceLevel(levels);	}	@Override	public int xpBarCap() {		return master != null ? master.xpBarCap() : super.xpBarCap();	}	@Override	public int superxpBarCap() {		return super.xpBarCap();	}	@Override	public void addExhaustion(float p_71020_1_) {		if (master != null) master.addExhaustion(p_71020_1_);		else super.addExhaustion(p_71020_1_);	}	@Override	public void superaddExhaustion(float p_71020_1_) {		super.addExhaustion(p_71020_1_);	}	@Override	public FoodStats getFoodStats() {		return (FoodStats) (master != null ? master.getFoodStats() : super.getFoodStats());	}	@Override	public FoodStats supergetFoodStats() {		return super.getFoodStats();	}	@Override	public boolean canEat(boolean ignoreHunger) {		return master != null ? master.canEat(ignoreHunger) : super.canEat(ignoreHunger);	}	@Override	public boolean supercanEat(boolean ignoreHunger) {		return super.canEat(ignoreHunger);	}	@Override	public boolean shouldHeal() {		return master != null ? master.shouldHeal() : super.shouldHeal();	}	@Override	public boolean supershouldHeal() {		return super.shouldHeal();	}	@Override	public boolean isAllowEdit() {		return master != null ? master.isAllowEdit() : super.isAllowEdit();	}	@Override	public boolean superisAllowEdit() {		return super.isAllowEdit();	}	@Override	public boolean canPlayerEdit(BlockPos blockPos, EnumFacing enumFacing, ItemStack itemStack) {		return master != null ? master.canPlayerEdit(blockPos, enumFacing, itemStack) : super.canPlayerEdit(blockPos, enumFacing, itemStack);	}	@Override	public boolean supercanPlayerEdit(Object blockPos, Object enumFacing, Object itemStack) {		return super.canPlayerEdit((BlockPos) blockPos, (EnumFacing) enumFacing, (ItemStack) itemStack);	}	@Override	protected int getExperiencePoints(EntityPlayer entityPlayer) {		return master != null ? master.getExperiencePoints(entityPlayer) : super.getExperiencePoints(entityPlayer);	}	@Override	public int supergetExperiencePoints(Object entityPlayer) {		return super.getExperiencePoints((EntityPlayer) entityPlayer);	}	@Override	protected boolean isPlayer() {		return master != null ? master.isPlayer() : super.isPlayer();	}	@Override	public boolean superisPlayer() {		return super.isPlayer();	}	@Override	public boolean getAlwaysRenderNameTagForRender() {		return master != null ? master.getAlwaysRenderNameTagForRender() : super.getAlwaysRenderNameTagForRender();	}	@Override	public boolean supergetAlwaysRenderNameTagForRender() {		return super.getAlwaysRenderNameTagForRender();	}	@Override	protected boolean canTriggerWalking() {		return master != null ? master.canTriggerWalking() : super.canTriggerWalking();	}	@Override	public boolean supercanTriggerWalking() {		return super.canTriggerWalking();	}	@Override	public String getName() {		return master != null ? master.getName() : super.getName();	}	@Override	public String supergetName() {		return super.getName();	}	@Override	public InventoryEnderChest getInventoryEnderChest() {		return (InventoryEnderChest) (master != null ? master.getInventoryEnderChest() : super.getInventoryEnderChest());	}	@Override	public InventoryEnderChest supergetInventoryEnderChest() {		return super.getInventoryEnderChest();	}	@Override	public void setItemStackToSlot(EntityEquipmentSlot entityEquipmentSlot, ItemStack itemStack) {		if (master != null) master.setItemStackToSlot(entityEquipmentSlot, itemStack);		else super.setItemStackToSlot(entityEquipmentSlot, itemStack);	}	@Override	public void supersetItemStackToSlot(Object entityEquipmentSlot, Object itemStack) {		super.setItemStackToSlot((EntityEquipmentSlot) entityEquipmentSlot, (ItemStack) itemStack);	}	@Override	public boolean isInvisibleToPlayer(EntityPlayer entityPlayer) {		return master != null ? master.isInvisibleToPlayer(entityPlayer) : super.isInvisibleToPlayer(entityPlayer);	}	@Override	public boolean superisInvisibleToPlayer(Object entityPlayer) {		return super.isInvisibleToPlayer((EntityPlayer) entityPlayer);	}	@Override	public boolean isPushedByWater() {		return master != null ? master.isPushedByWater() : super.isPushedByWater();	}	@Override	public boolean superisPushedByWater() {		return super.isPushedByWater();	}	@Override	public Scoreboard getWorldScoreboard() {		return (Scoreboard) (master != null ? master.getWorldScoreboard() : super.getWorldScoreboard());	}	@Override	public Scoreboard supergetWorldScoreboard() {		return super.getWorldScoreboard();	}	@Override	public Team getTeam() {		return (Team) (master != null ? master.getTeam() : super.getTeam());	}	@Override	public Team supergetTeam() {		return super.getTeam();	}	@Override	public ITextComponent getDisplayName() {		return (ITextComponent) (master != null ? master.getDisplayName() : super.getDisplayName());	}	@Override	public Object supergetDisplayName() {		return super.getDisplayName();	}	@Override	public float getEyeHeight() {		return master != null ? master.getEyeHeight() : super.getEyeHeight();	}	@Override	public float supergetEyeHeight() {		return super.getEyeHeight();	}	@Override	public void setAbsorptionAmount(float amount) {		if (master != null) master.setAbsorptionAmount(amount);		else super.setAbsorptionAmount(amount);	}	@Override	public void supersetAbsorptionAmount(float amount) {		super.setAbsorptionAmount(amount);	}	@Override	public float getAbsorptionAmount() {		return master != null ? master.getAbsorptionAmount() : super.getAbsorptionAmount();	}	@Override	public float supergetAbsorptionAmount() {		return super.getAbsorptionAmount();	}	@Override	public boolean canOpen(LockCode lockCode) {		return master != null ? master.canOpen(lockCode) : super.canOpen(lockCode);	}	@Override	public boolean supercanOpen(Object lockCode) {		return super.canOpen((LockCode) lockCode);	}	@Override	public boolean isWearing(EnumPlayerModelParts enumPlayerModelParts) {		return master != null ? master.isWearing(enumPlayerModelParts) : super.isWearing(enumPlayerModelParts);	}	@Override	public boolean superisWearing(Object enumPlayerModelParts) {		return super.isWearing((EnumPlayerModelParts) enumPlayerModelParts);	}	@Override	public boolean sendCommandFeedback() {		return master != null ? master.sendCommandFeedback() : super.sendCommandFeedback();	}	@Override	public boolean supersendCommandFeedback() {		return super.sendCommandFeedback();	}	@Override	public boolean replaceItemInInventory(int p_174820_1_, ItemStack itemStack) {		return master != null ? master.replaceItemInInventory(p_174820_1_, itemStack) : super.replaceItemInInventory(p_174820_1_, itemStack);	}	@Override	public boolean superreplaceItemInInventory(int p_174820_1_, Object itemStack) {		return super.replaceItemInInventory(p_174820_1_, (ItemStack) itemStack);	}	@Override	public boolean hasReducedDebug() {		return master != null ? master.hasReducedDebug() : super.hasReducedDebug();	}	@Override	public boolean superhasReducedDebug() {		return super.hasReducedDebug();	}	@Override	public void setReducedDebug(boolean reducedDebug) {		if (master != null) master.setReducedDebug(reducedDebug);		else super.setReducedDebug(reducedDebug);	}	@Override	public void supersetReducedDebug(boolean reducedDebug) {		super.setReducedDebug(reducedDebug);	}	@Override	public void openGui(Object mod, int modGuiId, World world, int x, int y, int z) {		if (master != null) master.openGui(mod, modGuiId, world, x, y, z);		else super.openGui(mod, modGuiId, world, x, y, z);	}	@Override	public void superopenGui(Object mod, int modGuiId, Object world, int x, int y, int z) {		super.openGui(mod, modGuiId, (World) world, x, y, z);	}	@Override	public BlockPos getBedLocation(int dimension) {		return (BlockPos) (master != null ? master.getBedLocation(dimension) : super.getBedLocation(dimension));	}	@Override	public BlockPos supergetBedLocation(int dimension) {		return super.getBedLocation(dimension);	}	@Override	public boolean isSpawnForced(int dimension) {		return master != null ? master.isSpawnForced(dimension) : super.isSpawnForced(dimension);	}	@Override	public boolean superisSpawnForced(int dimension) {		return super.isSpawnForced(dimension);	}	@Override	public void setSpawnChunk(BlockPos blockPos, boolean forced, int dimension) {		if (master != null) master.setSpawnChunk(blockPos, forced, dimension);		else super.setSpawnChunk(blockPos, forced, dimension);	}	@Override	public void supersetSpawnChunk(Object blockPos, boolean forced, int dimension) {		super.setSpawnChunk((BlockPos) blockPos, forced, dimension);	}	@Override	public float getDefaultEyeHeight() {		return master != null ? master.getDefaultEyeHeight() : super.getDefaultEyeHeight();	}	@Override	public float supergetDefaultEyeHeight() {		return super.getDefaultEyeHeight();	}	@Override	public String getDisplayNameString() {		return master != null ? master.getDisplayNameString() : super.getDisplayNameString();	}	@Override	public String supergetDisplayNameString() {		return super.getDisplayNameString();	}	@Override	public void refreshDisplayName() {		if (master != null) master.refreshDisplayName();		else super.refreshDisplayName();	}	@Override	public void superrefreshDisplayName() {		super.refreshDisplayName();	}	@Override	public void onKillCommand() {		if (master != null) master.onKillCommand();		else super.onKillCommand();	}	@Override	public void superonKillCommand() {		super.onKillCommand();	}	@Override	protected void updateFallState(double p_180433_1_, boolean p_180433_3_, IBlockState iBlockState, BlockPos blockPos) {		if (master != null) master.updateFallState(p_180433_1_, p_180433_3_, iBlockState, blockPos);		else super.updateFallState(p_180433_1_, p_180433_3_, iBlockState, blockPos);	}	@Override	public void superupdateFallState(double p_180433_1_, boolean p_180433_3_, Object iBlockState, Object blockPos) {		super.updateFallState(p_180433_1_, p_180433_3_, (IBlockState) iBlockState, (BlockPos) blockPos);	}	@Override	public boolean canBreatheUnderwater() {		return master != null ? master.canBreatheUnderwater() : super.canBreatheUnderwater();	}	@Override	public boolean supercanBreatheUnderwater() {		return super.canBreatheUnderwater();	}	@Override	public void onEntityUpdate() {		if (master != null) master.onEntityUpdate();		else super.onEntityUpdate();	}	@Override	public void superonEntityUpdate() {		super.onEntityUpdate();	}	@Override	public boolean isChild() {		return master != null ? master.isChild() : super.isChild();	}	@Override	public boolean superisChild() {		return super.isChild();	}	@Override	protected void onDeathUpdate() {		if (master != null) master.onDeathUpdate();		else super.onDeathUpdate();	}	@Override	public void superonDeathUpdate() {		super.onDeathUpdate();	}	@Override	protected boolean canDropLoot() {		return master != null ? master.canDropLoot() : super.canDropLoot();	}	@Override	public boolean supercanDropLoot() {		return super.canDropLoot();	}	@Override	protected int decreaseAirSupply(int p_70682_1_) {		return master != null ? master.decreaseAirSupply(p_70682_1_) : super.decreaseAirSupply(p_70682_1_);	}	@Override	public int superdecreaseAirSupply(int p_70682_1_) {		return super.decreaseAirSupply(p_70682_1_);	}	@Override	public Random getRNG() {		return master != null ? master.getRNG() : super.getRNG();	}	@Override	public Random supergetRNG() {		return super.getRNG();	}	@Override	public EntityLivingBase getRevengeTarget() {		return (EntityLivingBase) (master != null ? master.getRevengeTarget() : super.getRevengeTarget());	}	@Override	public EntityLivingBase supergetRevengeTarget() {		return super.getRevengeTarget();	}	@Override	public int getRevengeTimer() {		return master != null ? master.getRevengeTimer() : super.getRevengeTimer();	}	@Override	public int supergetRevengeTimer() {		return super.getRevengeTimer();	}	@Override	public void setRevengeTarget(EntityLivingBase entityLivingBase) {		if (master != null) master.setRevengeTarget(entityLivingBase);		else super.setRevengeTarget(entityLivingBase);	}	@Override	public void supersetRevengeTarget(Object entityLivingBase) {		super.setRevengeTarget((EntityLivingBase) entityLivingBase);	}	@Override	public EntityLivingBase getLastAttackedEntity() {		return (EntityLivingBase) (master != null ? master.getLastAttackedEntity() : super.getLastAttackedEntity());	}	@Override	public EntityLivingBase supergetLastAttackedEntity() {		return super.getLastAttackedEntity();	}	@Override	public int getLastAttackedEntityTime() {		return master != null ? master.getLastAttackedEntityTime() : super.getLastAttackedEntityTime();	}	@Override	public int supergetLastAttackedEntityTime() {		return super.getLastAttackedEntityTime();	}	@Override	public void setLastAttackedEntity(Entity entity) {		if (master != null) master.setLastAttackedEntity(entity);		else super.setLastAttackedEntity(entity);	}	@Override	public void supersetLastAttackedEntity(Object entity) {		super.setLastAttackedEntity((Entity) entity);	}	@Override	public int getIdleTime() {		return master != null ? master.getIdleTime() : super.getIdleTime();	}	@Override	public int supergetIdleTime() {		return super.getIdleTime();	}	@Override	protected void updatePotionEffects() {		if (master != null) master.updatePotionEffects();		else super.updatePotionEffects();	}	@Override	public void superupdatePotionEffects() {		super.updatePotionEffects();	}	@Override	protected void updatePotionMetadata() {		if (master != null) master.updatePotionMetadata();		else super.updatePotionMetadata();	}	@Override	public void superupdatePotionMetadata() {		super.updatePotionMetadata();	}	@Override	protected void resetPotionEffectMetadata() {		if (master != null) master.resetPotionEffectMetadata();		else super.resetPotionEffectMetadata();	}	@Override	public void superresetPotionEffectMetadata() {		super.resetPotionEffectMetadata();	}	@Override	public void clearActivePotions() {		if (master != null) master.clearActivePotions();		else super.clearActivePotions();	}	@Override	public void superclearActivePotions() {		super.clearActivePotions();	}	@Override	public Collection getActivePotionEffects() {		return (Collection) (master != null ? master.getActivePotionEffects() : super.getActivePotionEffects());	}	@Override	public Collection supergetActivePotionEffects() {		return super.getActivePotionEffects();	}	@Override	public boolean isPotionActive(Potion potion) {		return master != null ? master.isPotionActive(potion) : super.isPotionActive(potion);	}	@Override	public boolean superisPotionActive(Object potion) {		return super.isPotionActive((Potion) potion);	}	@Override	public PotionEffect getActivePotionEffect(Potion potion) {		return (PotionEffect) (master != null ? master.getActivePotionEffect(potion) : super.getActivePotionEffect(potion));	}	@Override	public PotionEffect supergetActivePotionEffect(Object potion) {		return super.getActivePotionEffect((Potion) potion);	}	@Override	public void addPotionEffect(PotionEffect potionEffect) {		if (master != null) master.addPotionEffect(potionEffect);		else super.addPotionEffect(potionEffect);	}	@Override	public void superaddPotionEffect(Object potionEffect) {		super.addPotionEffect((PotionEffect) potionEffect);	}	@Override	public boolean isPotionApplicable(PotionEffect potionEffect) {		return master != null ? master.isPotionApplicable(potionEffect) : super.isPotionApplicable(potionEffect);	}	@Override	public boolean superisPotionApplicable(Object potionEffect) {		return super.isPotionApplicable((PotionEffect) potionEffect);	}	@Override	public boolean isEntityUndead() {		return master != null ? master.isEntityUndead() : super.isEntityUndead();	}	@Override	public boolean superisEntityUndead() {		return super.isEntityUndead();	}	@Override	protected void onNewPotionEffect(PotionEffect potionEffect) {		if (master != null) master.onNewPotionEffect(potionEffect);		else super.onNewPotionEffect(potionEffect);	}	@Override	public void superonNewPotionEffect(Object potionEffect) {		super.onNewPotionEffect((PotionEffect) potionEffect);	}	@Override	protected void onChangedPotionEffect(PotionEffect potionEffect, boolean p_70695_2_) {		if (master != null) master.onChangedPotionEffect(potionEffect, p_70695_2_);		else super.onChangedPotionEffect(potionEffect, p_70695_2_);	}	@Override	public void superonChangedPotionEffect(Object potionEffect, boolean p_70695_2_) {		super.onChangedPotionEffect((PotionEffect) potionEffect, p_70695_2_);	}	@Override	protected void onFinishedPotionEffect(PotionEffect potionEffect) {		if (master != null) master.onFinishedPotionEffect(potionEffect);		else super.onFinishedPotionEffect(potionEffect);	}	@Override	public void superonFinishedPotionEffect(Object potionEffect) {		super.onFinishedPotionEffect((PotionEffect) potionEffect);	}	@Override	public void renderBrokenItemStack(ItemStack itemStack) {		if (master != null) master.renderBrokenItemStack(itemStack);		else super.renderBrokenItemStack(itemStack);	}	@Override	public void superrenderBrokenItemStack(Object itemStack) {		super.renderBrokenItemStack((ItemStack) itemStack);	}	@Override	protected void dropEquipment(boolean p_82160_1_, int p_82160_2_) {		if (master != null) master.dropEquipment(p_82160_1_, p_82160_2_);		else super.dropEquipment(p_82160_1_, p_82160_2_);	}	@Override	public void superdropEquipment(boolean p_82160_1_, int p_82160_2_) {		super.dropEquipment(p_82160_1_, p_82160_2_);	}	@Override	public void knockBack(Entity entity, float p_70653_2_, double p_70653_3_, double p_70653_5_) {		if (master != null) master.knockBack(entity, p_70653_2_, p_70653_3_, p_70653_5_);		else super.knockBack(entity, p_70653_2_, p_70653_3_, p_70653_5_);	}	@Override	public void superknockBack(Object entity, float p_70653_2_, double p_70653_3_, double p_70653_5_) {		super.knockBack((Entity) entity, p_70653_2_, p_70653_3_, p_70653_5_);	}	@Override	protected void dropLoot(boolean p_184610_1_, int p_184610_2_, DamageSource damageSource) {		if (master != null) master.dropLoot(p_184610_1_, p_184610_2_, damageSource);		else super.dropLoot(p_184610_1_, p_184610_2_, damageSource);	}	@Override	public void superdropLoot(boolean p_184610_1_, int p_184610_2_, Object damageSource) {		super.dropLoot(p_184610_1_, p_184610_2_, (DamageSource) damageSource);	}	@Override	protected void dropFewItems(boolean p_70628_1_, int p_70628_2_) {		if (master != null) master.dropFewItems(p_70628_1_, p_70628_2_);		else super.dropFewItems(p_70628_1_, p_70628_2_);	}	@Override	public void superdropFewItems(boolean p_70628_1_, int p_70628_2_) {		super.dropFewItems(p_70628_1_, p_70628_2_);	}	@Override	public boolean isOnLadder() {		return master != null ? master.isOnLadder() : super.isOnLadder();	}	@Override	public boolean superisOnLadder() {		return super.isOnLadder();	}	@Override	public boolean isEntityAlive() {		return master != null ? master.isEntityAlive() : super.isEntityAlive();	}	@Override	public boolean superisEntityAlive() {		return super.isEntityAlive();	}	@Override	public void performHurtAnimation() {		if (master != null) master.performHurtAnimation();		else super.performHurtAnimation();	}	@Override	public void superperformHurtAnimation() {		super.performHurtAnimation();	}	@Override	protected float applyArmorCalculations(DamageSource damageSource, float p_70655_2_) {		return (Float) (master != null ? master.applyArmorCalculations(damageSource, p_70655_2_) : super.applyArmorCalculations(damageSource, p_70655_2_));	}	@Override	public Object superapplyArmorCalculations(Object damageSource, float p_70655_2_) {		return super.applyArmorCalculations((DamageSource) damageSource, p_70655_2_);	}	@Override	protected float applyPotionDamageCalculations(DamageSource damageSource, float p_70672_2_) {		return (Float) (master != null ? master.applyPotionDamageCalculations(damageSource, p_70672_2_) : super.applyPotionDamageCalculations(damageSource, p_70672_2_));	}	@Override	public Object superapplyPotionDamageCalculations(Object damageSource, float p_70672_2_) {		return super.applyPotionDamageCalculations((DamageSource) damageSource, p_70672_2_);	}	@Override	public CombatTracker getCombatTracker() {		return (CombatTracker) (master != null ? master.getCombatTracker() : super.getCombatTracker());	}	@Override	public CombatTracker supergetCombatTracker() {		return super.getCombatTracker();	}	@Override	public EntityLivingBase getAttackingEntity() {		return (EntityLivingBase) (master != null ? master.getAttackingEntity() : super.getAttackingEntity());	}	@Override	public EntityLivingBase supergetAttackingEntity() {		return super.getAttackingEntity();	}	@Override	protected void outOfWorld() {		if (master != null) master.outOfWorld();		else super.outOfWorld();	}	@Override	public void superoutOfWorld() {		super.outOfWorld();	}	@Override	protected void updateArmSwingProgress() {		if (master != null) master.updateArmSwingProgress();		else super.updateArmSwingProgress();	}	@Override	public void superupdateArmSwingProgress() {		super.updateArmSwingProgress();	}	@Override	public IAttributeInstance getEntityAttribute(IAttribute iAttribute) {		return (IAttributeInstance) (master != null ? master.getEntityAttribute(iAttribute) : super.getEntityAttribute(iAttribute));	}	@Override	public IAttributeInstance supergetEntityAttribute(Object iAttribute) {		return super.getEntityAttribute((IAttribute) iAttribute);	}	@Override	public AbstractAttributeMap getAttributeMap() {		return (AbstractAttributeMap) (master != null ? master.getAttributeMap() : super.getAttributeMap());	}	@Override	public AbstractAttributeMap supergetAttributeMap() {		return super.getAttributeMap();	}	@Override	protected float getSoundVolume() {		return master != null ? master.getSoundVolume() : super.getSoundVolume();	}	@Override	public float supergetSoundVolume() {		return super.getSoundVolume();	}	@Override	protected float getSoundPitch() {		return master != null ? master.getSoundPitch() : super.getSoundPitch();	}	@Override	public float supergetSoundPitch() {		return super.getSoundPitch();	}	@Override	public void dismountEntity(Entity entity) {		if (master != null) master.dismountEntity(entity);		else super.dismountEntity(entity);	}	@Override	public void superdismountEntity(Object entity) {		super.dismountEntity((Entity) entity);	}	@Override	protected float getJumpUpwardsMotion() {		return master != null ? master.getJumpUpwardsMotion() : super.getJumpUpwardsMotion();	}	@Override	public float supergetJumpUpwardsMotion() {		return super.getJumpUpwardsMotion();	}	@Override	protected void handleJumpWater() {		if (master != null) master.handleJumpWater();		else super.handleJumpWater();	}	@Override	public void superhandleJumpWater() {		super.handleJumpWater();	}	@Override	protected void handleJumpLava() {		if (master != null) master.handleJumpLava();		else super.handleJumpLava();	}	@Override	public void superhandleJumpLava() {		super.handleJumpLava();	}	@Override	public void setAIMoveSpeed(float p_70659_1_) {		if (master != null) master.setAIMoveSpeed(p_70659_1_);		else super.setAIMoveSpeed(p_70659_1_);	}	@Override	public void supersetAIMoveSpeed(float p_70659_1_) {		super.setAIMoveSpeed(p_70659_1_);	}	@Override	public boolean attackEntityAsMob(Entity entity) {		return master != null ? master.attackEntityAsMob(entity) : super.attackEntityAsMob(entity);	}	@Override	public boolean superattackEntityAsMob(Object entity) {		return super.attackEntityAsMob((Entity) entity);	}	@Override	protected float updateDistance(float p_110146_1_, float p_110146_2_) {		return master != null ? master.updateDistance(p_110146_1_, p_110146_2_) : super.updateDistance(p_110146_1_, p_110146_2_);	}	@Override	public float superupdateDistance(float p_110146_1_, float p_110146_2_) {		return super.updateDistance(p_110146_1_, p_110146_2_);	}	@Override	protected void collideWithNearbyEntities() {		if (master != null) master.collideWithNearbyEntities();		else super.collideWithNearbyEntities();	}	@Override	public void supercollideWithNearbyEntities() {		super.collideWithNearbyEntities();	}	@Override	protected void collideWithEntity(Entity entity) {		if (master != null) master.collideWithEntity(entity);		else super.collideWithEntity(entity);	}	@Override	public void supercollideWithEntity(Object entity) {		super.collideWithEntity((Entity) entity);	}	@Override	public void setPositionAndRotationDirect(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_) {		if (master != null) master.setPositionAndRotationDirect(p_180426_1_, p_180426_3_, p_180426_5_, p_180426_7_, p_180426_8_, p_180426_9_, p_180426_10_);		else super.setPositionAndRotationDirect(p_180426_1_, p_180426_3_, p_180426_5_, p_180426_7_, p_180426_8_, p_180426_9_, p_180426_10_);	}	@Override	public void supersetPositionAndRotationDirect(double p_180426_1_, double p_180426_3_, double p_180426_5_, float p_180426_7_, float p_180426_8_, int p_180426_9_, boolean p_180426_10_) {		super.setPositionAndRotationDirect(p_180426_1_, p_180426_3_, p_180426_5_, p_180426_7_, p_180426_8_, p_180426_9_, p_180426_10_);	}	@Override	public void setJumping(boolean p_70637_1_) {		if (master != null) master.setJumping(p_70637_1_);		else super.setJumping(p_70637_1_);	}	@Override	public void supersetJumping(boolean p_70637_1_) {		super.setJumping(p_70637_1_);	}	@Override	public void onItemPickup(Entity entity, int p_71001_2_) {		if (master != null) master.onItemPickup(entity, p_71001_2_);		else super.onItemPickup(entity, p_71001_2_);	}	@Override	public void superonItemPickup(Object entity, int p_71001_2_) {		super.onItemPickup((Entity) entity, p_71001_2_);	}	@Override	public boolean canEntityBeSeen(Entity entity) {		return master != null ? master.canEntityBeSeen(entity) : super.canEntityBeSeen(entity);	}	@Override	public boolean supercanEntityBeSeen(Object entity) {		return super.canEntityBeSeen((Entity) entity);	}	@Override	public Vec3d getLookVec() {		return (Vec3d) (master != null ? master.getLookVec() : super.getLookVec());	}	@Override	public Object supergetLookVec() {		return super.getLookVec();	}	@Override	public Vec3d getLook(float p_70676_1_) {		return (Vec3d) (master != null ? master.getLook(p_70676_1_) : super.getLook(p_70676_1_));	}	@Override	public Object supergetLook(float p_70676_1_) {		return super.getLook(p_70676_1_);	}	@Override	public float getSwingProgress(float p_70678_1_) {		return master != null ? master.getSwingProgress(p_70678_1_) : super.getSwingProgress(p_70678_1_);	}	@Override	public float supergetSwingProgress(float p_70678_1_) {		return super.getSwingProgress(p_70678_1_);	}	@Override	public boolean canBeCollidedWith() {		return master != null ? master.canBeCollidedWith() : super.canBeCollidedWith();	}	@Override	public boolean supercanBeCollidedWith() {		return super.canBeCollidedWith();	}	@Override	public boolean canBePushed() {		return master != null ? master.canBePushed() : super.canBePushed();	}	@Override	public boolean supercanBePushed() {		return super.canBePushed();	}	@Override	protected void setBeenAttacked() {		if (master != null) master.setBeenAttacked();		else super.setBeenAttacked();	}	@Override	public void supersetBeenAttacked() {		super.setBeenAttacked();	}	@Override	public float getRotationYawHead() {		return master != null ? master.getRotationYawHead() : super.getRotationYawHead();	}	@Override	public float supergetRotationYawHead() {		return super.getRotationYawHead();	}	@Override	public void setRotationYawHead(float rotation) {		if (master != null) master.setRotationYawHead(rotation);		else super.setRotationYawHead(rotation);	}	@Override	public void supersetRotationYawHead(float rotation) {		super.setRotationYawHead(rotation);	}	@Override	public boolean isOnSameTeam(Entity entity) {		return master != null ? master.isOnSameTeam(entity) : super.isOnSameTeam(entity);	}	@Override	public boolean superisOnSameTeam(Object entity) {		return super.isOnSameTeam((Entity) entity);	}	@Override	public void sendEnterCombat() {		if (master != null) master.sendEnterCombat();		else super.sendEnterCombat();	}	@Override	public void supersendEnterCombat() {		super.sendEnterCombat();	}	@Override	public void sendEndCombat() {		if (master != null) master.sendEndCombat();		else super.sendEndCombat();	}	@Override	public void supersendEndCombat() {		super.sendEndCombat();	}	@Override	protected void markPotionsDirty() {		if (master != null) master.markPotionsDirty();		else super.markPotionsDirty();	}	@Override	public void supermarkPotionsDirty() {		super.markPotionsDirty();	}	@Override	public void curePotionEffects(ItemStack itemStack) {		if (master != null) master.curePotionEffects(itemStack);		else super.curePotionEffects(itemStack);	}	@Override	public void supercurePotionEffects(Object itemStack) {		super.curePotionEffects((ItemStack) itemStack);	}	@Override	public boolean shouldRiderFaceForward(EntityPlayer entityPlayer) {		return master != null ? master.shouldRiderFaceForward(entityPlayer) : super.shouldRiderFaceForward(entityPlayer);	}	@Override	public boolean supershouldRiderFaceForward(Object entityPlayer) {		return super.shouldRiderFaceForward((EntityPlayer) entityPlayer);	}	@Override	public int getEntityId() {		return master != null ? master.getEntityId() : super.getEntityId();	}	@Override	public int supergetEntityId() {		return super.getEntityId();	}	@Override	public void setEntityId(int id) {		if (master != null) master.setEntityId(id);		else super.setEntityId(id);	}	@Override	public void supersetEntityId(int id) {		super.setEntityId(id);	}	@Override	public EntityDataManager getDataManager() {		return (EntityDataManager) (master != null ? master.getDataManager() : super.getDataManager());	}	@Override	public Object supergetDataManager() {		return super.getDataManager();	}/*	@Override	public boolean equals(Object p_equals_1_) {		return master != null ? master.equals(p_equals_1_) : super.equals(p_equals_1_);	}	public boolean superequals(Object p_equals_1_) {		return super.equals(p_equals_1_);	}	@Override	public int hashCode() {		return master != null ? master.hashCode() : super.hashCode();	}	public int superhashCode() {		return super.hashCode();	}*/	@Override	protected void setRotation(float yaw, float pitch) {		if (master != null) master.setRotation(yaw, pitch);		else super.setRotation(yaw, pitch);	}	@Override	public void supersetRotation(float yaw, float pitch) {		super.setRotation(yaw, pitch);	}	@Override	public void setPosition(double x, double y, double z) {		if (master != null) master.setPosition(x, y, z);		else super.setPosition(x, y, z);	}	@Override	public void supersetPosition(double x, double y, double z) {		super.setPosition(x, y, z);	}	@Override	protected void setOnFireFromLava() {		if (master != null) master.setOnFireFromLava();		else super.setOnFireFromLava();	}	@Override	public void supersetOnFireFromLava() {		super.setOnFireFromLava();	}	@Override	public void setFire(int seconds) {		if (master != null) master.setFire(seconds);		else super.setFire(seconds);	}	@Override	public void supersetFire(int seconds) {		super.setFire(seconds);	}	@Override	public void extinguish() {		if (master != null) master.extinguish();		else super.extinguish();	}	@Override	public void superextinguish() {		super.extinguish();	}	@Override	public boolean isOffsetPositionInLiquid(double x, double y, double z) {		return master != null ? master.isOffsetPositionInLiquid(x, y, z) : super.isOffsetPositionInLiquid(x, y, z);	}	@Override	public boolean superisOffsetPositionInLiquid(double x, double y, double z) {		return super.isOffsetPositionInLiquid(x, y, z);	}	@Override	protected void doBlockCollisions() {		if (master != null) master.doBlockCollisions();		else super.doBlockCollisions();	}	@Override	public void superdoBlockCollisions() {		super.doBlockCollisions();	}	@Override	protected void playStepSound(BlockPos blockPos, Block block) {		if (master != null) master.playStepSound(blockPos, block);		else super.playStepSound(blockPos, block);	}	@Override	public void superplayStepSound(Object blockPos, Object block) {		super.playStepSound((BlockPos) blockPos, (Block) block);	}	@Override	public boolean isSilent() {		return master != null ? master.isSilent() : super.isSilent();	}	@Override	public boolean superisSilent() {		return super.isSilent();	}	@Override	public void setSilent(boolean isSilent) {		if (master != null) master.setSilent(isSilent);		else super.setSilent(isSilent);	}	@Override	public void supersetSilent(boolean isSilent) {		super.setSilent(isSilent);	}	@Override	public AxisAlignedBB getCollisionBoundingBox() {		return (AxisAlignedBB) (master != null ? master.getCollisionBoundingBox() : super.getCollisionBoundingBox());	}	@Override	public AxisAlignedBB supergetCollisionBoundingBox() {		return super.getCollisionBoundingBox();	}	@Override	protected void dealFireDamage(int amount) {		if (master != null) master.dealFireDamage(amount);		else super.dealFireDamage(amount);	}	@Override	public void superdealFireDamage(int amount) {		super.dealFireDamage(amount);	}	@Override	public boolean isWet() {		return master != null ? master.isWet() : super.isWet();	}	@Override	public boolean superisWet() {		return super.isWet();	}	@Override	public boolean isInWater() {		return master != null ? master.isInWater() : super.isInWater();	}	@Override	public boolean superisInWater() {		return super.isInWater();	}	@Override	public boolean handleWaterMovement() {		return master != null ? master.handleWaterMovement() : super.handleWaterMovement();	}	@Override	public boolean superhandleWaterMovement() {		return super.handleWaterMovement();	}	@Override	public void spawnRunningParticles() {		if (master != null) master.spawnRunningParticles();		else super.spawnRunningParticles();	}	@Override	public void superspawnRunningParticles() {		super.spawnRunningParticles();	}	@Override	protected void createRunningParticles() {		if (master != null) master.createRunningParticles();		else super.createRunningParticles();	}	@Override	public void supercreateRunningParticles() {		super.createRunningParticles();	}	@Override	public boolean isInsideOfMaterial(Material material) {		return master != null ? master.isInsideOfMaterial(material) : super.isInsideOfMaterial(material);	}	@Override	public boolean superisInsideOfMaterial(Object material) {		return super.isInsideOfMaterial((Material) material);	}	@Override	public boolean isInLava() {		return master != null ? master.isInLava() : super.isInLava();	}	@Override	public boolean superisInLava() {		return super.isInLava();	}	@Override	public void setWorld(World world) {		if (master != null) master.setWorld(world);		else super.setWorld(world);	}	@Override	public void supersetWorld(Object world) {		super.setWorld((World) world);	}	@Override	public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch) {		if (master != null) master.setPositionAndRotation(x, y, z, yaw, pitch);		else super.setPositionAndRotation(x, y, z, yaw, pitch);	}	@Override	public void supersetPositionAndRotation(double x, double y, double z, float yaw, float pitch) {		super.setPositionAndRotation(x, y, z, yaw, pitch);	}	@Override	public void moveToBlockPosAndAngles(BlockPos blockPos, float p_174828_2_, float p_174828_3_) {		if (master != null) master.moveToBlockPosAndAngles(blockPos, p_174828_2_, p_174828_3_);		else super.moveToBlockPosAndAngles(blockPos, p_174828_2_, p_174828_3_);	}	@Override	public void supermoveToBlockPosAndAngles(Object blockPos, float p_174828_2_, float p_174828_3_) {		super.moveToBlockPosAndAngles((BlockPos) blockPos, p_174828_2_, p_174828_3_);	}	@Override	public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch) {		if (master != null) master.setLocationAndAngles(x, y, z, yaw, pitch);		else super.setLocationAndAngles(x, y, z, yaw, pitch);	}	@Override	public void supersetLocationAndAngles(double x, double y, double z, float yaw, float pitch) {		super.setLocationAndAngles(x, y, z, yaw, pitch);	}	@Override	public float getDistanceToEntity(Entity entity) {		return master != null ? master.getDistanceToEntity(entity) : super.getDistanceToEntity(entity);	}	@Override	public float supergetDistanceToEntity(Object entity) {		return super.getDistanceToEntity((Entity) entity);	}	@Override	public double getDistanceSq(double x, double y, double z) {		return master != null ? master.getDistanceSq(x, y, z) : super.getDistanceSq(x, y, z);	}	@Override	public double supergetDistanceSq(double x, double y, double z) {		return super.getDistanceSq(x, y, z);	}	@Override	public double getDistanceSq(BlockPos blockPos) {		return master != null ? master.getDistanceSq(blockPos) : super.getDistanceSq(blockPos);	}	@Override	public double supergetDistanceSq(Object blockPos) {		return super.getDistanceSq((BlockPos) blockPos);	}	@Override	public double getDistanceSqToCenter(BlockPos blockPos) {		return master != null ? master.getDistanceSqToCenter(blockPos) : super.getDistanceSqToCenter(blockPos);	}	@Override	public double supergetDistanceSqToCenter(Object blockPos) {		return super.getDistanceSqToCenter((BlockPos) blockPos);	}	@Override	public double getDistance(double x, double y, double z) {		return master != null ? master.getDistance(x, y, z) : super.getDistance(x, y, z);	}	@Override	public double supergetDistance(double x, double y, double z) {		return super.getDistance(x, y, z);	}	@Override	public double getDistanceSqToEntity(Entity entity) {		return master != null ? master.getDistanceSqToEntity(entity) : super.getDistanceSqToEntity(entity);	}	@Override	public double supergetDistanceSqToEntity(Object entity) {		return super.getDistanceSqToEntity((Entity) entity);	}	@Override	public void onCollideWithPlayer(EntityPlayer entityPlayer) {		if (master != null) master.onCollideWithPlayer(entityPlayer);		else super.onCollideWithPlayer(entityPlayer);	}	@Override	public void superonCollideWithPlayer(Object entityPlayer) {		super.onCollideWithPlayer((EntityPlayer) entityPlayer);	}	@Override	public void applyEntityCollision(Entity entity) {		if (master != null) master.applyEntityCollision(entity);		else super.applyEntityCollision(entity);	}	@Override	public void superapplyEntityCollision(Object entity) {		super.applyEntityCollision((Entity) entity);	}	@Override	public void addVelocity(double x, double y, double z) {		if (master != null) master.addVelocity(x, y, z);		else super.addVelocity(x, y, z);	}	@Override	public void superaddVelocity(double x, double y, double z) {		super.addVelocity(x, y, z);	}	@Override	public Vec3d getPositionEyes(float p_174824_1_) {		return (Vec3d) (master != null ? master.getPositionEyes(p_174824_1_) : super.getPositionEyes(p_174824_1_));	}	@Override	public Object supergetPositionEyes(float p_174824_1_) {		return super.getPositionEyes(p_174824_1_);	}	@Override	public RayTraceResult rayTrace(double p_174822_1_, float p_174822_3_) {		return (RayTraceResult) (master != null ? master.rayTrace(p_174822_1_, p_174822_3_) : super.rayTrace(p_174822_1_, p_174822_3_));	}	@Override	public RayTraceResult superrayTrace(double p_174822_1_, float p_174822_3_) {		return super.rayTrace(p_174822_1_, p_174822_3_);	}	@Override	public boolean isInRangeToRender3d(double x, double y, double z) {		return master != null ? master.isInRangeToRender3d(x, y, z) : super.isInRangeToRender3d(x, y, z);	}	@Override	public boolean superisInRangeToRender3d(double x, double y, double z) {		return super.isInRangeToRender3d(x, y, z);	}	@Override	public boolean isInRangeToRenderDist(double distance) {		return master != null ? master.isInRangeToRenderDist(distance) : super.isInRangeToRenderDist(distance);	}	@Override	public boolean superisInRangeToRenderDist(double distance) {		return super.isInRangeToRenderDist(distance);	}	@Override	public boolean writeToNBTAtomically(NBTTagCompound nBTTagCompound) {		return master != null ? master.writeToNBTAtomically(nBTTagCompound) : super.writeToNBTAtomically(nBTTagCompound);	}	@Override	public boolean superwriteToNBTAtomically(Object nBTTagCompound) {		return super.writeToNBTAtomically((NBTTagCompound) nBTTagCompound);	}	@Override	public boolean writeToNBTOptional(NBTTagCompound nBTTagCompound) {		return master != null ? master.writeToNBTOptional(nBTTagCompound) : super.writeToNBTOptional(nBTTagCompound);	}	@Override	public boolean superwriteToNBTOptional(Object nBTTagCompound) {		return super.writeToNBTOptional((NBTTagCompound) nBTTagCompound);	}	@Override	public NBTTagCompound writeToNBT(NBTTagCompound nBTTagCompound) {		return (NBTTagCompound) (master != null ? master.writeToNBT(nBTTagCompound) : super.writeToNBT(nBTTagCompound));	}	@Override	public Object superwriteToNBT(Object nBTTagCompound) {		return super.writeToNBT((NBTTagCompound) nBTTagCompound);	}	@Override	public void readFromNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.readFromNBT(nBTTagCompound);		else super.readFromNBT(nBTTagCompound);	}	@Override	public void superreadFromNBT(Object nBTTagCompound) {		super.readFromNBT((NBTTagCompound) nBTTagCompound);	}	@Override	protected boolean shouldSetPosAfterLoading() {		return master != null ? master.shouldSetPosAfterLoading() : super.shouldSetPosAfterLoading();	}	@Override	public boolean supershouldSetPosAfterLoading() {		return super.shouldSetPosAfterLoading();	}	@Override	protected NBTTagList newDoubleNBTList(double... numbers) {		return (NBTTagList) (master != null ? master.newDoubleNBTList(numbers) : super.newDoubleNBTList(numbers));	}	@Override	public NBTTagList supernewDoubleNBTList(double... numbers) {		return super.newDoubleNBTList(numbers);	}	@Override	protected NBTTagList newFloatNBTList(float... numbers) {		return (NBTTagList) (master != null ? master.newFloatNBTList(numbers) : super.newFloatNBTList(numbers));	}	@Override	public NBTTagList supernewFloatNBTList(float... numbers) {		return super.newFloatNBTList(numbers);	}	@Override	public EntityItem dropItem(Item item, int size) {		return (EntityItem) (master != null ? master.dropItem(item, size) : super.dropItem(item, size));	}	@Override	public EntityItem superdropItem(Object item, int size) {		return super.dropItem((Item) item, size);	}	@Override	public EntityItem dropItemWithOffset(Item item, int size, float p_145778_3_) {		return (EntityItem) (master != null ? master.dropItemWithOffset(item, size, p_145778_3_) : super.dropItemWithOffset(item, size, p_145778_3_));	}	@Override	public EntityItem superdropItemWithOffset(Object item, int size, float p_145778_3_) {		return super.dropItemWithOffset((Item) item, size, p_145778_3_);	}	@Override	public EntityItem entityDropItem(ItemStack itemStack, float offsetY) {		return (EntityItem) (master != null ? master.entityDropItem(itemStack, offsetY) : super.entityDropItem(itemStack, offsetY));	}	@Override	public EntityItem superentityDropItem(Object itemStack, float offsetY) {		return super.entityDropItem((ItemStack) itemStack, offsetY);	}	@Override	public AxisAlignedBB getCollisionBox(Entity entity) {		return (AxisAlignedBB) (master != null ? master.getCollisionBox(entity) : super.getCollisionBox(entity));	}	@Override	public AxisAlignedBB supergetCollisionBox(Object entity) {		return super.getCollisionBox((Entity) entity);	}	@Override	public void updatePassenger(Entity entity) {		if (master != null) master.updatePassenger(entity);		else super.updatePassenger(entity);	}	@Override	public void superupdatePassenger(Object entity) {		super.updatePassenger((Entity) entity);	}	@Override	public float getCollisionBorderSize() {		return master != null ? master.getCollisionBorderSize() : super.getCollisionBorderSize();	}	@Override	public float supergetCollisionBorderSize() {		return super.getCollisionBorderSize();	}	@Override	public void setPortal(BlockPos blockPos) {		if (master != null) master.setPortal(blockPos);		else super.setPortal(blockPos);	}	@Override	public void supersetPortal(Object blockPos) {		super.setPortal((BlockPos) blockPos);	}	@Override	public void setVelocity(double x, double y, double z) {		if (master != null) master.setVelocity(x, y, z);		else super.setVelocity(x, y, z);	}	@Override	public void supersetVelocity(double x, double y, double z) {		super.setVelocity(x, y, z);	}	@Override	public boolean isBurning() {		return master != null ? master.isBurning() : super.isBurning();	}	@Override	public boolean superisBurning() {		return super.isBurning();	}	@Override	public boolean isRiding() {		return master != null ? master.isRiding() : super.isRiding();	}	@Override	public boolean superisRiding() {		return super.isRiding();	}	@Override	public void setSneaking(boolean sneaking) {		if (master != null) master.setSneaking(sneaking);		else super.setSneaking(sneaking);	}	@Override	public void supersetSneaking(boolean sneaking) {		super.setSneaking(sneaking);	}	@Override	public boolean isSprinting() {		return master != null ? master.isSprinting() : super.isSprinting();	}	@Override	public boolean superisSprinting() {		return super.isSprinting();	}	@Override	public boolean isInvisible() {		return master != null ? master.isInvisible() : super.isInvisible();	}	@Override	public boolean superisInvisible() {		return super.isInvisible();	}	@Override	public void setInvisible(boolean invisible) {		if (master != null) master.setInvisible(invisible);		else super.setInvisible(invisible);	}	@Override	public void supersetInvisible(boolean invisible) {		super.setInvisible(invisible);	}	@Override	protected boolean getFlag(int flag) {		return master != null ? master.getFlag(flag) : super.getFlag(flag);	}	@Override	public boolean supergetFlag(int flag) {		return super.getFlag(flag);	}	@Override	protected void setFlag(int flag, boolean set) {		if (master != null) master.setFlag(flag, set);		else super.setFlag(flag, set);	}	@Override	public void supersetFlag(int flag, boolean set) {		super.setFlag(flag, set);	}	@Override	public int getAir() {		return master != null ? master.getAir() : super.getAir();	}	@Override	public int supergetAir() {		return super.getAir();	}	@Override	public void setAir(int air) {		if (master != null) master.setAir(air);		else super.setAir(air);	}	@Override	public void supersetAir(int air) {		super.setAir(air);	}	@Override	public void onStruckByLightning(EntityLightningBolt entityLightningBolt) {		if (master != null) master.onStruckByLightning(entityLightningBolt);		else super.onStruckByLightning(entityLightningBolt);	}	@Override	public void superonStruckByLightning(Object entityLightningBolt) {		super.onStruckByLightning((EntityLightningBolt) entityLightningBolt);	}	@Override	public Entity[] getParts() {		return (Entity[]) (master != null ? master.getParts() : super.getParts());	}	@Override	public Entity[] supergetParts() {		return super.getParts();	}	@Override	public boolean isEntityEqual(Entity entity) {		return master != null ? master.isEntityEqual(entity) : super.isEntityEqual(entity);	}	@Override	public boolean superisEntityEqual(Object entity) {		return super.isEntityEqual((Entity) entity);	}	@Override	public boolean canBeAttackedWithItem() {		return master != null ? master.canBeAttackedWithItem() : super.canBeAttackedWithItem();	}	@Override	public boolean supercanBeAttackedWithItem() {		return super.canBeAttackedWithItem();	}	@Override	public boolean hitByEntity(Entity entity) {		return master != null ? master.hitByEntity(entity) : super.hitByEntity(entity);	}	@Override	public boolean superhitByEntity(Object entity) {		return super.hitByEntity((Entity) entity);	}	@Override	public String toString() {		return master != null ? master.toString() : super.toString();	}	@Override	public String supertoString() {		return super.toString();	}	@Override	public boolean isEntityInvulnerable(DamageSource damageSource) {		return master != null ? master.isEntityInvulnerable(damageSource) : super.isEntityInvulnerable(damageSource);	}	@Override	public boolean superisEntityInvulnerable(Object damageSource) {		return super.isEntityInvulnerable((DamageSource) damageSource);	}	@Override	public void copyLocationAndAnglesFrom(Entity entity) {		if (master != null) master.copyLocationAndAnglesFrom(entity);		else super.copyLocationAndAnglesFrom(entity);	}	@Override	public void supercopyLocationAndAnglesFrom(Object entity) {		super.copyLocationAndAnglesFrom((Entity) entity);	}	@Override	public Entity changeDimension(int dimensionId) {		return (Entity) (master != null ? master.changeDimension(dimensionId) : super.changeDimension(dimensionId));	}	@Override	public Object superchangeDimension(int dimensionId) {		return super.changeDimension(dimensionId);	}	@Override	public float getExplosionResistance(Explosion explosion, World world, BlockPos blockPos, IBlockState iBlockState) {		return master != null ? master.getExplosionResistance(explosion, world, blockPos, iBlockState) : super.getExplosionResistance(explosion, world, blockPos, iBlockState);	}	@Override	public float supergetExplosionResistance(Object explosion, Object world, Object blockPos, Object iBlockState) {		return super.getExplosionResistance((Explosion) explosion, (World) world, (BlockPos) blockPos, (IBlockState) iBlockState);	}	@Override	public boolean canExplosionDestroyBlock(Explosion explosion, World world, BlockPos blockPos, IBlockState iBlockState, float p_174816_5_) {		return master != null ? master.canExplosionDestroyBlock(explosion, world, blockPos, iBlockState, p_174816_5_) : super.canExplosionDestroyBlock(explosion, world, blockPos, iBlockState, p_174816_5_);	}	@Override	public boolean supercanExplosionDestroyBlock(Object explosion, Object world, Object blockPos, Object iBlockState, float p_174816_5_) {		return super.canExplosionDestroyBlock((Explosion) explosion, (World) world, (BlockPos) blockPos, (IBlockState) iBlockState, p_174816_5_);	}	@Override	public int getMaxFallHeight() {		return master != null ? master.getMaxFallHeight() : super.getMaxFallHeight();	}	@Override	public int supergetMaxFallHeight() {		return super.getMaxFallHeight();	}	@Override	public Vec3d getLastPortalVec() {		return (Vec3d) (master != null ? master.getLastPortalVec() : super.getLastPortalVec());	}	@Override	public boolean doesEntityNotTriggerPressurePlate() {		return master != null ? master.doesEntityNotTriggerPressurePlate() : super.doesEntityNotTriggerPressurePlate();	}	@Override	public boolean superdoesEntityNotTriggerPressurePlate() {		return super.doesEntityNotTriggerPressurePlate();	}	@Override	public void addEntityCrashInfo(CrashReportCategory crashReportCategory) {		if (master != null) master.addEntityCrashInfo(crashReportCategory);		else super.addEntityCrashInfo(crashReportCategory);	}	@Override	public void superaddEntityCrashInfo(Object crashReportCategory) {		super.addEntityCrashInfo((CrashReportCategory) crashReportCategory);	}	@Override	public boolean canRenderOnFire() {		return master != null ? master.canRenderOnFire() : super.canRenderOnFire();	}	@Override	public boolean supercanRenderOnFire() {		return super.canRenderOnFire();	}	@Override	public UUID getUniqueID() {		return master != null ? master.getUniqueID() : super.getUniqueID();	}	@Override	public UUID supergetUniqueID() {		return super.getUniqueID();	}	@Override	public void setCustomNameTag(String p_96094_1_) {		if (master != null) master.setCustomNameTag(p_96094_1_);		else super.setCustomNameTag(p_96094_1_);	}	@Override	public void supersetCustomNameTag(String p_96094_1_) {		super.setCustomNameTag(p_96094_1_);	}	@Override	public String getCustomNameTag() {		return master != null ? master.getCustomNameTag() : super.getCustomNameTag();	}	@Override	public String supergetCustomNameTag() {		return super.getCustomNameTag();	}	@Override	public boolean hasCustomName() {		return master != null ? master.hasCustomName() : super.hasCustomName();	}	@Override	public boolean superhasCustomName() {		return super.hasCustomName();	}	@Override	public void setAlwaysRenderNameTag(boolean p_174805_1_) {		if (master != null) master.setAlwaysRenderNameTag(p_174805_1_);		else super.setAlwaysRenderNameTag(p_174805_1_);	}	@Override	public void supersetAlwaysRenderNameTag(boolean p_174805_1_) {		super.setAlwaysRenderNameTag(p_174805_1_);	}	@Override	public boolean getAlwaysRenderNameTag() {		return master != null ? master.getAlwaysRenderNameTag() : super.getAlwaysRenderNameTag();	}	@Override	public boolean supergetAlwaysRenderNameTag() {		return super.getAlwaysRenderNameTag();	}	@Override	public void setPositionAndUpdate(double x, double y, double z) {		if (master != null) master.setPositionAndUpdate(x, y, z);		else super.setPositionAndUpdate(x, y, z);	}	@Override	public void supersetPositionAndUpdate(double x, double y, double z) {		super.setPositionAndUpdate(x, y, z);	}	@Override	public EnumFacing getHorizontalFacing() {		return (EnumFacing) (master != null ? master.getHorizontalFacing() : super.getHorizontalFacing());	}	@Override	public EnumFacing supergetHorizontalFacing() {		return super.getHorizontalFacing();	}	@Override	protected HoverEvent getHoverEvent() {		return (HoverEvent) (master != null ? master.getHoverEvent() : super.getHoverEvent());	}	@Override	public HoverEvent supergetHoverEvent() {		return super.getHoverEvent();	}	@Override	public boolean isSpectatedByPlayer(EntityPlayerMP entityPlayerMP) {		return master != null ? master.isSpectatedByPlayer(entityPlayerMP) : super.isSpectatedByPlayer(entityPlayerMP);	}	@Override	public boolean superisSpectatedByPlayer(Object entityPlayerMP) {		return super.isSpectatedByPlayer((EntityPlayerMP) entityPlayerMP);	}	@Override	public AxisAlignedBB getEntityBoundingBox() {		return (AxisAlignedBB) (master != null ? master.getEntityBoundingBox() : super.getEntityBoundingBox());	}	@Override	public AxisAlignedBB supergetEntityBoundingBox() {		return super.getEntityBoundingBox();	}	@Override	public void setEntityBoundingBox(AxisAlignedBB axisAlignedBB) {		if (master != null) master.setEntityBoundingBox(axisAlignedBB);		else super.setEntityBoundingBox(axisAlignedBB);	}	@Override	public void supersetEntityBoundingBox(Object axisAlignedBB) {		super.setEntityBoundingBox((AxisAlignedBB) axisAlignedBB);	}	@Override	public boolean isOutsideBorder() {		return master != null ? master.isOutsideBorder() : super.isOutsideBorder();	}	@Override	public boolean superisOutsideBorder() {		return super.isOutsideBorder();	}	@Override	public void setOutsideBorder(boolean p_174821_1_) {		if (master != null) master.setOutsideBorder(p_174821_1_);		else super.setOutsideBorder(p_174821_1_);	}	@Override	public void supersetOutsideBorder(boolean p_174821_1_) {		super.setOutsideBorder(p_174821_1_);	}	@Override	public Vec3d getPositionVector() {		return (Vec3d) (master != null ? master.getPositionVector() : super.getPositionVector());	}	@Override	public Vec3d supergetPositionVector() {		return super.getPositionVector();	}	@Override	public World getEntityWorld() {		return (World) (master != null ? master.getEntityWorld() : super.getEntityWorld());	}	@Override	public World supergetEntityWorld() {		return super.getEntityWorld();	}	@Override	public Entity getCommandSenderEntity() {		return (Entity) (master != null ? master.getCommandSenderEntity() : super.getCommandSenderEntity());	}	@Override	public Entity supergetCommandSenderEntity() {		return super.getCommandSenderEntity();	}	@Override	public void setCommandStat(Type type, int amount) {		if (master != null) master.setCommandStat(type, amount);		else super.setCommandStat(type, amount);	}	@Override	public void supersetCommandStat(Object type, int amount) {		super.setCommandStat((Type) type, amount);	}	@Override	public CommandResultStats getCommandStats() {		return (CommandResultStats) (master != null ? master.getCommandStats() : super.getCommandStats());	}	@Override	public CommandResultStats supergetCommandStats() {		return super.getCommandStats();	}	@Override	public void setCommandStats(Entity entity) {		if (master != null) master.setCommandStats(entity);		else super.setCommandStats(entity);	}	@Override	public void supersetCommandStats(Object entity) {		super.setCommandStats((Entity) entity);	}	@Override	public boolean isImmuneToExplosions() {		return master != null ? master.isImmuneToExplosions() : super.isImmuneToExplosions();	}	@Override	public boolean superisImmuneToExplosions() {		return super.isImmuneToExplosions();	}	@Override	protected void applyEnchantments(EntityLivingBase entityLivingBase, Entity entity) {		if (master != null) master.applyEnchantments(entityLivingBase, entity);		else super.applyEnchantments(entityLivingBase, entity);	}	@Override	public void superapplyEnchantments(Object entityLivingBase, Object entity) {		super.applyEnchantments((EntityLivingBase) entityLivingBase, (Entity) entity);	}	@Override	public NBTTagCompound getEntityData() {		return (NBTTagCompound) (master != null ? master.getEntityData() : super.getEntityData());	}	@Override	public NBTTagCompound supergetEntityData() {		return super.getEntityData();	}	@Override	public boolean shouldRiderSit() {		return master != null ? master.shouldRiderSit() : super.shouldRiderSit();	}	@Override	public boolean supershouldRiderSit() {		return super.shouldRiderSit();	}	@Override	public ItemStack getPickedResult(RayTraceResult movingObjectPosition) {		return (ItemStack) (master != null ? master.getPickedResult(movingObjectPosition) : super.getPickedResult(movingObjectPosition));	}	@Override	public ItemStack supergetPickedResult(Object movingObjectPosition) {		return super.getPickedResult((RayTraceResult) movingObjectPosition);	}	@Override	public UUID getPersistentID() {		return master != null ? master.getPersistentID() : super.getPersistentID();	}	@Override	public UUID supergetPersistentID() {		return super.getPersistentID();	}	@Override	public boolean shouldRenderInPass(int pass) {		return master != null ? master.shouldRenderInPass(pass) : super.shouldRenderInPass(pass);	}	@Override	public boolean supershouldRenderInPass(int pass) {		return super.shouldRenderInPass(pass);	}	@Override	public boolean isCreatureType(EnumCreatureType enumCreatureType, boolean forSpawnCount) {		return master != null ? master.isCreatureType(enumCreatureType, forSpawnCount) : super.isCreatureType(enumCreatureType, forSpawnCount);	}	@Override	public boolean superisCreatureType(Object enumCreatureType, boolean forSpawnCount) {		return super.isCreatureType((EnumCreatureType) enumCreatureType, forSpawnCount);	}	@Override	public boolean canRiderInteract() {		return master != null ? master.canRiderInteract() : super.canRiderInteract();	}	@Override	public boolean supercanRiderInteract() {		return super.canRiderInteract();	}	@Override	public boolean shouldDismountInWater(Entity entity) {		return master != null ? master.shouldDismountInWater(entity) : super.shouldDismountInWater(entity);	}	@Override	public boolean supershouldDismountInWater(Object entity) {		return super.shouldDismountInWater((Entity) entity);	}	// 190~	@Override	public boolean startRiding(Entity entity, boolean force) {		return master != null ? master.startRiding(entity, force) : super.startRiding(entity, force);	}	@Override	public boolean superstartRiding(Object entity, boolean force) {		return super.startRiding((Entity) entity, force);	}	@Override	public void dismountRidingEntity() {		if (master != null) master.dismountRidingEntity();		else super.dismountRidingEntity();	}	@Override	public void superdismountRidingEntity() {		super.dismountRidingEntity();	}	@Override	public void setServerBrand(String brand) {		if (master != null) master.setServerBrand(brand);		else super.setServerBrand(brand);	}	@Override	public void supersetServerBrand(String brand) {		super.setServerBrand(brand);	}	@Override	public String getServerBrand() {		return master != null ? master.getServerBrand() : super.getServerBrand();	}	@Override	public String supergetServerBrand() {		return super.getServerBrand();	}	@Override	public int getPermissionLevel() {		return master != null ? master.getPermissionLevel() : super.getPermissionLevel();	}	@Override	public int supergetPermissionLevel() {		return super.getPermissionLevel();	}	@Override	public void setPermissionLevel(int p_184839_1_) {		if (master != null) master.setPermissionLevel(p_184839_1_);		else super.setPermissionLevel(p_184839_1_);	}	@Override	public void supersetPermissionLevel(int p_184839_1_) {		super.setPermissionLevel(p_184839_1_);	}	@Override	public void setActiveHand(EnumHand enumHand) {		if (master != null) master.setActiveHand(enumHand);		else super.setActiveHand(enumHand);	}	@Override	public void supersetActiveHand(Object enumHand) {		super.setActiveHand((EnumHand) enumHand);	}	@Override	public void resetActiveHand() {		if (master != null) master.resetActiveHand();		else super.resetActiveHand();	}	@Override	public void superresetActiveHand() {		super.resetActiveHand();	}	@Override	public EnumHand getActiveHand() {		return (EnumHand) (master != null ? master.getActiveHand() : super.getActiveHand());	}	@Override	public EnumHand supergetActiveHand() {		return super.getActiveHand();	}	@Override	public void notifyDataManagerChange(DataParameter<?> dataParameter) {		if (master != null) master.notifyDataManagerChange(dataParameter);		else super.notifyDataManagerChange(dataParameter);	}	@Override	public void supernotifyDataManagerChange(Object dataParameter) {		super.notifyDataManagerChange((DataParameter) dataParameter);	}	@Override	public void displayGuiCommandBlock(TileEntityCommandBlock tileEntityCommandBlock) {		if (master != null) master.displayGuiCommandBlock(tileEntityCommandBlock);		else super.displayGuiCommandBlock(tileEntityCommandBlock);	}	@Override	public void superdisplayGuiCommandBlock(Object tileEntityCommandBlock) {		super.displayGuiCommandBlock((TileEntityCommandBlock) tileEntityCommandBlock);	}	@Override	public boolean isRowingBoat() {		return master != null ? master.isRowingBoat() : super.isRowingBoat();	}	@Override	public boolean superisRowingBoat() {		return super.isRowingBoat();	}	@Override	public PotionEffect removeActivePotionEffect(Potion potion) {		return (PotionEffect) (master != null ? master.removeActivePotionEffect(potion) : super.removeActivePotionEffect(potion));	}	@Override	public PotionEffect superremoveActivePotionEffect(Object potion) {		return super.removeActivePotionEffect((Potion) potion);	}	@Override	public boolean isCreative() {		return master != null ? master.isCreative() : super.isCreative();	}	@Override	public boolean superisCreative() {		return super.isCreative();	}	@Override	public boolean isPlayerInfoSet() {		return master != null ? master.isPlayerInfoSet() : super.isPlayerInfoSet();	}	@Override	public boolean superisPlayerInfoSet() {		return super.isPlayerInfoSet();	}	@Override	public ResourceLocation getLocationElytra() {		return (ResourceLocation) (master != null ? master.getLocationElytra() : super.getLocationElytra());	}	@Override	public ResourceLocation supergetLocationElytra() {		return super.getLocationElytra();	}	@Override	protected CooldownTracker createCooldownTracker() {		return (CooldownTracker) (master != null ? master.createCooldownTracker() : super.createCooldownTracker());	}	@Override	public CooldownTracker supercreateCooldownTracker() {		return super.createCooldownTracker();	}	@Override	protected void updateSize() {		if (master != null) master.updateSize();		else super.updateSize();	}	@Override	public void superupdateSize() {		super.updateSize();	}	@Override	public SoundCategory getSoundCategory() {		return (SoundCategory) (master != null ? master.getSoundCategory() : super.getSoundCategory());	}	@Override	public SoundCategory supergetSoundCategory() {		return super.getSoundCategory();	}	@Override	protected void damageShield(float p_184590_1_) {		if (master != null) master.damageShield(p_184590_1_);		else super.damageShield(p_184590_1_);	}	@Override	public void superdamageShield(float p_184590_1_) {		super.damageShield(p_184590_1_);	}	@Override	public void spawnSweepParticles() {		if (master != null) master.spawnSweepParticles();		else super.spawnSweepParticles();	}	@Override	public void superspawnSweepParticles() {		super.spawnSweepParticles();	}	@Override	public Iterable<ItemStack> getHeldEquipment() {		return (Iterable<ItemStack>) (master != null ? master.getHeldEquipment() : super.getHeldEquipment());	}	@Override	public Iterable<ItemStack> supergetHeldEquipment() {		return super.getHeldEquipment();	}	@Override	public Iterable<ItemStack> getArmorInventoryList() {		return (Iterable<ItemStack>) (master != null ? master.getArmorInventoryList() : super.getArmorInventoryList());	}	@Override	public Iterable<ItemStack> supergetArmorInventoryList() {		return super.getArmorInventoryList();	}	@Override	public EnumHandSide getPrimaryHand() {		return (EnumHandSide) (master != null ? master.getPrimaryHand() : super.getPrimaryHand());	}	@Override	public EnumHandSide supergetPrimaryHand() {		return super.getPrimaryHand();	}	@Override	public void setPrimaryHand(EnumHandSide enumHandSide) {		if (master != null) master.setPrimaryHand(enumHandSide);		else super.setPrimaryHand(enumHandSide);	}	@Override	public void supersetPrimaryHand(Object enumHandSide) {		super.setPrimaryHand((EnumHandSide) enumHandSide);	}	@Override	public float getCooldownPeriod() {		return master != null ? master.getCooldownPeriod() : super.getCooldownPeriod();	}	@Override	public float supergetCooldownPeriod() {		return super.getCooldownPeriod();	}	@Override	public float getCooledAttackStrength(float adjustTicks) {		return master != null ? master.getCooledAttackStrength(adjustTicks) : super.getCooledAttackStrength(adjustTicks);	}	@Override	public float supergetCooledAttackStrength(float adjustTicks) {		return super.getCooledAttackStrength(adjustTicks);	}	@Override	public void resetCooldown() {		if (master != null) master.resetCooldown();		else super.resetCooldown();	}	@Override	public void superresetCooldown() {		super.resetCooldown();	}	@Override	public CooldownTracker getCooldownTracker() {		return (CooldownTracker) (master != null ? master.getCooldownTracker() : super.getCooldownTracker());	}	@Override	public CooldownTracker supergetCooldownTracker() {		return super.getCooldownTracker();	}	@Override	public float getLuck() {		return master != null ? master.getLuck() : super.getLuck();	}	@Override	public float supergetLuck() {		return super.getLuck();	}	@Override	public void addPrefix(ITextComponent iTextComponent) {		if (master != null) master.addPrefix(iTextComponent);		else super.addPrefix(iTextComponent);	}	@Override	public void superaddPrefix(Object iTextComponent) {		super.addPrefix((ITextComponent) iTextComponent);	}	@Override	public void addSuffix(ITextComponent iTextComponent) {		if (master != null) master.addSuffix(iTextComponent);		else super.addSuffix(iTextComponent);	}	@Override	public void superaddSuffix(Object iTextComponent) {		super.addSuffix((ITextComponent) iTextComponent);	}	@Override	public Collection<ITextComponent> getPrefixes() {		return master != null ? master.getPrefixes() : super.getPrefixes();	}	@Override	public Collection supergetPrefixes() {		return super.getPrefixes();	}	@Override	public Collection<ITextComponent> getSuffixes() {		return master != null ? master.getSuffixes() : super.getSuffixes();	}	@Override	public Collection<ITextComponent> supergetSuffixes() {		return super.getSuffixes();	}	@Override	protected void frostWalk(BlockPos blockPos) {		if (master != null) master.frostWalk(blockPos);		else super.frostWalk(blockPos);	}	@Override	public void superfrostWalk(Object blockPos) {		super.frostWalk((BlockPos) blockPos);	}	@Override	protected void playEquipSound(ItemStack itemStack) {		if (master != null) master.playEquipSound(itemStack);		else super.playEquipSound(itemStack);	}	@Override	public void superplayEquipSound(Object itemStack) {		super.playEquipSound((ItemStack) itemStack);	}	@Override	public void removePotionEffect(Potion potion) {		if (master != null) master.removePotionEffect(potion);		else super.removePotionEffect(potion);	}	@Override	public void superremovePotionEffect(Object potion) {		super.removePotionEffect((Potion) potion);	}	@Override	protected void playHurtSound(DamageSource damageSource) {		if (master != null) master.playHurtSound(damageSource);		else super.playHurtSound(damageSource);	}	@Override	public void superplayHurtSound(Object damageSource) {		super.playHurtSound((DamageSource) damageSource);	}	@Override	public ItemStack getHeldItemOffhand() {		return (ItemStack) (master != null ? master.getHeldItemOffhand() : super.getHeldItemOffhand());	}	@Override	public ItemStack supergetHeldItemOffhand() {		return super.getHeldItemOffhand();	}	@Override	public ItemStack getHeldItem(EnumHand enumHand) {		return (ItemStack) (master != null ? master.getHeldItem(enumHand) : super.getHeldItem(enumHand));	}	@Override	public ItemStack supergetHeldItem(Object enumHand) {		return super.getHeldItem((EnumHand) enumHand);	}	@Override	public void setHeldItem(EnumHand enumHand, ItemStack itemStack) {		if (master != null) master.setHeldItem(enumHand, itemStack);		else super.setHeldItem(enumHand, itemStack);	}	@Override	public void supersetHeldItem(Object enumHand, Object itemStack) {		super.setHeldItem((EnumHand) enumHand, (ItemStack) itemStack);	}	@Override	public void setRenderYawOffset(float offset) {		if (master != null) master.setRenderYawOffset(offset);		else super.setRenderYawOffset(offset);	}	@Override	public void supersetRenderYawOffset(float offset) {		super.setRenderYawOffset(offset);	}	@Override	protected void updateActiveHand() {		if (master != null) master.updateActiveHand();		else super.updateActiveHand();	}	@Override	public void superupdateActiveHand() {		super.updateActiveHand();	}	@Override	public ItemStack getActiveItemStack() {		return (ItemStack) (master != null ? master.getActiveItemStack() : super.getActiveItemStack());	}	@Override	public ItemStack supergetActiveItemStack() {		return super.getActiveItemStack();	}	@Override	public int getItemInUseMaxCount() {		return master != null ? master.getItemInUseMaxCount() : super.getItemInUseMaxCount();	}	@Override	public int supergetItemInUseMaxCount() {		return super.getItemInUseMaxCount();	}	@Override	public void stopActiveHand() {		if (master != null) master.stopActiveHand();		else super.stopActiveHand();	}	@Override	public void superstopActiveHand() {		super.stopActiveHand();	}	@Override	public boolean isActiveItemStackBlocking() {		return master != null ? master.isActiveItemStackBlocking() : super.isActiveItemStackBlocking();	}	@Override	public boolean superisActiveItemStackBlocking() {		return super.isActiveItemStackBlocking();	}	@Override	public boolean isElytraFlying() {		return master != null ? master.isElytraFlying() : super.isElytraFlying();	}	@Override	public boolean superisElytraFlying() {		return super.isElytraFlying();	}	@Override	public int getTicksElytraFlying() {		return master != null ? master.getTicksElytraFlying() : super.getTicksElytraFlying();	}	@Override	public int supergetTicksElytraFlying() {		return super.getTicksElytraFlying();	}	@Override	public boolean attemptTeleport(double x, double y, double z) {		return master != null ? master.attemptTeleport(x, y, z) : super.attemptTeleport(x, y, z);	}	@Override	public boolean superattemptTeleport(double x, double y, double z) {		return super.attemptTeleport(x, y, z);	}	@Override	public boolean canBeHitWithPotion() {		return master != null ? master.canBeHitWithPotion() : super.canBeHitWithPotion();	}	@Override	public boolean supercanBeHitWithPotion() {		return super.canBeHitWithPotion();	}	@Override	public Set<String> getTags() {		return (Set<String>) (master != null ? master.getTags() : super.getTags());	}	@Override	public Set<String> supergetTags() {		return super.getTags();	}	@Override	public boolean addTag(String tag) {		return master != null ? master.addTag(tag) : super.addTag(tag);	}	@Override	public boolean superaddTag(String tag) {		return super.addTag(tag);	}	@Override	public boolean removeTag(String tag) {		return master != null ? master.removeTag(tag) : super.removeTag(tag);	}	@Override	public boolean superremoveTag(String tag) {		return super.removeTag(tag);	}	@Override	public boolean equals(Object p_equals_1_) {		return master != null ? master.equals(p_equals_1_) : super.equals(p_equals_1_);	}	@Override	public boolean superequals(Object p_equals_1_) {		return super.equals(p_equals_1_);	}	@Override	public int hashCode() {		return master != null ? master.hashCode() : super.hashCode();	}	@Override	public int superhashCode() {		return super.hashCode();	}	@Override	public void setDropItemsWhenDead(boolean p_184174_1_) {		if (master != null) master.setDropItemsWhenDead(p_184174_1_);		else super.setDropItemsWhenDead(p_184174_1_);	}	@Override	public void supersetDropItemsWhenDead(boolean p_184174_1_) {		super.setDropItemsWhenDead(p_184174_1_);	}	@Override	protected void decrementTimeUntilPortal() {		if (master != null) master.decrementTimeUntilPortal();		else super.decrementTimeUntilPortal();	}	@Override	public void superdecrementTimeUntilPortal() {		super.decrementTimeUntilPortal();	}	@Override	public void resetPositionToBB() {		if (master != null) master.resetPositionToBB();		else super.resetPositionToBB();	}	@Override	public void superresetPositionToBB() {		super.resetPositionToBB();	}	@Override	public void applyOrientationToEntity(Entity entity) {		if (master != null) master.applyOrientationToEntity(entity);		else super.applyOrientationToEntity(entity);	}	@Override	public void superapplyOrientationToEntity(Object entity) {		super.applyOrientationToEntity((Entity) entity);	}	@Override	protected boolean canBeRidden(Entity entity) {		return master != null ? master.canBeRidden(entity) : super.canBeRidden(entity);	}	@Override	public boolean supercanBeRidden(Object entity) {		return super.canBeRidden((Entity) entity);	}	@Override	public void removePassengers() {		if (master != null) master.removePassengers();		else super.removePassengers();	}	@Override	public void superremovePassengers() {		super.removePassengers();	}	@Override	protected void addPassenger(Entity entity) {		if (master != null) master.addPassenger(entity);		else super.addPassenger(entity);	}	@Override	public void superaddPassenger(Object entity) {		super.addPassenger((Entity) entity);	}	@Override	protected void removePassenger(Entity entity) {		if (master != null) master.removePassenger(entity);		else super.removePassenger(entity);	}	@Override	public void superremovePassenger(Object entity) {		super.removePassenger((Entity) entity);	}	@Override	protected boolean canFitPassenger(Entity entity) {		return master != null ? master.canFitPassenger(entity) : super.canFitPassenger(entity);	}	@Override	public boolean supercanFitPassenger(Object entity) {		return super.canFitPassenger((Entity) entity);	}	@Override	public Iterable<ItemStack> getEquipmentAndArmor() {		return (Iterable<ItemStack>) (master != null ? master.getEquipmentAndArmor() : super.getEquipmentAndArmor());	}	@Override	public Iterable<ItemStack> supergetEquipmentAndArmor() {		return super.getEquipmentAndArmor();	}	@Override	public boolean isBeingRidden() {		return master != null ? master.isBeingRidden() : super.isBeingRidden();	}	@Override	public boolean superisBeingRidden() {		return super.isBeingRidden();	}	@Override	public boolean isGlowing() {		return master != null ? master.isGlowing() : super.isGlowing();	}	@Override	public boolean superisGlowing() {		return super.isGlowing();	}	@Override	public void setGlowing(boolean p_184195_1_) {		if (master != null) master.setGlowing(p_184195_1_);		else super.setGlowing(p_184195_1_);	}	@Override	public void supersetGlowing(boolean p_184195_1_) {		super.setGlowing(p_184195_1_);	}	@Override	public boolean isOnScoreboardTeam(Team team) {		return master != null ? master.isOnScoreboardTeam(team) : super.isOnScoreboardTeam(team);	}	@Override	public boolean superisOnScoreboardTeam(Object team) {		return super.isOnScoreboardTeam((Team) team);	}	@Override	public void setEntityInvulnerable(boolean isInvulnerable) {		if (master != null) master.setEntityInvulnerable(isInvulnerable);		else super.setEntityInvulnerable(isInvulnerable);	}	@Override	public void supersetEntityInvulnerable(boolean isInvulnerable) {		super.setEntityInvulnerable(isInvulnerable);	}	@Override	public boolean isNonBoss() {		return master != null ? master.isNonBoss() : super.isNonBoss();	}	@Override	public boolean superisNonBoss() {		return super.isNonBoss();	}	@Override	public EnumFacing getTeleportDirection() {		return (EnumFacing) (master != null ? master.getLastPortalVec() : super.getTeleportDirection());	}	@Override	public EnumFacing supergetLastPortalVec() {		return super.getTeleportDirection();	}	@Override	public void setUniqueId(UUID uniqueIdIn) {		if (master != null) master.setUniqueId(uniqueIdIn);		else super.setUniqueId(uniqueIdIn);	}	@Override	public void supersetUniqueId(UUID uniqueIdIn) {		super.setUniqueId(uniqueIdIn);	}	@Override	public EnumFacing getAdjustedHorizontalFacing() {		return (EnumFacing) (master != null ? master.getAdjustedHorizontalFacing() : super.getAdjustedHorizontalFacing());	}	@Override	public EnumFacing supergetAdjustedHorizontalFacing() {		return super.getAdjustedHorizontalFacing();	}	@Override	public AxisAlignedBB getRenderBoundingBox() {		return (AxisAlignedBB) (master != null ? master.getRenderBoundingBox() : super.getRenderBoundingBox());	}	@Override	public AxisAlignedBB supergetRenderBoundingBox() {		return super.getRenderBoundingBox();	}	@Override	public MinecraftServer getServer() {		return (MinecraftServer) (master != null ? master.getServer() : super.getServer());	}	@Override	public MinecraftServer supergetServer() {		return super.getServer();	}	@Override	public boolean hasCapability(Capability<?> capability, EnumFacing enumFacing) {		return master != null ? master.hasCapability(capability, enumFacing) : super.hasCapability(capability, enumFacing);	}	@Override	public boolean superhasCapability(Object capability, Object enumFacing) {		return super.hasCapability((Capability) capability, (EnumFacing) enumFacing);	}	@Override	public <T> T getCapability(Capability<T> capability, EnumFacing enumFacing) {		return (T) (master != null ? master.getCapability(capability, enumFacing) : super.getCapability(capability, enumFacing));	}	@Override	public Object supergetCapability(Object capability, Object enumFacing) {		return super.getCapability((Capability) capability, (EnumFacing) enumFacing);	}	@Override	public void deserializeNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.deserializeNBT(nBTTagCompound);		else super.deserializeNBT(nBTTagCompound);	}	@Override	public void superdeserializeNBT(Object nBTTagCompound) {		super.deserializeNBT((NBTTagCompound) nBTTagCompound);	}	@Override	public NBTTagCompound serializeNBT() {		return (NBTTagCompound) (master != null ? master.serializeNBT() : super.serializeNBT());	}	@Override	public NBTTagCompound superserializeNBT() {		return super.serializeNBT();	}	@Override	public void addTrackingPlayer(EntityPlayerMP entityPlayerMP) {		if (master != null) master.addTrackingPlayer(entityPlayerMP);		else super.addTrackingPlayer(entityPlayerMP);	}	@Override	public void superaddTrackingPlayer(Object entityPlayerMP) {		super.addTrackingPlayer((EntityPlayerMP) entityPlayerMP);	}	@Override	public void removeTrackingPlayer(EntityPlayerMP entityPlayerMP) {		if (master != null) master.removeTrackingPlayer(entityPlayerMP);		else super.removeTrackingPlayer(entityPlayerMP);	}	@Override	public void superremoveTrackingPlayer(Object entityPlayerMP) {		super.removeTrackingPlayer((EntityPlayerMP) entityPlayerMP);	}	@Override	public float getRotatedYaw(Rotation rotation) {		return master != null ? master.getRotatedYaw(rotation) : super.getRotatedYaw(rotation);	}	@Override	public float supergetRotatedYaw(Object rotation) {		return super.getRotatedYaw((Rotation) rotation);	}	@Override	public float getMirroredYaw(Mirror mirror) {		return master != null ? master.getMirroredYaw(mirror) : super.getMirroredYaw(mirror);	}	@Override	public float supergetMirroredYaw(Object mirror) {		return super.getMirroredYaw((Mirror) mirror);	}	@Override	public boolean ignoreItemEntityData() {		return master != null ? master.ignoreItemEntityData() : super.ignoreItemEntityData();	}	@Override	public boolean superignoreItemEntityData() {		return super.ignoreItemEntityData();	}	@Override	public boolean setPositionNonDirty() {		return master != null ? master.setPositionNonDirty() : super.setPositionNonDirty();	}	@Override	public boolean supersetPositionNonDirty() {		return super.setPositionNonDirty();	}	@Override	public Entity getControllingPassenger() {		return (Entity) (master != null ? master.getControllingPassenger() : super.getControllingPassenger());	}	@Override	public Entity supergetControllingPassenger() {		return super.getControllingPassenger();	}	@Override	public List<Entity> getPassengers() {		return (List<Entity>) (master != null ? master.getPassengers() : super.getPassengers());	}	@Override	public List<Entity> supergetPassengers() {		return super.getPassengers();	}	@Override	public boolean isPassenger(Entity entity) {		return master != null ? master.isPassenger(entity) : super.isPassenger(entity);	}	@Override	public boolean superisPassenger(Object entity) {		return super.isPassenger((Entity) entity);	}	@Override	public Collection<Entity> getRecursivePassengers() {		return (Collection<Entity>) (master != null ? master.getRecursivePassengers() : super.getRecursivePassengers());	}	@Override	public Collection<Entity> supergetRecursivePassengers() {		return super.getRecursivePassengers();	}	@Override	public <T extends Entity> Collection<T> getRecursivePassengersByType(Class<T> entityClass) {		return (Collection) (master != null ? master.getRecursivePassengersByType(entityClass) : super.getRecursivePassengersByType(entityClass));	}	@Override	public Object supergetRecursivePassengersByType(Class entityClass) {		return super.getRecursivePassengersByType(entityClass);	}	@Override	public Entity getLowestRidingEntity() {		return (Entity) (master != null ? master.getLowestRidingEntity() : super.getLowestRidingEntity());	}	@Override	public Entity supergetLowestRidingEntity() {		return super.getLowestRidingEntity();	}	@Override	public boolean isRidingSameEntity(Entity entity) {		return master != null ? master.isRidingSameEntity(entity) : super.isRidingSameEntity(entity);	}	@Override	public boolean superisRidingSameEntity(Object entity) {		return super.isRidingSameEntity((Entity) entity);	}	@Override	public boolean isRidingOrBeingRiddenBy(Entity entity) {		return master != null ? master.isRidingOrBeingRiddenBy(entity) : super.isRidingOrBeingRiddenBy(entity);	}	@Override	public boolean superisRidingOrBeingRiddenBy(Object entity) {		return super.isRidingOrBeingRiddenBy((Entity) entity);	}	@Override	public boolean canPassengerSteer() {		return master != null ? master.canPassengerSteer() : super.canPassengerSteer();	}	@Override	public boolean supercanPassengerSteer() {		return super.canPassengerSteer();	}	@Override	public Entity getRidingEntity() {		return (Entity) (master != null ? master.getRidingEntity() : super.getRidingEntity());	}	@Override	public Entity supergetRidingEntity() {		return super.getRidingEntity();	}	@Override	public EnumPushReaction getPushReaction() {		return (EnumPushReaction) (master != null ? master.getPushReaction() : super.getPushReaction());	}	@Override	public EnumPushReaction supergetPushReaction() {		return super.getPushReaction();	}	// TODO	@Override	public void superfunc_92015_f() {	}	@Override	public void superincrementStat(Object statBase, int par2) {	}	@Override	public void superfunc_110322_i() {	}	@Override	public void superfunc_142020_c(String par1Str) {	}	@Override	public String supergetClientBrand() {		return null;	}	@Override	public float supergetFOVMultiplier() {		return 0.0F;	}	@Override	public void superdisplayGUIEditSign(Object tileEntity) {	}	@Override	public void superdisplayGUIHopper(Object tileEntityHopper) {	}	@Override	public void superdisplayGUIHopperMinecart(Object entityMinecartHopper) {	}	@Override	public void superdisplayGUIWorkbench(int par1, int par2, int par3) {	}	@Override	public void superdisplayGUIEnchantment(int par1, int par2, int par3, String par4Str) {	}	@Override	public void superdisplayGUIAnvil(int par1, int par2, int par3) {	}	@Override	public void superdisplayGUIFurnace(Object tileEntityFurnace) {	}	@Override	public void superdisplayGUIBrewingStand(Object tileEntityBrewingStand) {	}	@Override	public void superdisplayGUIBeacon(Object tileEntityBeacon) {	}	@Override	public void superdisplayGUIDispenser(Object tileEntityDispenser) {	}	@Override	public void superdisplayGUIMerchant(Object iMerchant, String par2Str) {	}	@Override	public void supersendMessage(String par1Str) {	}	@Override	public void supersendChatToPlayer(Object chatMessageComponent) {	}	@Override	public boolean supercanUseCommand(int par1, String par2Str) {		return false;	}	@Override	public Object supergetPlayerCoordinates() {		return null;	}	@Override	public boolean superisClientWorld() {		return false;	}	@Override	public void supersetupCustomSkin() {	}	@Override	public Object supergetTextureSkin() {		return null;	}	@Override	public Object supergetTextureCape() {		return null;	}	@Override	public Object superdropPlayerItem(Object itemStack) {		return null;	}	@Override	public float supergetCurrentPlayerStrVsBlock(Object block, boolean par2) {		return 0.0F;	}	@Override	public float supergetCurrentPlayerStrVsBlock(Object block, boolean par2, int meta) {		return 0.0F;	}	@Override	public Object supersleepInBedAt(int par1, int par2, int par3) {		return null;	}	@Override	public boolean supergetHideCape(int par1) {		return false;	}	@Override	public void supersetHideCape(int par1, boolean par2) {	}	@Override	public void supersetSpawnChunk(Object chunkCoordinates, boolean par2) {	}	@Override	public void superfall(float par1) {	}	@Override	public Object supergetItemIcon(Object itemStack, int par2) {		return null;	}	@Override	public boolean superisCurrentToolAdventureModeExempt(int par1, int par2, int par3) {		return false;	}	@Override	public boolean supercanPlayerEdit(int par1, int par2, int par3, int par4, Object itemStack) {		return false;	}	@Override	public String supergetEntityName() {		return null;	}	@Override	public Object supergetCurrentItemOrArmor(int par1) {		return null;	}	@Override	public Object[] supergetLastActiveItems() {		return null;	}	@Override	public boolean supergetHideCape() {		return false;	}	@Override	public String supergetTranslatedEntityName() {		return null;	}	@Override	public void superupdateFallState(double par1, boolean par3) {	}	@Override	public int superfunc_142015_aE() {		return -1;	}	@Override	public void superdropRareDrop(int par1) {	}	@Override	public Object superfunc_110142_aN() {		return null;	}	@Override	public boolean superisAIEnabled() {		return false;	}	@Override	public void superupdateAITasks() {	}	@Override	public void supersetPositionAndRotationDirect(double par1, double par3, double par5, float par7, float par8, int par9) {	}	@Override	public Object supergetPosition(float par1) {		return null;	}	@Override	public void superplayStepSound(int par1, int par2, int par3, int par4) {	}	@Override	public boolean superhandleLavaMovement() {		return false;	}	@Override	public boolean superisInRangeToRenderVec3D(Object vec3) {		return false;	}	@Override	public float supergetShadowSize() {		return 0.0F;	}	@Override	public Object superdropItem(int par1, int par2) {		return null;	}	@Override	public Object superdropItemWithOffset(int par1, int par2, float par3) {		return null;	}	@Override	public boolean superisEntityInvulnerable() {		return false;	}	@Override	public void supercopyDataFrom(Object entity, boolean par2) {	}	@Override	public float supergetBlockExplosionResistance(Object explosion, Object world, int par3, int par4, int par5, Object block) {		return 0.0F;	}	@Override	public boolean supershouldExplodeBlock(Object explosion, Object world, int par3, int par4, int par5, int par6, float par7) {		return false;	}	@Override	public int supergetMaxSafePointTries() {		return -1;	}	@Override	public void supercloseScreenNoPacket() {	}	@Override	public void superfunc_146100_a(Object tileEntity) {	}	@Override	public void superfunc_146095_a(Object commandBlockBaseLogic) {	}	@Override	public void superfunc_146093_a(Object tileEntityHopper) {	}	@Override	public void superfunc_146104_a(Object tileEntityBeacon) {	}	@Override	public void superfunc_146102_a(Object tileEntityDispenser) {	}	@Override	public void superfunc_146098_a(Object tileEntityBrewingStand) {	}	@Override	public void superfunc_146101_a(Object tileEntityFurnace) {	}	@Override	public float supergetBreakSpeed(Object block, boolean p_146096_2_, int meta) {		return 0.0F;	}	@Override	public float supergetBreakSpeed(Object block, boolean p_146096_2_, int meta, int x, int y, int z) {		return 0.0F;	}	@Override	public String superfunc_146067_o(int p_146067_1_) {		return null;	}	@Override	public void superfunc_145780_a(int p_145780_1_, int p_145780_2_, int p_145780_3_, Object block) {	}	@Override	public Object superfropItemWithOffset(Object item, int p_145778_2_, float p_145778_3_) {		return null;	}	@Override	public float superfunc_145772_a(Object explosion, Object world, int p_145772_3_, int p_145772_4_, int p_145772_5_, Object block) {		return 0.0F;	}	@Override	public boolean superfunc_145774_a(Object explosion, Object world, int p_145774_3_, int p_145774_4_, int p_145774_5_, Object block, float p_145774_7_) {		return false;	}	@Override	public void superfunc_152121_a(Object type, Object resourceLocation) {	}	@Override	public void superheal(int par1) {	}	@Override	public void superdamageEntity(Object damageSource, int par2) {	}	@Override	public boolean superfunc_71066_bF() {		return false;	}	@Override	public void superupdateCloak() {	}	@Override	public void supersendChatToPlayer(String par1Str) {	}	@Override	public void superalertWolves(Object entityLiving, boolean par2) {	}	@Override	public void superdamageArmor(int par1) {	}	@Override	public void superfunc_82162_bC() {	}	@Override	public boolean supercanCurrentToolHarvestBlock(int par1, int par2, int par3) {		return false;	}	@Override	public boolean superfunc_94062_bN() {		return false;	}	@Override	public boolean supercanPickUpLoot() {		return false;	}	@Override	public Object supergetTranslator() {		return null;	}	@Override	public String supertranslateString(String par1Str, Object... par2ArrayOfObj) {		return null;	}	@Override	public int superfunc_96121_ay() {		return 0;	}	@Override	public Object supergetLookHelper() {		return null;	}	@Override	public Object supergetMoveHelper() {		return null;	}	@Override	public Object supergetJumpHelper() {		return null;	}	@Override	public Object supergetNavigator() {		return null;	}	@Override	public Object supergetEntitySenses() {		return null;	}	@Override	public Object supergetLastAttackingEntity() {		return null;	}	@Override	public void supersetLastAttackingEntity(Object entity) {	}	@Override	public Object supergetAttackTarget() {		return null;	}	@Override	public void supersetAttackTarget(Object entityLiving) {	}	@Override	public boolean supercanAttackClass(Class par1Class) {		return false;	}	@Override	public void supereatGrassBonus() {	}	@Override	public boolean superisWithinHomeDistanceCurrentPosition() {		return false;	}	@Override	public boolean superisWithinHomeDistance(int par1, int par2, int par3) {		return false;	}	@Override	public void supersetHomeArea(int par1, int par2, int par3, int par4) {	}	@Override	public Object supergetHomePosition() {		return null;	}	@Override	public float supergetMaximumHomeDistance() {		return 0;	}	@Override	public void superdetachHome() {	}	@Override	public boolean superhasHome() {		return false;	}	@Override	public String supergetTexture() {		return null;	}	@Override	public int supergetTalkInterval() {		return 0;	}	@Override	public void superplayLivingSound() {	}	@Override	public void superspawnExplosionParticle() {	}	@Override	public void supersetEntityHealth(int par1) {	}	@Override	public Object superapplyArmorCalculations(Object damageSource, int par2) {		return 0;	}	@Override	public Object superapplyPotionDamageCalculations(Object damageSource, int par2) {		return 0;	}	@Override	public String supergetLivingSound() {		return null;	}	@Override	public void superknockBack(Object entity, int par2, double par3, double par5) {	}	@Override	public int supergetDropItemId() {		return 0;	}	@Override	public void supersetMoveForward(float par1) {	}	@Override	public boolean supercanDespawn() {		return false;	}	@Override	public void superdespawnEntity() {	}	@Override	public int supergetVerticalFaceSpeed() {		return 0;	}	@Override	public void superfaceEntity(Object entity, float par2, float par3) {	}	@Override	public boolean supergetCanSpawnHere() {		return false;	}	@Override	public float supergetRenderSizeModifier() {		return 0;	}	@Override	public int supergetMaxSpawnedInChunk() {		return 0;	}	@Override	public void superonChangedPotionEffect(Object potionEffect) {	}	@Override	public float supergetSpeedModifier() {		return 0;	}	@Override	public void superinitCreature() {	}	@Override	public boolean supercanBeSteered() {		return false;	}	@Override	public void superfunc_94058_c(String par1Str) {	}	@Override	public String superfunc_94057_bL() {		return null;	}	@Override	public boolean superfunc_94056_bM() {		return false;	}	@Override	public void supersetNoAI(boolean par1) {	}	@Override	public void superfunc_96120_a(int par1, float par2) {	}	@Override	public void supersetCanPickUpLoot(boolean par1) {	}	@Override	public boolean superisNoDespawnRequired() {		return false;	}	@Override	public boolean superaddNotRiddenEntityID(Object nBTTagCompound) {		return false;	}	@Override	public boolean superaddEntityID(Object nBTTagCompound) {		return false;	}	@Override	public boolean superinteract(Object entityPlayer) {		return false;	}	@Override	public void superunmountEntity(Object entity) {	}	@Override	public float superfunc_82146_a(Object explosion, Object world, int par3, int par4, int par5, Object block) {		return 0;	}	@Override	public boolean superfunc_96091_a(Object explosion, Object world, int par3, int par4, int par5, int par6, float par7) {		return false;	}	// ~189	public void setClientBrand(String brand) {	}	@Override	public void supersetClientBrand(String brand) {	}	public String getClientBrand() {		return null;	}	public int getItemInUseDuration() {		return -1;	}	@Override	public int supergetItemInUseDuration() {		return -1;	}	public ItemStack getItemInUse() {		return null;	}	@Override	public ItemStack supergetItemInUse() {		return null;	}	public void stopUsingItem() {	}	@Override	public void superstopUsingItem() {	}	public void clearItemInUse() {	}	@Override	public void superclearItemInUse() {	}	public boolean isBlocking() {		return false;	}	@Override	public boolean superisBlocking() {		return false;	}	public void destroyCurrentEquippedItem() {	}	@Override	public void superdestroyCurrentEquippedItem() {	}	public void setItemInUse(ItemStack itemStack, int duration) {	}	@Override	public void supersetItemInUse(Object itemStack, int duration) {	}	public ItemStack getHeldItem() {		return null;	}	@Override	public ItemStack supergetHeldItem() {		return super.getHeldItemMainhand();	}	public ItemStack[] getInventory() {		return null;	}	@Override	public ItemStack[] supergetInventory() {		return null;	}	public boolean isPotionActive(int p_82165_1_) {		return false;	}	@Override	public boolean superisPotionActive(int p_82165_1_) {		return false;	}	public void removePotionEffectClient(int p_70618_1_) {	}	@Override	public void superremovePotionEffectClient(int p_70618_1_) {	}	public void removePotionEffect(int p_82170_1_) {	}	@Override	public void superremovePotionEffect(int p_82170_1_) {	}	public boolean isOnTeam(Team team) {		return false;	}	@Override	public boolean superisOnTeam(Object team) {		return false;	}	public void updateRiderPosition() {	}	@Override	public void superupdatePassenger() {	}	public boolean interactFirst(EntityPlayer entityPlayer) {		return false;	}	@Override	public boolean superprocessInitialInteract(Object entityPlayer) {		return false;	}	public boolean isEating() {		return false;	}	@Override	public boolean superisEating() {		return false;	}	public void setEating(boolean eating) {	}	@Override	public void supersetEating(boolean eating) {	}	public void copyDataFromOld(Entity entity) {	}	@Override	public void supercopyDataFromOld(Object entity) {	}	public void onDataWatcherUpdate(int p_145781_1_) {	}	@Override	public void superonDataWatcherUpdate(int p_145781_1_) {	}	public NBTTagCompound getNBTTagCompound() {		return null;	}	@Override	public NBTTagCompound supergetNBTTagCompound() {		return null;	}	public void clientUpdateEntityNBT(NBTTagCompound nBTTagCompound) {	}	@Override	public void superclientUpdateEntityNBT(Object nBTTagCompound) {	}	public boolean interactAt(EntityPlayer entityPlayer, Vec3d vec3) {		return false;	}	@Override	public boolean superinteractAt(Object entityPlayer, Object vec3) {		return false;	}	public String registerExtendedProperties(String identifier, Object iExtendedEntityProperties) {		return null;	}	@Override	public String superregisterExtendedProperties(String identifier, Object iExtendedEntityProperties) {		return null;	}	public Object getExtendedProperties(String identifier) {		return null;	}	@Override	public Object supergetExtendedProperties(String identifier) {		return null;	}	@Override	public void superswingArm() {	}	@Override	public void superopenBook(Object itemStack) {	}	@Override	public boolean superinteractWith(Object entity) {		return false;	}	@Override	public Object supergetItemStackFromSlot(int par1) {		return null;	}	@Override	public void superdropLoot() {	}	@Override	public void supersetInPortal() {		super.setPortal((BlockPos) Modchu_AS.get(Modchu_AS.newBlockPos, posX, posY, posZ));	}	@Override	public void superplayStepSound(int par1, int par2, int par3, Object par4) {	}	@Override	public boolean superisInRangeToRender3d(Object vec3) {		return false;	}	@Override	public boolean supershouldExplodeBlock(Object explosion, Object world, int par3, int par4, int par5, Object par6, float par7) {		return false;	}	@Override	public Object supergetCurrentArmor(int slotIn) {		return null;	}	@Override	public void supersetCurrentItemOrArmor(int slotIn, Object itemStack) {	}	@Override	public void supersetItemStackToSlot(int p_70062_1_, Object itemStack) {	}	@Override	public void supersetMaxHealth(Object floatOrInt) {		getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(Modchu_CastHelper.Double(floatOrInt, 0.0D, false));	}	@Override	public boolean superattackEntityFrom(Object damageSource, Object p_70097_2_) {		return super.attackEntityFrom((DamageSource) damageSource, (Float) p_70097_2_);	}	@Override	public boolean superisNotColliding() {		return false;	}	// 194~220共通コピペ　↑	// 202~220共通コピペ　↓	@Override	public void setGameType(GameType gameType) {		if (master != null) master.setGameType(gameType);		else super.setGameType(gameType);	}	@Override	public void supersetGameType(Object gameType) {		super.setGameType((GameType) gameType);	}	@Override	public void superonChunkLoad() {	}	// 202~220共通コピペ　↑	// 210~220共通コピペ　↓	@Override	public void openGuiHorseInventory(AbstractHorse entityHorse, IInventory iInventory) {		if (master != null) master.openGuiHorseInventory(entityHorse, iInventory);		else super.openGuiHorseInventory(entityHorse, iInventory);	}	@Override	public boolean superprocessInitialInteract(Object entityPlayer, Object itemStack, Object enumHand) {		return super.processInitialInteract((EntityPlayer) entityPlayer, (EnumHand) enumHand);	}	@Override	public EnumActionResult superapplyPlayerInteraction(Object entityPlayer, Object vec3d, Object itemStack, Object enumHand) {		return super.applyPlayerInteraction((EntityPlayer) entityPlayer, (Vec3d) vec3d, (EnumHand) enumHand);	}	// 210~220共通コピペ　↑	// 212~220共通コピペ　↓	@Override	public void sendStatusMessage(ITextComponent ITextComponent, boolean p_146105_2_) {		if (master != null) master.sendStatusMessage(ITextComponent, p_146105_2_);		else super.sendStatusMessage(ITextComponent, p_146105_2_);	}	@Override	public void supersendStatusMessage(Object ITextComponent, boolean p_146105_2_) {		super.sendStatusMessage((ITextComponent) ITextComponent, p_146105_2_);	}	@Override	public EnumActionResult interactOn(Entity entity, EnumHand enumHand) {		return (EnumActionResult) (master != null ? master.interact(entity, null, enumHand) : super.interactOn(entity, enumHand));	}	@Override	public Object superinteract(Object entity, Object itemStack, Object enumHand) {		return super.interactOn((Entity) entity, (EnumHand) enumHand);	}	@Override	public void move(MoverType moverType, double x, double y, double z) {		if (master != null) master.move(moverType, x, y, z);		else super.move(moverType, x, y, z);	}	@Override	public void supermove(Object moverType, double x, double y, double z) {		super.move((MoverType) moverType, x, y, z);	}	@Override	public void sendMessage(ITextComponent ITextComponent) {		if (master != null) master.sendMessage(ITextComponent);		else super.sendMessage(ITextComponent);	}	@Override	public void supersendMessage(Object ITextComponent) {		super.sendMessage((ITextComponent) ITextComponent);	}	@Override	public boolean canUseCommand(int permLevel, String commandName) {		return master != null ? master.canUseCommand(permLevel, commandName) : super.canUseCommand(permLevel, commandName);	}	@Override	public void turn(float yaw, float pitch) {		if (master != null) master.turn(yaw, pitch);		else super.turn(yaw, pitch);	}	@Override	public void superturn(float yaw, float pitch) {		super.turn(yaw, pitch);	}	// 212~220共通コピペ　↑	@Override	public void travel(float par1, float par2, float par3) {		if (master != null) master.travel(par1, par2, par3);		else super.travel(par1, par2, par3);	}	@Override	public void supertravel(float par1, float par2, float par3) {		super.travel(par1, par2, par3);	}	@Override	protected SoundEvent getHurtSound(DamageSource damageSource) {		return (SoundEvent) (master != null ? master.getHurtSound(damageSource) : super.getHurtSound(damageSource));	}	@Override	public Object supergetHurtSound(Object damageSource) {		return super.getHurtSound((DamageSource) damageSource);	}	@Override	public void superonUpdateWalkingPlayer() {	}	@Override	public void superclonePlayer(Object entityPlayer, boolean respawnFromEnd) {	}	@Override	public void onEnchant(ItemStack itemStack, int levels) {		if (master != null) master.onEnchant(itemStack, levels);		else super.onEnchant(itemStack, levels);	}	@Override	public void superonEnchant(Object itemStack, int levels) {		super.onEnchant((ItemStack) itemStack, levels);	}	@Override	public void moveRelative(float p_70060_1_, float p_70060_2_, float p_70060_3_, float p_191958_4_) {		if (master != null) master.moveRelative(p_70060_1_, p_70060_2_, p_70060_3_, p_191958_4_);		else super.moveRelative(p_70060_1_, p_70060_2_, p_70060_3_, p_191958_4_);	}	@Override	public void supermoveRelative(float p_70060_1_, float p_70060_2_, float p_70060_3_, float p_191958_4_) {		super.moveRelative(p_70060_1_, p_70060_2_, p_70060_3_, p_191958_4_);	}	@Override	public int getBrightnessForRender() {		return master != null ? master.getBrightnessForRender() : super.getBrightnessForRender();	}	@Override	public int supergetBrightnessForRender(float par1) {		return super.getBrightnessForRender();	}	@Override	public int supergetBrightnessForRender() {		return super.getBrightnessForRender();	}	@Override	public float getBrightness() {		return master != null ? master.getBrightness() : super.getBrightness();	}	@Override	public float supergetBrightness() {		return super.getBrightness();	}	@Override	public float supergetBrightness(float p_70013_1_) {		return super.getBrightness();	}	@Override	public boolean superhasAchievement(Object achievement) {		return false;	}	@Override	public void superfunc_181013_g(float p_181013_1_) {		supersetRenderYawOffset(p_181013_1_);	}	@Override	public Object superfunc_181012_aH() {		return supergetTeleportDirection();	}	@Override	public void supersetAngles(float yaw, float pitch) {		super.turn(yaw, pitch);	}	@Override	public void superaddChatMessage(Object iTextComponent) {		super.sendMessage((ITextComponent) iTextComponent);	}	@Override	public boolean supercanCommandSenderUseCommand(int permLevel, String commandName) {		return super.canUseCommand(permLevel, commandName);	}	@Override	public Object supergetTeleportDirection() {		return super.getTeleportDirection();	}	@Override	public void onInsideBlock(IBlockState iBlockState) {		if (master != null) master.onInsideBlock(iBlockState);		else super.onInsideBlock(iBlockState);	}	@Override	public void superonInsideBlock(Object iBlockState) {		super.onInsideBlock((IBlockState) iBlockState);	}	public float func_191954_d(float p_191954_1_) {		return master != null ? master.playFlySound(p_191954_1_) : super.playFlySound(p_191954_1_);	}	@Override	public float superfunc_191954_d(float p_191954_1_) {		return super.playFlySound(p_191954_1_);	}	public boolean func_191957_ae() {		return master != null ? master.makeFlySound() : super.makeFlySound();	}	@Override	public boolean superfunc_191957_ae() {		return super.makeFlySound();	}	@Override	public boolean hasNoGravity() {		return master != null ? master.hasNoGravity() : super.hasNoGravity();	}	@Override	public boolean superhasNoGravity() {		return super.hasNoGravity();	}	@Override	public void setNoGravity(boolean noGravity) {		if (master != null) master.setNoGravity(noGravity);		else super.setNoGravity(noGravity);	}	@Override	public void supersetNoGravity(boolean noGravity) {		super.setNoGravity(noGravity);	}	public boolean func_191953_am() {		return master != null ? master.isOverWater() : super.isOverWater();	}	@Override	public boolean superfunc_191953_am() {		return super.isOverWater();	}	@Override	public Vec2f getPitchYaw() {		return (Vec2f) (master != null ? master.getPitchYaw() : super.getPitchYaw());	}	@Override	public Vec2f supergetPitchYaw() {		return super.getPitchYaw();	}	@Override	public Vec3d getForward() {		return (Vec3d) (master != null ? master.getForward() : super.getForward());	}	@Override	public Vec3d supergetForward() {		return super.getForward();	}	@Override	public boolean getIsInvulnerable() {		return master != null ? master.getIsInvulnerable() : super.getIsInvulnerable();	}	@Override	public boolean supergetIsInvulnerable() {		return super.getIsInvulnerable();	}	@Override	public String getCachedUniqueIdString() {		return master != null ? master.getCachedUniqueIdString() : super.getCachedUniqueIdString();	}	@Override	public String supergetCachedUniqueIdString() {		return super.getCachedUniqueIdString();	}	@Override	public boolean canTrample(World world, Block block, BlockPos blockPos, float fallDistance) {		return master != null ? master.canTrample(world, block, blockPos, fallDistance) : super.canTrample(world, block, blockPos, fallDistance);	}	@Override	public boolean supercanTrample(Object world, Object block, Object blockPos, float fallDistance) {		return super.canTrample((World) world, (Block) block, (BlockPos) blockPos, fallDistance);	}	@Override	public int getFireImmuneTicks() {		return master != null ? master.getFireImmuneTicks() : super.getFireImmuneTicks();	}	@Override	public int supergetFireImmuneTicks() {		return super.getFireImmuneTicks();	}	@Override	public Map<Potion, PotionEffect> getActivePotionMap() {		return master != null ? master.getActivePotionMap() : super.getActivePotionMap();	}	@Override	public Map<Potion, PotionEffect> supergetActivePotionMap() {		return super.getActivePotionMap();	}	@Override	public void blockUsingShield(EntityLivingBase entityLivingBase) {		if (master != null) master.blockUsingShield(entityLivingBase);		else super.blockUsingShield(entityLivingBase);	}	@Override	public void superblockUsingShield(Object entityLivingBase) {		super.blockUsingShield((EntityLivingBase) entityLivingBase);	}	@Override	public DamageSource getLastDamageSource() {		return (DamageSource) (master != null ? master.getLastDamageSource() : super.getLastDamageSource());	}	@Override	public DamageSource supergetLastDamageSource() {		return super.getLastDamageSource();	}	@Override	public boolean hasItemInSlot(EntityEquipmentSlot entityEquipmentSlot) {		return master != null ? master.hasItemInSlot(entityEquipmentSlot) : super.hasItemInSlot(entityEquipmentSlot);	}	@Override	public boolean superhasItemInSlot(Object entityEquipmentSlot) {		return super.hasItemInSlot((EntityEquipmentSlot) entityEquipmentSlot);	}	@Override	public float getWaterSlowDown() {		return master != null ? master.getWaterSlowDown() : super.getWaterSlowDown();	}	@Override	public float supergetWaterSlowDown() {		return super.getWaterSlowDown();	}	@Override	public boolean attackable() {		return master != null ? master.attackable() : super.attackable();	}	@Override	public boolean superattackable() {		return super.attackable();	}	@Override	public void setPartying(BlockPos blockPos, boolean p_191987_2_) {		if (master != null) master.setPartying(blockPos, p_191987_2_);		else super.setPartying(blockPos, p_191987_2_);	}	@Override	public void supersetPartying(Object blockPos, boolean p_191987_2_) {		super.setPartying((BlockPos) blockPos, p_191987_2_);	}	@Override	public boolean processInitialInteract(EntityPlayer entityPlayer, EnumHand enumHand) {		return master != null ? master.processInitialInteract(entityPlayer, enumHand) : super.processInitialInteract(entityPlayer, enumHand);	}	@Override	public boolean superprocessInitialInteract(Object entityPlayer, Object enumHand) {		return super.processInitialInteract((EntityPlayer) entityPlayer, (EnumHand) enumHand);	}	@Override	public EnumActionResult applyPlayerInteraction(EntityPlayer entityPlayer, Vec3d vec3d, EnumHand enumHand) {		return (EnumActionResult) (master != null ? master.applyPlayerInteraction(entityPlayer, vec3d, enumHand) : super.applyPlayerInteraction(entityPlayer, vec3d, enumHand));	}	@Override	public EnumActionResult superapplyPlayerInteraction(Object entityPlayer, Object vec3d, Object enumHand) {		return super.applyPlayerInteraction((EntityPlayer) entityPlayer, (Vec3d) vec3d, (EnumHand) enumHand);	}	@Override	public RecipeBook getRecipeBook() {		return (RecipeBook) (master != null ? master.getRecipeBook() : super.getRecipeBook());	}	@Override	public RecipeBook supergetRecipeBook() {		return super.getRecipeBook();	}	@Override	public void removeRecipeHighlight(IRecipe iRecipe) {		if (master != null) master.removeRecipeHighlight(iRecipe);		else super.removeRecipeHighlight(iRecipe);	}	@Override	public void superfunc_193103_a(Object iRecipe) {		super.removeRecipeHighlight((IRecipe) iRecipe);	}	@Override	public void openEditStructure(TileEntityStructure tileEntityStructure) {		if (master != null) master.openEditStructure(tileEntityStructure);		else super.openEditStructure(tileEntityStructure);	}	@Override	public void superopenEditStructure(Object tileEntityStructure) {		super.openEditStructure((TileEntityStructure) tileEntityStructure);	}	@Override	public boolean isAutoJumpEnabled() {		return master != null ? master.isAutoJumpEnabled() : super.isAutoJumpEnabled();	}	@Override	public boolean superisAutoJumpEnabled() {		return super.isAutoJumpEnabled();	}	@Override	public void updateAutoJump(float p_189810_1_, float p_189810_2_) {		if (master != null) master.updateAutoJump(p_189810_1_, p_189810_2_);		else super.updateAutoJump(p_189810_1_, p_189810_2_);	}	@Override	public void superupdateAutoJump(float p_189810_1_, float p_189810_2_) {		super.updateAutoJump(p_189810_1_, p_189810_2_);	}	@Override	public void destroyVanishingCursedItems() {		if (master != null) master.destroyVanishingCursedItems();		else super.destroyVanishingCursedItems();	}	@Override	public void superdestroyVanishingCursedItems() {		super.destroyVanishingCursedItems();	}	@Override	public void disableShield(boolean p_190777_1_) {		if (master != null) master.disableShield(p_190777_1_);		else super.disableShield(p_190777_1_);	}	@Override	public void superdisableShield(boolean p_190777_1_) {		super.disableShield(p_190777_1_);	}	@Override	public void unlockRecipes(List<IRecipe> p_192021_1_) {		if (master != null) master.unlockRecipes(p_192021_1_);		else super.unlockRecipes(p_192021_1_);	}	@Override	public void superunlockRecipes(List p_192021_1_) {		super.unlockRecipes(p_192021_1_);	}	@Override	public void unlockRecipes(ResourceLocation[] resourceLocation) {		if (master != null) master.unlockRecipes(resourceLocation);		else super.unlockRecipes(resourceLocation);	}	@Override	public void superunlockRecipes(Object[] resourceLocation) {		super.unlockRecipes((ResourceLocation[]) resourceLocation);	}	@Override	public void resetRecipes(List<IRecipe> p_192022_1_) {		if (master != null) master.resetRecipes(p_192022_1_);		else super.resetRecipes(p_192022_1_);	}	@Override	public void superfunc_192022_b(List p_192022_1_) {		super.resetRecipes(p_192022_1_);	}	@Override	public boolean addItemStackToInventory(ItemStack itemStack) {		return master != null ? master.addItemStackToInventory(itemStack) : super.addItemStackToInventory(itemStack);	}	@Override	public boolean superaddItemStackToInventory(Object itemStack) {		return super.addItemStackToInventory((ItemStack) itemStack);	}	@Override	public boolean addShoulderEntity(NBTTagCompound nBTTagCompound) {		return master != null ? master.addShoulderEntity(nBTTagCompound) : super.addShoulderEntity(nBTTagCompound);	}	@Override	public boolean superaddShoulderEntity(Object nBTTagCompound) {		return super.addShoulderEntity((NBTTagCompound) nBTTagCompound);	}	@Override	public void spawnShoulderEntities() {		if (master != null) master.spawnShoulderEntities();		else super.spawnShoulderEntities();	}	@Override	public void superspawnShoulderEntities() {		super.spawnShoulderEntities();	}	@Override	public NBTTagCompound getLeftShoulderEntity() {		return (NBTTagCompound) (master != null ? master.getLeftShoulderEntity() : super.getLeftShoulderEntity());	}	@Override	public NBTTagCompound supergetLeftShoulderEntity() {		return super.getLeftShoulderEntity();	}	@Override	public void setLeftShoulderEntity(NBTTagCompound nBTTagCompound) {		if (master != null) master.setLeftShoulderEntity(nBTTagCompound);		else super.setLeftShoulderEntity(nBTTagCompound);	}	@Override	public void supersetLeftShoulderEntity(Object nBTTagCompound) {		super.setLeftShoulderEntity((NBTTagCompound) nBTTagCompound);	}	@Override	public NBTTagCompound getRightShoulderEntity() {		return (NBTTagCompound) (master != null ? master.getRightShoulderEntity() : super.getRightShoulderEntity());	}	@Override	public NBTTagCompound supergetRightShoulderEntity() {		return super.getRightShoulderEntity();	}	@Override	public void setRightShoulderEntity(NBTTagCompound nBTTagCompound) {		if (master != null) master.setRightShoulderEntity(nBTTagCompound);		else super.setRightShoulderEntity(nBTTagCompound);	}	@Override	public void supersetRightShoulderEntity(Object nBTTagCompound) {		super.setRightShoulderEntity((NBTTagCompound) nBTTagCompound);	}	@Override	public boolean canUseCommandBlock() {		return master != null ? master.canUseCommandBlock() : super.canUseCommandBlock();	}	@Override	public boolean supercanUseCommandBlock() {		return super.canUseCommandBlock();	}	@Override	public boolean hasSpawnDimension() {		return master != null ? master.hasSpawnDimension() : super.hasSpawnDimension();	}	@Override	public boolean superhasSpawnDimension() {		return super.hasSpawnDimension();	}	@Override	public int getSpawnDimension() {		return master != null ? master.getSpawnDimension() : super.getSpawnDimension();	}	@Override	public int supergetSpawnDimension() {		return super.getSpawnDimension();	}	@Override	public void setSpawnDimension(Integer integer) {		if (master != null) master.setSpawnDimension(integer);		else super.setSpawnDimension(integer);	}	@Override	public void supersetSpawnDimension(Object integer) {		super.setSpawnDimension((Integer) integer);	}	@Override	public void awardKillScore(Entity entity, int p_191956_2_, DamageSource damageSource) {		if (master != null) master.awardKillScore(entity, p_191956_2_, damageSource);		else super.awardKillScore(entity, p_191956_2_, damageSource);	}	@Override	public void superawardKillScore(Object entity, int p_191956_2_, Object damageSource) {		super.awardKillScore((Entity) entity, p_191956_2_, (DamageSource) damageSource);	}}