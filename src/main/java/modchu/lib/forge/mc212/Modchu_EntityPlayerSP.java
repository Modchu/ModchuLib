package modchu.lib.forge.mc212;import java.util.HashMap;import modchu.lib.Modchu_EntityHelper;import net.minecraft.entity.Entity;import net.minecraft.entity.MoverType;import net.minecraft.entity.passive.AbstractHorse;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.inventory.IInventory;import net.minecraft.util.EnumActionResult;import net.minecraft.util.EnumHand;import net.minecraft.util.math.Vec3d;import net.minecraft.util.text.ITextComponent;public class Modchu_EntityPlayerSP extends modchu.lib.forge.mc210_212.Modchu_EntityPlayerSP {
	public Modchu_EntityPlayerSP(HashMap<String, Object> map) {
		super(map);
	}	@Override	public void sendStatusMessage(ITextComponent ITextComponent, boolean p_146105_2_) {		if (master != null) master.sendStatusMessage(ITextComponent, p_146105_2_);		else super.sendStatusMessage(ITextComponent, p_146105_2_);	}	@Override	public void superSendStatusMessage(Object ITextComponent, boolean p_146105_2_) {		super.sendStatusMessage((ITextComponent) ITextComponent, p_146105_2_);	}	@Override	public EnumActionResult interactOn(Entity entity, EnumHand enumHand) {		return (EnumActionResult) (master != null ? master.interact(entity, null, enumHand) : super.interactOn(entity, enumHand));	}	@Override	public Object superInteract(Object entity, Object itemStack, Object enumHand) {		return super.interactOn((Entity) entity, (EnumHand) enumHand);	}	@Override	public void move(MoverType moverType, double x, double y, double z) {		if (master != null) master.move(moverType, x, y, z);		else super.move(moverType, x, y, z);	}	@Override	public void superMove(Object moverType, double x, double y, double z) {		super.move((MoverType) moverType, x, y, z);	}	@Override	public void sendMessage(ITextComponent ITextComponent) {		if (master != null) master.sendMessage(ITextComponent);		else super.sendMessage(ITextComponent);	}	@Override	public void superSendMessage(Object ITextComponent) {		super.sendMessage((ITextComponent) ITextComponent);	}	@Override	public boolean canUseCommand(int permLevel, String commandName) {		return master != null ? master.canUseCommand(permLevel, commandName) : super.canUseCommand(permLevel, commandName);	}	@Override	public void turn(float yaw, float pitch) {		if (master != null) master.turn(yaw, pitch);		else super.turn(yaw, pitch);	}	@Override	public void superTurn(float yaw, float pitch) {		super.turn(yaw, pitch);	}	@Override	public Object getDataWatcherWatchableObject(int i) {		return null;	}	@Override	public void setDataWatcherWatchableObject(int i, Object o) {	}	@Override	public void setDataWatcherWatchableObject(int i, int i2) {	}}