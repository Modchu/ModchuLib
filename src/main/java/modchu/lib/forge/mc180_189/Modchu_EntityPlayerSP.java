package modchu.lib.forge.mc180_189;import java.util.Collection;import java.util.HashMap;import java.util.Random;import java.util.UUID;import com.mojang.authlib.GameProfile;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityHelper;import modchu.lib.Modchu_IEntityPlayerSP;import modchu.lib.Modchu_IEntityPlayerSPMaster;import modchu.lib.Modchu_Main;import net.minecraft.block.Block;import net.minecraft.block.material.Material;import net.minecraft.block.state.IBlockState;import net.minecraft.client.Minecraft;import net.minecraft.client.entity.EntityPlayerSP;import net.minecraft.client.network.NetHandlerPlayClient;import net.minecraft.client.network.NetworkPlayerInfo;import net.minecraft.command.CommandResultStats.Type;import net.minecraft.command.server.CommandBlockLogic;import net.minecraft.crash.CrashReportCategory;import net.minecraft.entity.DataWatcher;import net.minecraft.entity.Entity;import net.minecraft.entity.EntityLivingBase;import net.minecraft.entity.EnumCreatureAttribute;import net.minecraft.entity.EnumCreatureType;import net.minecraft.entity.IMerchant;import net.minecraft.entity.SharedMonsterAttributes;import net.minecraft.entity.ai.attributes.BaseAttributeMap;import net.minecraft.entity.ai.attributes.IAttribute;import net.minecraft.entity.ai.attributes.IAttributeInstance;import net.minecraft.entity.effect.EntityLightningBolt;import net.minecraft.entity.item.EntityItem;import net.minecraft.entity.passive.EntityHorse;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.entity.player.InventoryPlayer;import net.minecraft.inventory.IInventory;import net.minecraft.inventory.InventoryEnderChest;import net.minecraft.item.Item;import net.minecraft.item.ItemStack;import net.minecraft.nbt.NBTTagCompound;import net.minecraft.nbt.NBTTagList;import net.minecraft.potion.Potion;import net.minecraft.potion.PotionEffect;import net.minecraft.scoreboard.Scoreboard;import net.minecraft.scoreboard.Team;import net.minecraft.server.MinecraftServer;import net.minecraft.stats.StatBase;import net.minecraft.stats.StatFileWriter;import net.minecraft.tileentity.TileEntitySign;import net.minecraft.util.AxisAlignedBB;import net.minecraft.util.BlockPos;import net.minecraft.util.CombatTracker;import net.minecraft.util.DamageSource;import net.minecraft.util.EnumFacing;import net.minecraft.util.FoodStats;import net.minecraft.util.IChatComponent;import net.minecraft.util.MovingObjectPosition;import net.minecraft.util.ResourceLocation;import net.minecraft.util.Vec3;import net.minecraft.world.Explosion;import net.minecraft.world.IInteractionObject;import net.minecraft.world.LockCode;import net.minecraft.world.World;import net.minecraft.world.WorldSettings.GameType;import net.minecraftforge.common.IExtendedEntityProperties;public abstract class Modchu_EntityPlayerSP extends EntityPlayerSP implements Modchu_IEntityPlayerSP {	public Modchu_IEntityPlayerSPMaster master;	public Modchu_EntityPlayerSP(HashMap<String, Object> map) {		super((Minecraft)map.get("Object"), (World)map.get("Object1"), (NetHandlerPlayClient)map.get("Object2"), (StatFileWriter)map.get("Object3"));		map.put("base", this);		Object instance = Modchu_Main.newModchuCharacteristicInstance(map);		//Modchu_Debug.lDebug("Modchu_EntityPlayerSP init instance="+instance);		master = instance != null				&& instance instanceof Modchu_IEntityPlayerSPMaster ? (Modchu_IEntityPlayerSPMaster) instance : null;		if (master != null); else Modchu_Debug.lDebug("Modchu_EntityPlayerSP init master == null !!");	}	@Override	public boolean isDamageInvincible() {		return master != null ? master.isDamageInvincible() : false;	}	@Override	public void entityDataManagerRegister(Class[] c1, int i, Object o) {		dataWatcher.addObject(i, o);	}	@Override	public Object getDataWatcherWatchableObject(int i) {		Object watchedObject = Modchu_AS.get("DataWatcher", "getWatchedObject", new Class[]{ int.class }, dataWatcher, new Object[]{ i });		return watchedObject != null ? Modchu_AS.get("net.minecraft.entity.DataWatcher$WatchableObject", "getObject", watchedObject) : null;	}	@Override	public void setDataWatcherWatchableObject(int i, Object o) {		dataWatcher.updateObject(i, o);	}	@Override	public int getEntityDataManagerEntriesCount() {		return Modchu_EntityHelper.getInstance().getEntityDataManagerEntriesCount(this);	}	@Override	public int getDamageInvincibleCount() {		return master != null ? master.getDamageInvincibleCount() : 0;	}	@Override	public void setDamageInvincibleCount(int i) {		if (master != null) master.setDamageInvincibleCount(i);	}	@Override	public boolean isInitFlag() {		return master != null;	}	@Override	public int getTempIsRiding() {		return master != null ? master.getTempIsRiding() : 0;	}	@Override	public void setTempIsRiding(int i) {		if (master != null) master.setTempIsRiding(i);	}	@Override	public int getDataWatcherWatchableObjectIdFirst() {		return 15;	}	@Override	public void dataParameterMapSetting(HashMap<Integer, Object> map) {	}	@Override	public void sendDeathMessage(Object damageSource) {		if (master != null) master.sendDeathMessage(damageSource);	}	@Override	public boolean canSendDeathMessage() {		return master != null ? master.canSendDeathMessage() : false;	}	@Override	public Object getRidingEntity2() {		return supergetRidingEntity();	}	@Override	public boolean isRiding2() {		return isRiding();	}	@Override	public void dismountRidingEntity2() {		superdismountRidingEntity();	}	@Override	public void init() {		if (master != null) master.init();	}	@Override	public void wakeUpPlayer(boolean flag, boolean flag1, boolean flag2) {		super.wakeUpPlayer(flag, flag1, flag2);		if (master != null) master.wakeUpPlayer(flag, flag1, flag2);	}	@Override	public void setPositionCorrection(double par1, double par3, double par5) {		if (master != null) master.setPositionCorrection(par1, par3, par5);	}	@Override	public void onLivingUpdate() {		if (master != null) master.onLivingUpdate();		super.onLivingUpdate();	}	@Override	public void moveEntityWithHeading(float f, float f1) {		if (master != null) master.travel(f, f1, 0.0F);		super.moveEntityWithHeading(f, f1);	}	@Override	public String getHurtSound() {		if (master != null) return (String) master.getHurtSound(null);		return super.getHurtSound();	}	@Override	public EnumCreatureAttribute getCreatureAttribute() {		if (master != null) return (EnumCreatureAttribute) master.getCreatureAttribute();		return super.getCreatureAttribute();	}	@Override	public EnumCreatureAttribute supergetCreatureAttribute() {		return super.getCreatureAttribute();	}	public void copyPlayer(EntityPlayer entityplayer) {		if (master != null) master.copyPlayer(entityplayer);	}	public void supercopyPlayer(EntityPlayer entityplayer) {		//super.copyPlayer(entityplayer);	}	public void copyInventory(InventoryPlayer inventoryplayer) {		if (master != null) master.copyInventory(inventoryplayer);	}	@Override	public void publicDoWaterSplashEffect() {		if (master != null) master.doWaterSplashEffect();	}	@Override	public void publicSetSize(float f, float f1) {		if (master != null) master.setSize(f, f1);	}	@Override	public void superupdateRidden() {		super.updateRidden();	}	public boolean attackEntityFrom(Entity var1, DamageSource par1DamageSource, int par2) {		return master != null ? master.attackEntityFrom(var1, par1DamageSource, par2) : false;	}	public boolean attackEntityFrom(DamageSource par1DamageSource, int par2) {		return master != null ? master.attackEntityFrom(par1DamageSource, par2) : false;	}	public boolean superattackEntityFrom(DamageSource par1DamageSource, int par2) {		return super.attackEntityFrom(par1DamageSource, par2);	}	@Override	public void onDeath(DamageSource par1DamageSource) {		if (master != null) master.onDeath(par1DamageSource);	}	public void superonDeath(DamageSource par1DamageSource) {		super.onDeath(par1DamageSource);	}	@Override	public void setHealth(float f) {		if (master != null) master.setHealth((int) f);	}	public float getEntityHealth() {		return (Float) (master != null ? master.getHealth() : super.getHealth());	}	public void setEntityHealth(float f) {		if (master != null) master.setHealth(f);	}	@Override	public Object supercopyPlayer(Object entityplayer) {		return null;	}	@Override	public void superwakeUpPlayer(boolean flag, boolean flag1, boolean flag2) {		super.wakeUpPlayer(flag, flag1, flag2);	}	@Override	public void supersetPositionCorrection(double par1, double par3, double par5) {	}	@Override	public void superonLivingUpdate() {		super.onLivingUpdate();	}	@Override	public void supertravel(float f, float f1, float f2) {		super.moveEntityWithHeading(f, f1);	}	@Override	public String supergetHurtSound(Object damageSource) {		return super.getHurtSound();	}	@Override	public boolean superisEntityInsideOpaqueBlock() {		return super.isEntityInsideOpaqueBlock();	}	@Override	public Object supercopyInventory(Object inventoryplayer) {		return null;	}	@Override	public boolean superattackEntityFrom(Object entity, Object damageSource, int i) {		return super.attackEntityFrom((DamageSource) damageSource, i);	}	@Override	public float supergetMaxHealth() {		return super.getMaxHealth();	}	@Override	public int supergetMaxHealthInt() {		return (int) super.getMaxHealth();	}	@Override	public float supergetHealth() {		return super.getHealth();	}	@Override	public int supergetHealthInt() {		return (int) super.getHealth();	}	@Override	public void supersetHealth(float f) {		super.setHealth(f);	}	@Override	public void supersetHealthInt(int i) {		super.setHealth(i);	}	@Override	public void superonDeath(Object damageSource) {		super.onDeath((DamageSource) damageSource);	}	@Override	public void supersendMotionUpdates() {	}	// 180~	@Override	public boolean superattackEntityFrom(Object damageSource, float amount) {		return super.attackEntityFrom((DamageSource) damageSource, amount);	}	@Override	public void heal(float healAmount) {		if (master != null) master.heal(healAmount);		else super.heal(healAmount);	}	@Override	public void superheal(float healAmount) {		super.heal(healAmount);	}	@Override	public void onUpdateWalkingPlayer() {		if (master != null) master.onUpdateWalkingPlayer();		else super.onUpdateWalkingPlayer();	}	@Override	public void superonUpdateWalkingPlayer() {		super.onUpdateWalkingPlayer();	}	@Override	public EntityItem dropOneItem(boolean p_71040_1_) {		return (EntityItem) (master != null ? master.dropItem(p_71040_1_) : super.dropOneItem(p_71040_1_));	}	@Override	public EntityItem superdropItem(boolean p_71040_1_) {		return super.dropOneItem(p_71040_1_);	}	@Override	public void joinEntityItemWithWorld(EntityItem entityItem) {		if (master != null) master.dropItemAndGetStack(entityItem);		else super.joinEntityItemWithWorld(entityItem);	}	@Override	public Object superdropItemAndGetStack(Object entityItem) {		super.joinEntityItemWithWorld((EntityItem) entityItem);		return ((EntityItem) entityItem).getEntityItem();	}	@Override	public void sendChatMessage(String p_71165_1_) {		if (master != null) master.sendChatMessage(p_71165_1_);		else super.sendChatMessage(p_71165_1_);	}	@Override	public void supersendChatMessage(String p_71165_1_) {		super.sendChatMessage(p_71165_1_);	}	@Override	public void swingItem() {		if (master != null) master.swingArm();		else super.swingItem();	}	@Override	public void superswingArm() {		super.swingItem();	}	@Override	public void respawnPlayer() {		if (master != null) master.respawnPlayer();		else super.respawnPlayer();	}	@Override	public void superrespawnPlayer() {		super.respawnPlayer();	}	@Override	protected void damageEntity(DamageSource damageSource, float damageAmount) {		if (master != null) master.damageEntity(damageSource, damageAmount);		else super.damageEntity(damageSource, damageAmount);	}	@Override	public void superdamageEntity(Object damageSource, float damageAmount) {		super.damageEntity((DamageSource) damageSource, damageAmount);	}	@Override	public void closeScreen() {		if (master != null) master.closeScreen();		else super.closeScreen();	}	@Override	public void supercloseScreen() {		super.closeScreen();	}	@Override	public void setPlayerSPHealth(float p_71150_1_) {		if (master != null) master.setPlayerSPHealth(p_71150_1_);		else super.setPlayerSPHealth(p_71150_1_);	}	@Override	public void supersetPlayerSPHealth(float p_71150_1_) {		super.setPlayerSPHealth(p_71150_1_);	}	@Override	public void addStat(StatBase statBase, int amount) {		if (master != null) master.addStat(statBase, amount);		else super.addStat(statBase, amount);	}	@Override	public void superaddStat(Object statBase, int amount) {		super.addStat((StatBase) statBase, amount);	}	@Override	public void sendPlayerAbilities() {		if (master != null) master.sendPlayerAbilities();		else super.sendPlayerAbilities();	}	@Override	public void supersendPlayerAbilities() {		super.sendPlayerAbilities();	}	@Override	public boolean isUser() {		return master != null ? master.isUser() : super.isUser();	}	@Override	public boolean superisUser() {		return super.isUser();	}	@Override	protected void sendHorseJump() {		if (master != null) master.sendHorseJump();		else super.sendHorseJump();	}	@Override	public void supersendHorseJump() {		super.sendHorseJump();	}	@Override	public void sendHorseInventory() {		if (master != null) master.sendHorseInventory();		else super.sendHorseInventory();	}	@Override	public void supersendHorseInventory() {		super.sendHorseInventory();	}	@Override	public void setClientBrand(String brand) {		if (master != null) master.setClientBrand(brand);		else super.setClientBrand(brand);	}	@Override	public void supersetClientBrand(String brand) {		super.setClientBrand(brand);	}	@Override	public String getClientBrand() {		return master != null ? master.getClientBrand() : super.getClientBrand();	}	@Override	public String supergetClientBrand() {		return super.getClientBrand();	}	@Override	public StatFileWriter getStatFileWriter() {		return (StatFileWriter) (master != null ? master.getStatFileWriter() : super.getStatFileWriter());	}	@Override	public StatFileWriter supergetStatFileWriter() {		return super.getStatFileWriter();	}	@Override	public void addChatComponentMessage(IChatComponent iChatComponent) {		if (master != null) master.sendStatusMessage(iChatComponent, false);		else super.addChatComponentMessage(iChatComponent);	}	@Override	public void supersendStatusMessage(Object iChatComponent, boolean p_146105_2_) {		super.addChatComponentMessage((IChatComponent) iChatComponent);	}	@Override	public void setXPStats(float currentXP, int maxXP, int level) {		if (master != null) master.setXPStats(currentXP, maxXP, level);		else super.setXPStats(currentXP, maxXP, level);	}	@Override	public void supersetXPStats(float currentXP, int maxXP, int level) {		super.setXPStats(currentXP, maxXP, level);	}	@Override	public boolean isServerWorld() {		return master != null ? master.isServerWorld() : super.isServerWorld();	}	@Override	public boolean superisServerWorld() {		return super.isServerWorld();	}	@Override	public boolean isRidingHorse() {		return master != null ? master.isRidingHorse() : super.isRidingHorse();	}	@Override	public boolean superisRidingHorse() {		return super.isRidingHorse();	}	@Override	public float getHorseJumpPower() {		return master != null ? master.getHorseJumpPower() : super.getHorseJumpPower();	}	@Override	public float supergetHorseJumpPower() {		return super.getHorseJumpPower();	}	@Override	public void openEditSign(TileEntitySign tileEntitySign) {		if (master != null) master.openEditSign(tileEntitySign);		else super.openEditSign(tileEntitySign);	}	@Override	public void superopenEditSign(Object tileEntitySign) {		super.openEditSign((TileEntitySign) tileEntitySign);	}	@Override	public void openEditCommandBlock(CommandBlockLogic commandBlockLogic) {		if (master != null) master.displayGuiEditCommandCart(commandBlockLogic);		else super.openEditCommandBlock(commandBlockLogic);	}	@Override	public void superdisplayGuiEditCommandCart(Object commandBlockLogic) {		super.openEditCommandBlock((CommandBlockLogic) commandBlockLogic);	}	@Override	public void displayGUIBook(ItemStack itemStack) {		if (master != null) master.openBook(itemStack);		else super.displayGUIBook(itemStack);	}	@Override	public void superopenBook(Object itemStack) {		super.displayGUIBook((ItemStack) itemStack);	}	@Override	public void displayGUIChest(IInventory iInventory) {		if (master != null) master.displayGUIChest(iInventory);		else super.displayGUIChest(iInventory);	}	@Override	public void superdisplayGUIChest(Object iInventory) {		super.displayGUIChest((IInventory) iInventory);	}	@Override	public void displayGUIHorse(EntityHorse entityHorse, IInventory iInventory) {		if (master != null) master.openGuiHorseInventory(entityHorse, iInventory);		else super.displayGUIHorse(entityHorse, iInventory);	}	@Override	public void superopenGuiHorseInventory(Object entityHorse, Object iInventory) {		super.displayGUIHorse((EntityHorse) entityHorse, (IInventory) iInventory);	}	@Override	public void displayGui(IInteractionObject iInteractionObject) {		if (master != null) master.displayGui(iInteractionObject);		else super.displayGui(iInteractionObject);	}	@Override	public void superdisplayGui(Object iInteractionObject) {		super.displayGui((IInteractionObject) iInteractionObject);	}	@Override	public void displayVillagerTradeGui(IMerchant iMerchant) {		if (master != null) master.displayVillagerTradeGui(iMerchant);		else super.displayVillagerTradeGui(iMerchant);	}	@Override	public void superdisplayVillagerTradeGui(Object iMerchant) {		super.displayVillagerTradeGui((IMerchant) iMerchant);	}	@Override	public void onCriticalHit(Entity entity) {		if (master != null) master.onCriticalHit(entity);		else super.onCriticalHit(entity);	}	@Override	public void superonCriticalHit(Object entity) {		super.onCriticalHit((Entity) entity);	}	@Override	public void onEnchantmentCritical(Entity entity) {		if (master != null) master.onEnchantmentCritical(entity);		else super.onEnchantmentCritical(entity);	}	@Override	public void superonEnchantmentCritical(Object entity) {		super.onEnchantmentCritical((Entity) entity);	}	@Override	public void updateEntityActionState() {		if (master != null) master.updateEntityActionState();		else super.updateEntityActionState();	}	@Override	public void superupdateEntityActionState() {		super.updateEntityActionState();	}	@Override	protected boolean isCurrentViewEntity() {		return master != null ? master.isCurrentViewEntity() : super.isCurrentViewEntity();	}	@Override	public boolean superisCurrentViewEntity() {		return super.isCurrentViewEntity();	}	@Override	public boolean isSpectator() {		return master != null ? master.isSpectator() : super.isSpectator();	}	@Override	public boolean superisSpectator() {		return super.isSpectator();	}	@Override	public boolean hasPlayerInfo() {		return master != null ? master.hasPlayerInfo() : super.hasPlayerInfo();	}	@Override	public boolean superhasPlayerInfo() {		return super.hasPlayerInfo();	}	@Override	protected NetworkPlayerInfo getPlayerInfo() {		return (NetworkPlayerInfo) (master != null ? master.getPlayerInfo() : super.getPlayerInfo());	}	@Override	public NetworkPlayerInfo supergetPlayerInfo() {		return super.getPlayerInfo();	}	@Override	public boolean hasSkin() {		return master != null ? master.hasSkin() : super.hasSkin();	}	@Override	public boolean superhasSkin() {		return super.hasSkin();	}	@Override	public ResourceLocation getLocationSkin() {		return (ResourceLocation) (master != null ? master.getLocationSkin() : super.getLocationSkin());	}	@Override	public ResourceLocation supergetLocationSkin() {		return super.getLocationSkin();	}	@Override	public ResourceLocation getLocationCape() {		return (ResourceLocation) (master != null ? master.getLocationCape() : super.getLocationCape());	}	@Override	public ResourceLocation supergetLocationCape() {		return super.getLocationCape();	}	@Override	public String getSkinType() {		return master != null ? master.getSkinType() : super.getSkinType();	}	@Override	public String supergetSkinType() {		return super.getSkinType();	}	@Override	public float getFovModifier() {		return master != null ? master.getFovModifier() : super.getFovModifier();	}	@Override	public float supergetFovModifier() {		return super.getFovModifier();	}	@Override	protected void applyEntityAttributes() {		if (master != null) master.applyEntityAttributes();		else super.applyEntityAttributes();	}	@Override	public void superapplyEntityAttributes() {		super.applyEntityAttributes();	}	@Override	public ItemStack getItemInUse() {		return (ItemStack) (master != null ? master.getItemInUse() : super.getItemInUse());	}	@Override	public ItemStack supergetItemInUse() {		return super.getItemInUse();	}	@Override	public int getItemInUseCount() {		return master != null ? master.getItemInUseCount() : super.getItemInUseCount();	}	@Override	public int supergetItemInUseCount() {		return super.getItemInUseCount();	}	@Override	public boolean isUsingItem() {		return master != null ? master.isHandActive() : super.isUsingItem();	}	@Override	public boolean superisHandActive() {		return super.isUsingItem();	}	@Override	public int getItemInUseDuration() {		return master != null ? master.getItemInUseDuration() : super.getItemInUseDuration();	}	@Override	public int supergetItemInUseDuration() {		return super.getItemInUseDuration();	}	@Override	public void stopUsingItem() {		if (master != null) master.stopUsingItem();		else super.stopUsingItem();	}	@Override	public void superstopUsingItem() {		super.stopUsingItem();	}	@Override	public void clearItemInUse() {		if (master != null) master.clearItemInUse();		else super.clearItemInUse();	}	@Override	public void superclearItemInUse() {		super.clearItemInUse();	}	@Override	public boolean isBlocking() {		return master != null ? master.isBlocking() : super.isBlocking();	}	@Override	public boolean superisBlocking() {		return super.isBlocking();	}	@Override	protected void updateItemUse(ItemStack itemStack, int p_71010_2_) {		if (master != null) master.updateItemUse(itemStack, p_71010_2_);		else super.updateItemUse(itemStack, p_71010_2_);	}	@Override	public void superupdateItemUse(Object itemStack, int p_71010_2_) {		super.updateItemUse((ItemStack) itemStack, p_71010_2_);	}	@Override	protected void onItemUseFinish() {		if (master != null) master.onItemUseFinish();		else super.onItemUseFinish();	}	@Override	public void superonItemUseFinish() {		super.onItemUseFinish();	}	@Override	protected boolean isMovementBlocked() {		return master != null ? master.isMovementBlocked() : super.isMovementBlocked();	}	@Override	public boolean superisMovementBlocked() {		return super.isMovementBlocked();	}	@Override	public int getScore() {		return master != null ? master.getScore() : super.getScore();	}	@Override	public int supergetScore() {		return super.getScore();	}	@Override	public void setScore(int p_85040_1_) {		if (master != null) master.setScore(p_85040_1_);		else super.setScore(p_85040_1_);	}	@Override	public void supersetScore(int p_85040_1_) {		super.setScore(p_85040_1_);	}	@Override	public void addScore(int p_85039_1_) {		if (master != null) master.addScore(p_85039_1_);		else super.addScore(p_85039_1_);	}	@Override	public void superaddScore(int p_85039_1_) {		super.addScore(p_85039_1_);	}	@Override	protected String getDeathSound() {		return (String) (master != null ? master.getDeathSound() : super.getDeathSound());	}	@Override	public String supergetDeathSound() {		return super.getDeathSound();	}	@Override	public EntityItem dropPlayerItemWithRandomChoice(ItemStack itemStack, boolean unused) {		return (EntityItem) (master != null ? master.dropItem(itemStack, unused) : super.dropPlayerItemWithRandomChoice(itemStack, unused));	}	@Override	public EntityItem superdropItem(Object itemStack, boolean unused) {		return super.dropPlayerItemWithRandomChoice((ItemStack) itemStack, unused);	}	@Override	public EntityItem dropItem(ItemStack itemStack, boolean dropAround, boolean traceItem) {		return (EntityItem) (master != null ? master.dropItem(itemStack, dropAround, traceItem) : super.dropItem(itemStack, dropAround, traceItem));	}	@Override	public EntityItem superdropItem(Object itemStack, boolean dropAround, boolean traceItem) {		return super.dropItem((ItemStack) itemStack, dropAround, traceItem);	}	@Override	public float getToolDigEfficiency(Block block) {		return master != null ? master.getDigSpeed(block) : super.getToolDigEfficiency(block);	}	@Override	public float supergetToolDigEfficiency(Object block) {		return super.getToolDigEfficiency((Block) block);	}	@Override	public float getBreakSpeed(IBlockState iBlockState, BlockPos blockPos) {		return master != null ? master.getDigSpeed(iBlockState, blockPos) : super.getBreakSpeed(iBlockState, blockPos);	}	@Override	public float supergetDigSpeed(Object iBlockState, Object blockPos) {		return super.getBreakSpeed((IBlockState) iBlockState, (BlockPos) blockPos);	}	@Override	public boolean canHarvestBlock(Block block) {		return master != null ? master.canHarvestBlock(block) : super.canHarvestBlock(block);	}	@Override	public boolean supercanHarvestBlock(Object block) {		return super.canHarvestBlock((Block) block);	}	@Override	public boolean canAttackPlayer(EntityPlayer entityPlayer) {		return master != null ? master.canAttackPlayer(entityPlayer) : super.canAttackPlayer(entityPlayer);	}	@Override	public boolean supercanAttackPlayer(Object entityPlayer) {		return super.canAttackPlayer((EntityPlayer) entityPlayer);	}	@Override	protected void damageArmor(float p_70675_1_) {		if (master != null) master.damageArmor(p_70675_1_);		else super.damageArmor(p_70675_1_);	}	@Override	public void superdamageArmor(float p_70675_1_) {		super.damageArmor(p_70675_1_);	}	@Override	public int getTotalArmorValue() {		return master != null ? master.getTotalArmorValue() : super.getTotalArmorValue();	}	@Override	public int supergetTotalArmorValue() {		return super.getTotalArmorValue();	}	@Override	public float getArmorVisibility() {		return master != null ? master.getArmorVisibility() : super.getArmorVisibility();	}	@Override	public float supergetArmorVisibility() {		return super.getArmorVisibility();	}	@Override	public boolean interactWith(Entity entity) {		return master != null ? master.interactWith(entity) : super.interactWith(entity);	}	@Override	public boolean superinteractWith(Object entity) {		return super.interactWith((Entity) entity);	}	@Override	public ItemStack getCurrentEquippedItem() {		return (ItemStack) (master != null ? master.getHeldItemMainhand() : super.getCurrentEquippedItem());	}	@Override	public ItemStack supergetHeldItemMainhand() {		return super.getCurrentEquippedItem();	}	@Override	public void destroyCurrentEquippedItem() {		if (master != null) master.destroyCurrentEquippedItem();		else super.destroyCurrentEquippedItem();	}	@Override	public void superdestroyCurrentEquippedItem() {		super.destroyCurrentEquippedItem();	}	@Override	public void attackTargetEntityWithCurrentItem(Entity entity) {		if (master != null) master.attackTargetEntityWithCurrentItem(entity);		else super.attackTargetEntityWithCurrentItem(entity);	}	@Override	public void superattackTargetEntityWithCurrentItem(Object entity) {		super.attackTargetEntityWithCurrentItem((Entity) entity);	}	@Override	public GameProfile getGameProfile() {		return (GameProfile) (master != null ? master.getGameProfile() : super.getGameProfile());	}	@Override	public GameProfile supergetGameProfile() {		return super.getGameProfile();	}	@Override	public EnumStatus trySleep(BlockPos blockPos) {		return (EnumStatus) (master != null ? master.trySleep(blockPos) : super.trySleep(blockPos));	}	@Override	public EnumStatus supertrySleep(Object blockPos) {		return super.trySleep((BlockPos) blockPos);	}	@Override	public float getBedOrientationInDegrees() {		return master != null ? master.getBedOrientationInDegrees() : super.getBedOrientationInDegrees();	}	@Override	public float supergetBedOrientationInDegrees() {		return super.getBedOrientationInDegrees();	}	@Override	public boolean isPlayerSleeping() {		return master != null ? master.isPlayerSleeping() : super.isPlayerSleeping();	}	@Override	public boolean superisPlayerSleeping() {		return super.isPlayerSleeping();	}	@Override	public boolean isPlayerFullyAsleep() {		return master != null ? master.isPlayerFullyAsleep() : super.isPlayerFullyAsleep();	}	@Override	public boolean superisPlayerFullyAsleep() {		return super.isPlayerFullyAsleep();	}	@Override	public int getSleepTimer() {		return master != null ? master.getSleepTimer() : super.getSleepTimer();	}	@Override	public int supergetSleepTimer() {		return super.getSleepTimer();	}	@Override	public BlockPos getBedLocation() {		return (BlockPos) (master != null ? master.getBedLocation() : super.getBedLocation());	}	@Override	public BlockPos supergetBedLocation() {		return super.getBedLocation();	}	@Override	public boolean isSpawnForced() {		return master != null ? master.isSpawnForced() : super.isSpawnForced();	}	@Override	public boolean superisSpawnForced() {		return super.isSpawnForced();	}	@Override	public void setSpawnPoint(BlockPos blockPos, boolean forced) {		if (master != null) master.setSpawnPoint(blockPos, forced);		else super.setSpawnPoint(blockPos, forced);	}	@Override	public void supersetSpawnPoint(Object blockPos, boolean forced) {		super.setSpawnPoint((BlockPos) blockPos, forced);	}	@Override	public void triggerAchievement(StatBase statBase) {		if (master != null) master.addStat(statBase);		else super.triggerAchievement(statBase);	}	@Override	public void superaddStat(Object statBase) {		super.triggerAchievement((StatBase) statBase);	}	@Override	public void func_175145_a(StatBase statBase) {		if (master != null) master.takeStat(statBase);		else super.func_175145_a(statBase);	}	@Override	public void supertakeStat(Object statBase) {		super.func_175145_a((StatBase) statBase);	}	@Override	public void jump() {		if (master != null) master.jump();		else super.jump();	}	@Override	public void superjump() {		super.jump();	}	@Override	public float getAIMoveSpeed() {		return master != null ? master.getAIMoveSpeed() : super.getAIMoveSpeed();	}	@Override	public float supergetAIMoveSpeed() {		return super.getAIMoveSpeed();	}	@Override	public void addMovementStat(double p_71000_1_, double p_71000_3_, double p_71000_5_) {		if (master != null) master.addMovementStat(p_71000_1_, p_71000_3_, p_71000_5_);		else super.addMovementStat(p_71000_1_, p_71000_3_, p_71000_5_);	}	@Override	public void superaddMovementStat(double p_71000_1_, double p_71000_3_, double p_71000_5_) {		super.addMovementStat(p_71000_1_, p_71000_3_, p_71000_5_);	}	@Override	protected String getFallSoundString(int damageValue) {		return (String) (master != null ? master.getFallSound(damageValue) : super.getFallSoundString(damageValue));	}	@Override	public String supergetFallSound(int damageValue) {		return super.getFallSoundString(damageValue);	}	@Override	public ItemStack getCurrentArmor(int slotIn) {		return (ItemStack) (master != null ? master.getCurrentArmor(slotIn) : super.getCurrentArmor(slotIn));	}	@Override	public ItemStack supergetCurrentArmor(int slotIn) {		return super.getCurrentArmor(slotIn);	}	@Override	public void addExperience(int amount) {		if (master != null) master.addExperience(amount);		else super.addExperience(amount);	}	@Override	public void superaddExperience(int amount) {		super.addExperience(amount);	}	@Override	public int getXPSeed() {		return master != null ? master.getXPSeed() : super.getXPSeed();	}	@Override	public int supergetXPSeed() {		return super.getXPSeed();	}	@Override	public void removeExperienceLevel(int levels) {		if (master != null) master.onEnchant(null, levels);		else super.removeExperienceLevel(levels);	}	@Override	public void superonEnchant(Object itemStack, int levels) {		super.removeExperienceLevel(levels);	}	@Override	public void addExperienceLevel(int levels) {		if (master != null) master.addExperienceLevel(levels);		else super.addExperienceLevel(levels);	}	@Override	public void superaddExperienceLevel(int levels) {		super.addExperienceLevel(levels);	}	@Override	public int xpBarCap() {		return master != null ? master.xpBarCap() : super.xpBarCap();	}	@Override	public int superxpBarCap() {		return super.xpBarCap();	}	@Override	public void addExhaustion(float p_71020_1_) {		if (master != null) master.addExhaustion(p_71020_1_);		else super.addExhaustion(p_71020_1_);	}	@Override	public void superaddExhaustion(float p_71020_1_) {		super.addExhaustion(p_71020_1_);	}	@Override	public FoodStats getFoodStats() {		return (FoodStats) (master != null ? master.getFoodStats() : super.getFoodStats());	}	@Override	public FoodStats supergetFoodStats() {		return super.getFoodStats();	}	@Override	public boolean canEat(boolean ignoreHunger) {		return master != null ? master.canEat(ignoreHunger) : super.canEat(ignoreHunger);	}	@Override	public boolean supercanEat(boolean ignoreHunger) {		return super.canEat(ignoreHunger);	}	@Override	public boolean shouldHeal() {		return master != null ? master.shouldHeal() : super.shouldHeal();	}	@Override	public boolean supershouldHeal() {		return super.shouldHeal();	}	@Override	public void setItemInUse(ItemStack itemStack, int duration) {		if (master != null) master.setItemInUse(itemStack, duration);		else super.setItemInUse(itemStack, duration);	}	@Override	public void supersetItemInUse(Object itemStack, int duration) {		super.setItemInUse((ItemStack) itemStack, duration);	}	@Override	public boolean isAllowEdit() {		return master != null ? master.isAllowEdit() : super.isAllowEdit();	}	@Override	public boolean superisAllowEdit() {		return super.isAllowEdit();	}	@Override	public boolean canPlayerEdit(BlockPos blockPos, EnumFacing enumFacing, ItemStack itemStack) {		return master != null ? master.canPlayerEdit(blockPos, enumFacing, itemStack) : super.canPlayerEdit(blockPos, enumFacing, itemStack);	}	@Override	public boolean supercanPlayerEdit(Object blockPos, Object enumFacing, Object itemStack) {		return super.canPlayerEdit((BlockPos) blockPos, (EnumFacing) enumFacing, (ItemStack) itemStack);	}	@Override	protected int getExperiencePoints(EntityPlayer entityPlayer) {		return master != null ? master.getExperiencePoints(entityPlayer) : super.getExperiencePoints(entityPlayer);	}	@Override	public int supergetExperiencePoints(Object entityPlayer) {		return super.getExperiencePoints((EntityPlayer) entityPlayer);	}	@Override	protected boolean isPlayer() {		return master != null ? master.isPlayer() : super.isPlayer();	}	@Override	public boolean superisPlayer() {		return super.isPlayer();	}	@Override	public void clonePlayer(EntityPlayer entityPlayer, boolean respawnFromEnd) {		if (master != null) master.clonePlayer(entityPlayer, respawnFromEnd);		else super.clonePlayer(entityPlayer, respawnFromEnd);	}	@Override	public void superclonePlayer(Object entityPlayer, boolean respawnFromEnd) {		super.clonePlayer((EntityPlayer) entityPlayer, respawnFromEnd);	}	@Override	public void setGameType(GameType gameType) {		if (master != null) master.setGameType(gameType);		else super.setGameType(gameType);	}	@Override	public void supersetGameType(Object gameType) {		super.setGameType((GameType) gameType);	}	@Override	public InventoryEnderChest getInventoryEnderChest() {		return (InventoryEnderChest) (master != null ? master.getInventoryEnderChest() : super.getInventoryEnderChest());	}	@Override	public InventoryEnderChest supergetInventoryEnderChest() {		return super.getInventoryEnderChest();	}	@Override	public ItemStack getEquipmentInSlot(int slotIn) {		return (ItemStack) (master != null ? master.getItemStackFromSlot(slotIn) : super.getEquipmentInSlot(slotIn));	}	@Override	public ItemStack supergetItemStackFromSlot(int slotIn) {		return super.getEquipmentInSlot(slotIn);	}	@Override	public ItemStack getHeldItem() {		return (ItemStack) (master != null ? master.getHeldItem() : super.getHeldItem());	}	@Override	public ItemStack supergetHeldItem() {		return super.getHeldItem();	}	@Override	public void supersetCurrentItemOrArmor(int slotIn, Object itemStack) {		super.setCurrentItemOrArmor(slotIn, (ItemStack) itemStack);	}	@Override	public Scoreboard getWorldScoreboard() {		return (Scoreboard) (master != null ? master.getWorldScoreboard() : super.getWorldScoreboard());	}	@Override	public Scoreboard supergetWorldScoreboard() {		return super.getWorldScoreboard();	}	@Override	public Team getTeam() {		return (Team) (master != null ? master.getTeam() : super.getTeam());	}	@Override	public void setAbsorptionAmount(float amount) {		if (master != null) master.setAbsorptionAmount(amount);		else super.setAbsorptionAmount(amount);	}	@Override	public void supersetAbsorptionAmount(float amount) {		super.setAbsorptionAmount(amount);	}	@Override	public float getAbsorptionAmount() {		return master != null ? master.getAbsorptionAmount() : super.getAbsorptionAmount();	}	@Override	public float supergetAbsorptionAmount() {		return super.getAbsorptionAmount();	}	@Override	public boolean canOpen(LockCode lockCode) {		return master != null ? master.canOpen(lockCode) : super.canOpen(lockCode);	}	@Override	public boolean supercanOpen(Object lockCode) {		return super.canOpen((LockCode) lockCode);	}	@Override	public boolean hasReducedDebug() {		return master != null ? master.hasReducedDebug() : super.hasReducedDebug();	}	@Override	public boolean superhasReducedDebug() {		return super.hasReducedDebug();	}	@Override	public void setReducedDebug(boolean reducedDebug) {		if (master != null) master.setReducedDebug(reducedDebug);		else super.setReducedDebug(reducedDebug);	}	@Override	public void supersetReducedDebug(boolean reducedDebug) {		super.setReducedDebug(reducedDebug);	}	@Override	public void openGui(Object mod, int modGuiId, World world, int x, int y, int z) {		if (master != null) master.openGui(mod, modGuiId, world, x, y, z);		else super.openGui(mod, modGuiId, world, x, y, z);	}	@Override	public void superopenGui(Object mod, int modGuiId, Object world, int x, int y, int z) {		super.openGui(mod, modGuiId, (World) world, x, y, z);	}	@Override	public BlockPos getBedLocation(int dimension) {		return (BlockPos) (master != null ? master.getBedLocation(dimension) : super.getBedLocation(dimension));	}	@Override	public BlockPos supergetBedLocation(int dimension) {		return super.getBedLocation(dimension);	}	@Override	public boolean isSpawnForced(int dimension) {		return master != null ? master.isSpawnForced(dimension) : super.isSpawnForced(dimension);	}	@Override	public boolean superisSpawnForced(int dimension) {		return super.isSpawnForced(dimension);	}	@Override	public void setSpawnChunk(BlockPos blockPos, boolean forced, int dimension) {		if (master != null) master.setSpawnChunk(blockPos, forced, dimension);		else super.setSpawnChunk(blockPos, forced, dimension);	}	@Override	public void supersetSpawnChunk(Object blockPos, boolean forced, int dimension) {		super.setSpawnChunk((BlockPos) blockPos, forced, dimension);	}	@Override	public float getDefaultEyeHeight() {		return master != null ? master.getDefaultEyeHeight() : super.getDefaultEyeHeight();	}	@Override	public float supergetDefaultEyeHeight() {		return super.getDefaultEyeHeight();	}	@Override	public String getDisplayNameString() {		return master != null ? master.getDisplayNameString() : super.getDisplayNameString();	}	@Override	public String supergetDisplayNameString() {		return super.getDisplayNameString();	}	@Override	public void refreshDisplayName() {		if (master != null) master.refreshDisplayName();		else super.refreshDisplayName();	}	@Override	public void superrefreshDisplayName() {		super.refreshDisplayName();	}	@Override	public boolean canBreatheUnderwater() {		return master != null ? master.canBreatheUnderwater() : super.canBreatheUnderwater();	}	@Override	public boolean supercanBreatheUnderwater() {		return super.canBreatheUnderwater();	}	@Override	public boolean isChild() {		return master != null ? master.isChild() : super.isChild();	}	@Override	public boolean superisChild() {		return super.isChild();	}	@Override	protected void onDeathUpdate() {		if (master != null) master.onDeathUpdate();		else super.onDeathUpdate();	}	@Override	public void superonDeathUpdate() {		super.onDeathUpdate();	}	@Override	protected int decreaseAirSupply(int p_70682_1_) {		return master != null ? master.decreaseAirSupply(p_70682_1_) : super.decreaseAirSupply(p_70682_1_);	}	@Override	public int superdecreaseAirSupply(int p_70682_1_) {		return super.decreaseAirSupply(p_70682_1_);	}	@Override	public Random getRNG() {		return master != null ? master.getRNG() : super.getRNG();	}	@Override	public Random supergetRNG() {		return super.getRNG();	}	@Override	public EntityLivingBase getAITarget() {		return (EntityLivingBase) (master != null ? master.getRevengeTarget() : super.getAITarget());	}	@Override	public EntityLivingBase supergetRevengeTarget() {		return super.getAITarget();	}	@Override	public int getRevengeTimer() {		return master != null ? master.getRevengeTimer() : super.getRevengeTimer();	}	@Override	public int supergetRevengeTimer() {		return super.getRevengeTimer();	}	@Override	public void setRevengeTarget(EntityLivingBase entityLivingBase) {		if (master != null) master.setRevengeTarget(entityLivingBase);		else super.setRevengeTarget(entityLivingBase);	}	@Override	public void supersetRevengeTarget(Object entityLivingBase) {		super.setRevengeTarget((EntityLivingBase) entityLivingBase);	}	@Override	public EntityLivingBase getLastAttacker() {		return (EntityLivingBase) (master != null ? master.getLastAttackedEntity() : super.getLastAttacker());	}	@Override	public EntityLivingBase supergetLastAttackedEntity() {		return super.getLastAttacker();	}	@Override	public int getLastAttackerTime() {		return master != null ? master.getLastAttackedEntityTime() : super.getLastAttackerTime();	}	@Override	public int supergetLastAttackedEntityTime() {		return super.getLastAttackerTime();	}	@Override	public void setLastAttacker(Entity entity) {		if (master != null) master.setLastAttackedEntity(entity);		else super.setLastAttacker(entity);	}	@Override	public void supersetLastAttackedEntity(Object entity) {		super.setLastAttacker((Entity) entity);	}	@Override	public int getAge() {		return master != null ? master.getIdleTime() : super.getAge();	}	@Override	public int supergetIdleTime() {		return super.getAge();	}	@Override	protected void updatePotionEffects() {		if (master != null) master.updatePotionEffects();		else super.updatePotionEffects();	}	@Override	public void superupdatePotionEffects() {		super.updatePotionEffects();	}	@Override	public void clearActivePotions() {		if (master != null) master.clearActivePotions();		else super.clearActivePotions();	}	@Override	public void superclearActivePotions() {		super.clearActivePotions();	}	@Override	public Collection getActivePotionEffects() {		return (Collection) (master != null ? master.getActivePotionEffects() : super.getActivePotionEffects());	}	@Override	public Collection supergetActivePotionEffects() {		return super.getActivePotionEffects();	}	@Override	public boolean isPotionActive(int p_82165_1_) {		return master != null ? master.isPotionActive(p_82165_1_) : super.isPotionActive(p_82165_1_);	}	@Override	public boolean superisPotionActive(int p_82165_1_) {		return super.isPotionActive(p_82165_1_);	}	@Override	public boolean isPotionActive(Potion potion) {		return master != null ? master.isPotionActive(potion) : super.isPotionActive(potion);	}	@Override	public boolean superisPotionActive(Object potion) {		return super.isPotionActive((Potion) potion);	}	@Override	public PotionEffect getActivePotionEffect(Potion potion) {		return (PotionEffect) (master != null ? master.getActivePotionEffect(potion) : super.getActivePotionEffect(potion));	}	@Override	public PotionEffect supergetActivePotionEffect(Object potion) {		return super.getActivePotionEffect((Potion) potion);	}	@Override	public void addPotionEffect(PotionEffect potionEffect) {		if (master != null) master.addPotionEffect(potionEffect);		else super.addPotionEffect(potionEffect);	}	@Override	public void superaddPotionEffect(Object potionEffect) {		super.addPotionEffect((PotionEffect) potionEffect);	}	@Override	public boolean isPotionApplicable(PotionEffect potionEffect) {		return master != null ? master.isPotionApplicable(potionEffect) : super.isPotionApplicable(potionEffect);	}	@Override	public boolean superisPotionApplicable(Object potionEffect) {		return super.isPotionApplicable((PotionEffect) potionEffect);	}	@Override	public boolean isEntityUndead() {		return master != null ? master.isEntityUndead() : super.isEntityUndead();	}	@Override	public boolean superisEntityUndead() {		return super.isEntityUndead();	}	@Override	public void removePotionEffectClient(int p_70618_1_) {		if (master != null) master.removePotionEffectClient(p_70618_1_);		else super.removePotionEffectClient(p_70618_1_);	}	@Override	public void superremovePotionEffectClient(int p_70618_1_) {		super.removePotionEffectClient(p_70618_1_);	}	@Override	public void removePotionEffect(int p_82170_1_) {		if (master != null) master.removePotionEffect(p_82170_1_);		else super.removePotionEffect(p_82170_1_);	}	@Override	public void superremovePotionEffect(int p_82170_1_) {		super.removePotionEffect(p_82170_1_);	}	@Override	protected void onNewPotionEffect(PotionEffect potionEffect) {		if (master != null) master.onNewPotionEffect(potionEffect);		else super.onNewPotionEffect(potionEffect);	}	@Override	public void superonNewPotionEffect(Object potionEffect) {		super.onNewPotionEffect((PotionEffect) potionEffect);	}	@Override	protected void onChangedPotionEffect(PotionEffect potionEffect, boolean p_70695_2_) {		if (master != null) master.onChangedPotionEffect(potionEffect, p_70695_2_);		else super.onChangedPotionEffect(potionEffect, p_70695_2_);	}	@Override	public void superonChangedPotionEffect(Object potionEffect, boolean p_70695_2_) {		super.onChangedPotionEffect((PotionEffect) potionEffect, p_70695_2_);	}	@Override	protected void onFinishedPotionEffect(PotionEffect potionEffect) {		if (master != null) master.onFinishedPotionEffect(potionEffect);		else super.onFinishedPotionEffect(potionEffect);	}	@Override	public void superonFinishedPotionEffect(Object potionEffect) {		super.onFinishedPotionEffect((PotionEffect) potionEffect);	}	@Override	public void renderBrokenItemStack(ItemStack itemStack) {		if (master != null) master.renderBrokenItemStack(itemStack);		else super.renderBrokenItemStack(itemStack);	}	@Override	public void superrenderBrokenItemStack(Object itemStack) {		super.renderBrokenItemStack((ItemStack) itemStack);	}	@Override	protected void dropEquipment(boolean p_82160_1_, int p_82160_2_) {		if (master != null) master.dropEquipment(p_82160_1_, p_82160_2_);		else super.dropEquipment(p_82160_1_, p_82160_2_);	}	@Override	public void superdropEquipment(boolean p_82160_1_, int p_82160_2_) {		super.dropEquipment(p_82160_1_, p_82160_2_);	}	@Override	public void knockBack(Entity entity, float p_70653_2_, double p_70653_3_, double p_70653_5_) {		if (master != null) master.knockBack(entity, p_70653_2_, p_70653_3_, p_70653_5_);		else super.knockBack(entity, p_70653_2_, p_70653_3_, p_70653_5_);	}	@Override	public void superknockBack(Object entity, float p_70653_2_, double p_70653_3_, double p_70653_5_) {		super.knockBack((Entity) entity, p_70653_2_, p_70653_3_, p_70653_5_);	}	@Override	protected void dropFewItems(boolean p_70628_1_, int p_70628_2_) {		if (master != null) master.dropFewItems(p_70628_1_, p_70628_2_);		else super.dropFewItems(p_70628_1_, p_70628_2_);	}	@Override	public void superdropFewItems(boolean p_70628_1_, int p_70628_2_) {		super.dropFewItems(p_70628_1_, p_70628_2_);	}	@Override	public boolean isOnLadder() {		return master != null ? master.isOnLadder() : super.isOnLadder();	}	@Override	public boolean superisOnLadder() {		return super.isOnLadder();	}	@Override	protected float applyArmorCalculations(DamageSource damageSource, float p_70655_2_) {		return (Float) (master != null ? master.applyArmorCalculations(damageSource, p_70655_2_) : super.applyArmorCalculations(damageSource, p_70655_2_));	}	@Override	public Object superapplyArmorCalculations(Object damageSource, float p_70655_2_) {		return super.applyArmorCalculations((DamageSource) damageSource, p_70655_2_);	}	@Override	protected float applyPotionDamageCalculations(DamageSource damageSource, float p_70672_2_) {		return (Float) (master != null ? master.applyPotionDamageCalculations(damageSource, p_70672_2_) : super.applyPotionDamageCalculations(damageSource, p_70672_2_));	}	@Override	public Object superapplyPotionDamageCalculations(Object damageSource, float p_70672_2_) {		return super.applyPotionDamageCalculations((DamageSource) damageSource, p_70672_2_);	}	@Override	public CombatTracker getCombatTracker() {		return (CombatTracker) (master != null ? master.getCombatTracker() : super.getCombatTracker());	}	@Override	public CombatTracker supergetCombatTracker() {		return super.getCombatTracker();	}	@Override	public EntityLivingBase func_94060_bK() {		return (EntityLivingBase) (master != null ? master.getAttackingEntity() : super.func_94060_bK());	}	@Override	public EntityLivingBase supergetAttackingEntity() {		return super.func_94060_bK();	}	@Override	protected void updateArmSwingProgress() {		if (master != null) master.updateArmSwingProgress();		else super.updateArmSwingProgress();	}	@Override	public void superupdateArmSwingProgress() {		super.updateArmSwingProgress();	}	@Override	public IAttributeInstance getEntityAttribute(IAttribute iAttribute) {		return (IAttributeInstance) (master != null ? master.getEntityAttribute(iAttribute) : super.getEntityAttribute(iAttribute));	}	@Override	public IAttributeInstance supergetEntityAttribute(Object iAttribute) {		return super.getEntityAttribute((IAttribute) iAttribute);	}	@Override	public BaseAttributeMap getAttributeMap() {		return (BaseAttributeMap) (master != null ? master.getAttributeMap() : super.getAttributeMap());	}	@Override	public BaseAttributeMap supergetAttributeMap() {		return super.getAttributeMap();	}	@Override	protected float getSoundVolume() {		return master != null ? master.getSoundVolume() : super.getSoundVolume();	}	@Override	public float supergetSoundVolume() {		return super.getSoundVolume();	}	@Override	protected float getSoundPitch() {		return master != null ? master.getSoundPitch() : super.getSoundPitch();	}	@Override	public float supergetSoundPitch() {		return super.getSoundPitch();	}	@Override	public void dismountEntity(Entity entity) {		if (master != null) master.dismountEntity(entity);		else super.dismountEntity(entity);	}	@Override	public void superdismountEntity(Object entity) {		super.dismountEntity((Entity) entity);	}	@Override	protected void updateAITick() {		if (master != null) master.handleJumpWater();		else super.updateAITick();	}	@Override	public void superhandleJumpWater() {		super.updateAITick();	}	@Override	public void setAIMoveSpeed(float p_70659_1_) {		if (master != null) master.setAIMoveSpeed(p_70659_1_);		else super.setAIMoveSpeed(p_70659_1_);	}	@Override	public void supersetAIMoveSpeed(float p_70659_1_) {		super.setAIMoveSpeed(p_70659_1_);	}	@Override	public boolean attackEntityAsMob(Entity entity) {		return master != null ? master.attackEntityAsMob(entity) : super.attackEntityAsMob(entity);	}	@Override	public boolean superattackEntityAsMob(Object entity) {		return super.attackEntityAsMob((Entity) entity);	}	@Override	protected float func_110146_f(float p_110146_1_, float p_110146_2_) {		return master != null ? master.updateDistance(p_110146_1_, p_110146_2_) : super.func_110146_f(p_110146_1_, p_110146_2_);	}	@Override	public float superupdateDistance(float p_110146_1_, float p_110146_2_) {		return super.func_110146_f(p_110146_1_, p_110146_2_);	}	@Override	protected void collideWithNearbyEntities() {		if (master != null) master.collideWithNearbyEntities();		else super.collideWithNearbyEntities();	}	@Override	public void supercollideWithNearbyEntities() {		super.collideWithNearbyEntities();	}	@Override	protected void collideWithEntity(Entity entity) {		if (master != null) master.collideWithEntity(entity);		else super.collideWithEntity(entity);	}	@Override	public void supercollideWithEntity(Object entity) {		super.collideWithEntity((Entity) entity);	}	@Override	public void setJumping(boolean p_70637_1_) {		if (master != null) master.setJumping(p_70637_1_);		else super.setJumping(p_70637_1_);	}	@Override	public void supersetJumping(boolean p_70637_1_) {		super.setJumping(p_70637_1_);	}	@Override	public void onItemPickup(Entity entity, int p_71001_2_) {		if (master != null) master.onItemPickup(entity, p_71001_2_);		else super.onItemPickup(entity, p_71001_2_);	}	@Override	public void superonItemPickup(Object entity, int p_71001_2_) {		super.onItemPickup((Entity) entity, p_71001_2_);	}	@Override	public boolean canEntityBeSeen(Entity entity) {		return master != null ? master.canEntityBeSeen(entity) : super.canEntityBeSeen(entity);	}	@Override	public boolean supercanEntityBeSeen(Object entity) {		return super.canEntityBeSeen((Entity) entity);	}	@Override	public float getSwingProgress(float p_70678_1_) {		return master != null ? master.getSwingProgress(p_70678_1_) : super.getSwingProgress(p_70678_1_);	}	@Override	public float supergetSwingProgress(float p_70678_1_) {		return super.getSwingProgress(p_70678_1_);	}	@Override	public boolean isOnSameTeam(EntityLivingBase entityLivingBase) {		return master != null ? master.isOnSameTeam(entityLivingBase) : super.isOnSameTeam(entityLivingBase);	}	@Override	public boolean isOnTeam(Team team) {		return master != null ? master.isOnTeam(team) : super.isOnTeam(team);	}	@Override	public boolean superisOnTeam(Object team) {		return super.isOnTeam((Team) team);	}	@Override	public void curePotionEffects(ItemStack itemStack) {		if (master != null) master.curePotionEffects(itemStack);		else super.curePotionEffects(itemStack);	}	@Override	public void supercurePotionEffects(Object itemStack) {		super.curePotionEffects((ItemStack) itemStack);	}	@Override	public boolean shouldRiderFaceForward(EntityPlayer entityPlayer) {		return master != null ? master.shouldRiderFaceForward(entityPlayer) : super.shouldRiderFaceForward(entityPlayer);	}	@Override	public boolean supershouldRiderFaceForward(Object entityPlayer) {		return super.shouldRiderFaceForward((EntityPlayer) entityPlayer);	}	//	@Override	public void superfunc_92015_f() {	}	@Override	public void superincrementStat(Object statBase, int par2) {	}	@Override	public void superfunc_110322_i() {	}	@Override	public void superfunc_142020_c(String par1Str) {	}	@Override	public float supergetFOVMultiplier() {		return 0.0F;	}	@Override	public void superdisplayGUIEditSign(Object tileEntity) {	}	@Override	public void superdisplayGUIHopper(Object tileEntityHopper) {	}	@Override	public void superdisplayGUIHopperMinecart(Object entityMinecartHopper) {	}	@Override	public void superdisplayGUIWorkbench(int par1, int par2, int par3) {	}	@Override	public void superdisplayGUIEnchantment(int par1, int par2, int par3, String par4Str) {	}	@Override	public void superdisplayGUIAnvil(int par1, int par2, int par3) {	}	@Override	public void superdisplayGUIFurnace(Object tileEntityFurnace) {	}	@Override	public void superdisplayGUIBrewingStand(Object tileEntityBrewingStand) {	}	@Override	public void superdisplayGUIBeacon(Object tileEntityBeacon) {	}	@Override	public void superdisplayGUIDispenser(Object tileEntityDispenser) {	}	@Override	public void superdisplayGUIMerchant(Object iMerchant, String par2Str) {	}	@Override	public void supersendMessage(String par1Str) {	}	@Override	public void supersendChatToPlayer(Object chatMessageComponent) {	}	@Override	public Object supergetPlayerCoordinates() {		return null;	}	@Override	public boolean superisClientWorld() {		return false;	}	@Override	public void supersetupCustomSkin() {	}	@Override	public Object supergetTextureSkin() {		return null;	}	@Override	public Object supergetTextureCape() {		return null;	}	@Override	public Object superdropPlayerItem(Object itemStack) {		return null;	}	@Override	public float supergetCurrentPlayerStrVsBlock(Object block, boolean par2) {		return 0.0F;	}	@Override	public float supergetCurrentPlayerStrVsBlock(Object block, boolean par2, int meta) {		return 0.0F;	}	@Override	public Object supersleepInBedAt(int par1, int par2, int par3) {		return null;	}	@Override	public boolean supergetHideCape(int par1) {		return false;	}	@Override	public void supersetHideCape(int par1, boolean par2) {	}	@Override	public void supersetSpawnChunk(Object chunkCoordinates, boolean par2) {	}	@Override	public Object supergetItemIcon(Object itemStack, int par2) {		return null;	}	@Override	public boolean superisCurrentToolAdventureModeExempt(int par1, int par2, int par3) {		return false;	}	@Override	public boolean supercanPlayerEdit(int par1, int par2, int par3, int par4, Object itemStack) {		return false;	}	@Override	public String supergetEntityName() {		return null;	}	@Override	public Object supergetCurrentItemOrArmor(int par1) {		return null;	}	@Override	public boolean supergetHideCape() {		return false;	}	@Override	public int superfunc_142015_aE() {		return -1;	}	@Override	public void superdropRareDrop(int par1) {	}	@Override	public Object superfunc_110142_aN() {		return null;	}	@Override	public boolean superisAIEnabled() {		return false;	}	@Override	public void superupdateAITasks() {	}	@Override	public Object supergetPosition(float par1) {		return null;	}	@Override	public boolean superhandleLavaMovement() {		return false;	}	@Override	public boolean superisInRangeToRenderVec3D(Object vec3) {		return false;	}	@Override	public boolean supershouldExplodeBlock(Object explosion, Object world, int par3, int par4, int par5, int par6, float par7) {		return false;	}	@Override	public void supercloseScreenNoPacket() {	}	@Override	public void superfunc_146100_a(Object tileEntity) {	}	@Override	public void superfunc_146095_a(Object commandBlockLogic) {	}	@Override	public void superfunc_146093_a(Object tileEntityHopper) {	}	@Override	public void superfunc_146104_a(Object tileEntityBeacon) {	}	@Override	public void superfunc_146102_a(Object tileEntityDispenser) {	}	@Override	public void superfunc_146098_a(Object tileEntityBrewingStand) {	}	@Override	public void superfunc_146101_a(Object tileEntityFurnace) {	}	@Override	public float supergetBreakSpeed(Object block, boolean p_146096_2_, int meta) {		return 0.0F;	}	@Override	public float supergetBreakSpeed(Object block, boolean p_146096_2_, int meta, int x, int y, int z) {		return 0.0F;	}	@Override	public String superfunc_146067_o(int p_146067_1_) {		return null;	}	@Override	public void superfunc_152121_a(Object type, Object resourceLocation) {	}	@Override	public void superheal(int par1) {	}	@Override	public void superdamageEntity(Object damageSource, int par2) {	}	@Override	public boolean superfunc_71066_bF() {		return false;	}	@Override	public void supersendChatToPlayer(String par1Str) {	}	@Override	public void superalertWolves(Object entityLiving, boolean par2) {	}	@Override	public void superdamageArmor(int par1) {	}	@Override	public void superfunc_82162_bC() {	}	@Override	public boolean supercanCurrentToolHarvestBlock(int par1, int par2, int par3) {		return false;	}	@Override	public boolean superfunc_94062_bN() {		return false;	}	@Override	public boolean supercanPickUpLoot() {		return false;	}	@Override	public Object supergetTranslator() {		return null;	}	@Override	public String supertranslateString(String par1Str, Object... par2ArrayOfObj) {		return null;	}	@Override	public int superfunc_96121_ay() {		return 0;	}	@Override	public Object supergetLookHelper() {		return null;	}	@Override	public Object supergetMoveHelper() {		return null;	}	@Override	public Object supergetJumpHelper() {		return null;	}	@Override	public Object supergetNavigator() {		return null;	}	@Override	public Object supergetEntitySenses() {		return null;	}	@Override	public Object supergetLastAttackingEntity() {		return null;	}	@Override	public void supersetLastAttackingEntity(Object entity) {	}	@Override	public Object supergetAttackTarget() {		return null;	}	@Override	public void supersetAttackTarget(Object entityLiving) {	}	@Override	public boolean supercanAttackClass(Class par1Class) {		return false;	}	@Override	public void supereatGrassBonus() {	}	@Override	public boolean superisWithinHomeDistanceCurrentPosition() {		return false;	}	@Override	public boolean superisWithinHomeDistance(int par1, int par2, int par3) {		return false;	}	@Override	public void supersetHomeArea(int par1, int par2, int par3, int par4) {	}	@Override	public Object supergetHomePosition() {		return null;	}	@Override	public float supergetMaximumHomeDistance() {		return 0;	}	@Override	public void superdetachHome() {	}	@Override	public boolean superhasHome() {		return false;	}	@Override	public int supergetTalkInterval() {		return 0;	}	@Override	public void superplayLivingSound() {	}	@Override	public void superspawnExplosionParticle() {	}	@Override	public void supersetEntityHealth(int par1) {	}	@Override	public Object superapplyArmorCalculations(Object damageSource, int par2) {		return 0;	}	@Override	public Object superapplyPotionDamageCalculations(Object damageSource, int par2) {		return 0;	}	@Override	public String supergetLivingSound() {		return null;	}	@Override	public void superknockBack(Object entity, int par2, double par3, double par5) {	}	@Override	public int supergetDropItemId() {		return 0;	}	@Override	public void supersetMoveForward(float par1) {	}	@Override	public boolean supercanDespawn() {		return false;	}	@Override	public void superdespawnEntity() {	}	@Override	public int supergetVerticalFaceSpeed() {		return 0;	}	@Override	public void superfaceEntity(Object entity, float par2, float par3) {	}	@Override	public boolean supergetCanSpawnHere() {		return false;	}	@Override	public float supergetRenderSizeModifier() {		return 0;	}	@Override	public int supergetMaxSpawnedInChunk() {		return 0;	}	@Override	public void superonChangedPotionEffect(Object potionEffect) {	}	@Override	public float supergetSpeedModifier() {		return 0;	}	@Override	public void superinitCreature() {	}	@Override	public boolean supercanBeSteered() {		return false;	}	@Override	public void superfunc_94058_c(String par1Str) {	}	@Override	public String superfunc_94057_bL() {		return null;	}	@Override	public boolean superfunc_94056_bM() {		return false;	}	@Override	public void superfunc_96120_a(int par1, float par2) {	}	@Override	public void supersetCanPickUpLoot(boolean par1) {	}	@Override	public Object supergetItemStackFromSlot(Object par1) {		return null;	}	@Override	public void supersetNoAI(boolean par1) {	}	@Override	public boolean superisNoDespawnRequired() {		return false;	}	@Override	public Object superfropItemWithOffset(Object item, int p_145778_2_, float p_145778_3_) {		return null;	}	@Override	public void superswingArm(Object enumHand) {	}	@Override	public void superopenBook(Object itemStack, Object enumHand) {	}	@Override	public Object superinteract(Object entity, Object itemStack, Object enumHand) {		return null;	}	@Override	public void superdropLoot(boolean p_184610_1_, int p_184610_2_, Object damageSource) {	}	@Override	public void superfrostWalk(Object blockPos) {	}	@Override	public void superplayEquipSound(Object itemStack) {	}	@Override	public Object superremoveActivePotionEffect(Object potion) {		return null;	}	@Override	public void superremovePotionEffect(Object potion) {	}	@Override	public void superplayHurtSound(Object damageSource) {	}	@Override	public void superdamageShield(float p_184590_1_) {	}	@Override	public Object supergetHeldItemOffhand() {		return null;	}	@Override	public Object supergetHeldItem(Object enumHand) {		return null;	}	@Override	public void supersetHeldItem(Object enumHand, Object itemStack) {	}	@Override	public Object supergetActiveHand() {		return null;	}	@Override	public void superupdateActiveHand() {	}	@Override	public void supersetActiveHand(Object enumHand) {	}	@Override	public Object supergetActiveItemStack() {		return null;	}	@Override	public int supergetItemInUseMaxCount() {		return -1;	}	@Override	public void superstopActiveHand() {	}	@Override	public void superresetActiveHand() {	}	@Override	public boolean superisActiveItemStackBlocking() {		return false;	}	@Override	public boolean superisElytraFlying() {		return false;	}	@Override	public int supergetTicksElytraFlying() {		return -1;	}	public boolean superteleportTo_(double x, double y, double z) {		return false;	}	@Override	public boolean supercanBeHitWithPotion() {		return false;	}	@Override	public void superplayStepSound(int par1, int par2, int par3, Object par4) {	}	@Override	public void supersetServerBrand(String brand) {	}	@Override	public String supergetServerBrand() {		return null;	}	@Override	public int supergetPermissionLevel() {		return -1;	}	@Override	public void supersetPermissionLevel(int p_184839_1_) {	}	@Override	public void superdisplayGuiCommandBlock(Object tileEntityCommandBlock) {	}	@Override	public boolean superisRowingBoat() {		return false;	}	@Override	public boolean superisCreative() {		return false;	}	@Override	public boolean superisPlayerInfoSet() {		return false;	}	@Override	public Object supergetLocationElytra() {		return null;	}	@Override	public Object supercreateCooldownTracker() {		return null;	}	@Override	public void superupdateSize() {	}	@Override	public void superspawnSweepParticles() {	}	@Override	public boolean superhasAchievement(Object achievement) {		return false;	}	@Override	public Object supergetPrimaryHand() {		return null;	}	@Override	public void supersetPrimaryHand(Object enumHandSide) {	}	@Override	public float supergetCooldownPeriod() {		return 0.0F;	}	@Override	public float supergetCooledAttackStrength(float adjustTicks) {		return 0.0F;	}	@Override	public void superresetCooldown() {	}	@Override	public Object supergetCooldownTracker() {		return null;	}	@Override	public float supergetLuck() {		return 0.0F;	}	@Override	public void superaddPrefix(Object iTextComponent) {	}	@Override	public void superaddSuffix(Object iTextComponent) {	}	@Override	public Object supergetPrefixes() {		return null;	}	@Override	public Object supergetSuffixes() {		return null;	}	@Override	public void supersetMaxHealth(Object floatOrInt) {		getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(Modchu_CastHelper.Double(floatOrInt, 0.0D, false));	}	@Override	public boolean superattemptTeleport(double x, double y, double z) {		return false;	}	@Override	public String supergetCachedUniqueIdString() {		return null;	}	// TODO Modchu_Entity ??R?s?[???i?????G???[????L??j	@Override	public Object getFreeVariable(String s) {		return master.getFreeVariable(s);	}	@Override	public void setFreeVariable(String s, Object o) {		master.setFreeVariable(s, o);	}	@Override	protected void entityInit() {		Modchu_EntityHelper.getInstance().entityInit(this);	}	@Override	public void superentityInit() {		super.entityInit();	}	@Override	public void readEntityFromNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.readEntityFromNBT(nBTTagCompound);	}	@Override	public void superreadEntityFromNBT(Object nBTTagCompound) {	}	@Override	public void writeEntityToNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.writeEntityToNBT(nBTTagCompound);	}	@Override	public void superwriteEntityToNBT(Object nBTTagCompound) {	}	@Override	public int getEntityId() {		return master != null ? master.getEntityId() : super.getEntityId();	}	@Override	public int supergetEntityId() {		return super.getEntityId();	}	@Override	public void setEntityId(int p_145769_1_) {		if (master != null) master.setEntityId(p_145769_1_);		else super.setEntityId(p_145769_1_);	}	@Override	public void supersetEntityId(int p_145769_1_) {		super.setEntityId(p_145769_1_);	}	@Override	public DataWatcher getDataWatcher() {		return (DataWatcher) (master != null ? master.getDataManager() : super.getDataWatcher());	}	@Override	public DataWatcher supergetDataManager() {		return super.getDataWatcher();	}	@Override	public void preparePlayerToSpawn() {		if (master != null) master.preparePlayerToSpawn();		else super.preparePlayerToSpawn();	}	@Override	public void superpreparePlayerToSpawn() {		super.preparePlayerToSpawn();	}	@Override	public void setDead() {		if (master != null) master.setDead();		else super.setDead();	}	@Override	public void supersetDead() {		super.setDead();	}	@Override	protected void setSize(float p_70105_1_, float p_70105_2_) {		if (master != null) master.setSize(p_70105_1_, p_70105_2_);		else super.setSize(p_70105_1_, p_70105_2_);	}	@Override	public void supersetSize(float p_70105_1_, float p_70105_2_) {		super.setSize(p_70105_1_, p_70105_2_);	}	@Override	protected void setRotation(float p_70101_1_, float p_70101_2_) {		if (master != null) master.setRotation(p_70101_1_, p_70101_2_);		else super.setRotation(p_70101_1_, p_70101_2_);	}	@Override	public void supersetRotation(float p_70101_1_, float p_70101_2_) {		super.setRotation(p_70101_1_, p_70101_2_);	}	@Override	public void setPosition(double p_70107_1_, double p_70107_3_, double p_70107_5_) {		if (master != null) master.setPosition(p_70107_1_, p_70107_3_, p_70107_5_);		else super.setPosition(p_70107_1_, p_70107_3_, p_70107_5_);	}	@Override	public void supersetPosition(double p_70107_1_, double p_70107_3_, double p_70107_5_) {		super.setPosition(p_70107_1_, p_70107_3_, p_70107_5_);	}	@Override	public void setAngles(float p_70082_1_, float p_70082_2_) {		if (master != null) master.turn(p_70082_1_, p_70082_2_);		else super.setAngles(p_70082_1_, p_70082_2_);	}	@Override	public void superturn(float p_70082_1_, float p_70082_2_) {		super.setAngles(p_70082_1_, p_70082_2_);	}	@Override	public void onUpdate() {		if (master != null) master.onUpdate();	}	@Override	public void superonUpdate() {		super.onUpdate();	}	@Override	public void onEntityUpdate() {		if (master != null) master.onEntityUpdate();		else super.onEntityUpdate();	}	@Override	public void superonEntityUpdate() {		super.onEntityUpdate();	}	@Override	public int getMaxInPortalTime() {		return master != null ? master.getMaxInPortalTime() : super.getMaxInPortalTime();	}	@Override	public int supergetMaxInPortalTime() {		return super.getMaxInPortalTime();	}	@Override	protected void setOnFireFromLava() {		if (master != null) master.setOnFireFromLava();		else super.setOnFireFromLava();	}	@Override	public void supersetOnFireFromLava() {		super.setOnFireFromLava();	}	@Override	public void setFire(int p_70015_1_) {		if (master != null) master.setFire(p_70015_1_);		else super.setFire(p_70015_1_);	}	@Override	public void supersetFire(int p_70015_1_) {		super.setFire(p_70015_1_);	}	@Override	public void extinguish() {		if (master != null) master.extinguish();		else super.extinguish();	}	@Override	public void superextinguish() {		super.extinguish();	}	@Override	protected void kill() {		if (master != null) master.outOfWorld();		else super.kill();	}	@Override	public void superoutOfWorld() {		super.kill();	}	@Override	public boolean isOffsetPositionInLiquid(double p_70038_1_, double p_70038_3_, double p_70038_5_) {		return master != null ? master.isOffsetPositionInLiquid(p_70038_1_, p_70038_3_, p_70038_5_) : super.isOffsetPositionInLiquid(p_70038_1_, p_70038_3_, p_70038_5_);	}	@Override	public boolean superisOffsetPositionInLiquid(double p_70038_1_, double p_70038_3_, double p_70038_5_) {		return super.isOffsetPositionInLiquid(p_70038_1_, p_70038_3_, p_70038_5_);	}	@Override	public void moveEntity(double p_70091_1_, double p_70091_3_, double p_70091_5_) {		if (master != null) master.move(null, p_70091_1_, p_70091_3_, p_70091_5_);		else super.moveEntity(p_70091_1_, p_70091_3_, p_70091_5_);	}	@Override	public void supermove(Object moverType, double p_70091_1_, double p_70091_3_, double p_70091_5_) {		super.moveEntity(p_70091_1_, p_70091_3_, p_70091_5_);	}	@Override	protected String getSwimSound() {		return (String) (master != null ? master.getSwimSound() : super.getSwimSound());	}	@Override	public String supergetSwimSound() {		return super.getSwimSound();	}	@Override	public void playSound(String p_85030_1_, float p_85030_2_, float p_85030_3_) {		if (master != null) master.playSound(p_85030_1_, p_85030_2_, p_85030_3_);		else super.playSound(p_85030_1_, p_85030_2_, p_85030_3_);	}	@Override	public void superplaySound(Object p_85030_1_, float p_85030_2_, float p_85030_3_) {		super.playSound((String) p_85030_1_, p_85030_2_, p_85030_3_);	}	@Override	protected boolean canTriggerWalking() {		return master != null ? master.canTriggerWalking() : super.canTriggerWalking();	}	@Override	public boolean supercanTriggerWalking() {		return super.canTriggerWalking();	}	@Override	protected void dealFireDamage(int p_70081_1_) {		if (master != null) master.dealFireDamage(p_70081_1_);		else super.dealFireDamage(p_70081_1_);	}	@Override	public void superdealFireDamage(int p_70081_1_) {		super.dealFireDamage(p_70081_1_);	}	@Override	public boolean isWet() {		return master != null ? master.isWet() : super.isWet();	}	@Override	public boolean superisWet() {		return super.isWet();	}	@Override	public boolean isInWater() {		return master != null ? master.isInWater() : super.isInWater();	}	@Override	public boolean superisInWater() {		return super.isInWater();	}	@Override	public boolean handleWaterMovement() {		return master != null ? master.handleWaterMovement() : super.handleWaterMovement();	}	@Override	public boolean superhandleWaterMovement() {		return super.handleWaterMovement();	}	@Override	protected String getSplashSound() {		return (String) (master != null ? master.getSplashSound() : super.getSplashSound());	}	@Override	public String supergetSplashSound() {		return super.getSplashSound();	}	@Override	public boolean isInsideOfMaterial(Material material) {		return master != null ? master.isInsideOfMaterial(material) : super.isInsideOfMaterial(material);	}	@Override	public boolean superisInsideOfMaterial(Object material) {		return super.isInsideOfMaterial((Material) material);	}	@Override	public float getEyeHeight() {		return master != null ? master.getEyeHeight() : super.getEyeHeight();	}	@Override	public float supergetEyeHeight() {		return super.getEyeHeight();	}	@Override	public void moveFlying(float p_70060_1_, float p_70060_2_, float p_70060_3_) {		if (master != null) master.moveRelative(p_70060_1_, p_70060_2_, p_70060_3_, 0.0F);		else super.moveFlying(p_70060_1_, p_70060_2_, p_70060_3_);	}	@Override	public void supermoveRelative(float p_70060_1_, float p_70060_2_, float p_70060_3_, float f3) {		super.moveFlying(p_70060_1_, p_70060_2_, p_70060_3_);	}	@Override	public int getBrightnessForRender(float p_70070_1_) {		return master != null ? master.getBrightnessForRender(p_70070_1_) : super.getBrightnessForRender(p_70070_1_);	}	@Override	public int supergetBrightnessForRender(float p_70070_1_) {		return super.getBrightnessForRender(p_70070_1_);	}	@Override	public float getBrightness(float p_70013_1_) {		return master != null ? master.getBrightness(p_70013_1_) : super.getBrightness(p_70013_1_);	}	@Override	public float supergetBrightness(float p_70013_1_) {		return super.getBrightness(p_70013_1_);	}	@Override	public void setWorld(World world) {		if (master != null) master.setWorld(world);		else super.setWorld(world);	}	@Override	public void supersetWorld(Object world) {		super.setWorld((World) world);	}	@Override	public void setPositionAndRotation(double p_70080_1_, double p_70080_3_, double p_70080_5_, float p_70080_7_, float p_70080_8_) {		if (master != null) master.setPositionAndRotation(p_70080_1_, p_70080_3_, p_70080_5_, p_70080_7_, p_70080_8_);		else super.setPositionAndRotation(p_70080_1_, p_70080_3_, p_70080_5_, p_70080_7_, p_70080_8_);	}	@Override	public void supersetPositionAndRotation(double p_70080_1_, double p_70080_3_, double p_70080_5_, float p_70080_7_, float p_70080_8_) {		super.setPositionAndRotation(p_70080_1_, p_70080_3_, p_70080_5_, p_70080_7_, p_70080_8_);	}	@Override	public void setLocationAndAngles(double p_70012_1_, double p_70012_3_, double p_70012_5_, float p_70012_7_, float p_70012_8_) {		if (master != null) master.setLocationAndAngles(p_70012_1_, p_70012_3_, p_70012_5_, p_70012_7_, p_70012_8_);		else super.setLocationAndAngles(p_70012_1_, p_70012_3_, p_70012_5_, p_70012_7_, p_70012_8_);	}	@Override	public void supersetLocationAndAngles(double p_70012_1_, double p_70012_3_, double p_70012_5_, float p_70012_7_, float p_70012_8_) {		super.setLocationAndAngles(p_70012_1_, p_70012_3_, p_70012_5_, p_70012_7_, p_70012_8_);	}	@Override	public float getDistanceToEntity(Entity entity) {		return master != null ? master.getDistanceToEntity(entity) : super.getDistanceToEntity(entity);	}	@Override	public float supergetDistanceToEntity(Object entity) {		return super.getDistanceToEntity((Entity) entity);	}	@Override	public double getDistanceSq(double p_70092_1_, double p_70092_3_, double p_70092_5_) {		return master != null ? master.getDistanceSq(p_70092_1_, p_70092_3_, p_70092_5_) : super.getDistanceSq(p_70092_1_, p_70092_3_, p_70092_5_);	}	@Override	public double supergetDistanceSq(double p_70092_1_, double p_70092_3_, double p_70092_5_) {		return super.getDistanceSq(p_70092_1_, p_70092_3_, p_70092_5_);	}	@Override	public double getDistance(double p_70011_1_, double p_70011_3_, double p_70011_5_) {		return master != null ? master.getDistance(p_70011_1_, p_70011_3_, p_70011_5_) : super.getDistance(p_70011_1_, p_70011_3_, p_70011_5_);	}	@Override	public double supergetDistance(double p_70011_1_, double p_70011_3_, double p_70011_5_) {		return super.getDistance(p_70011_1_, p_70011_3_, p_70011_5_);	}	@Override	public double getDistanceSqToEntity(Entity entity) {		return master != null ? master.getDistanceSqToEntity(entity) : super.getDistanceSqToEntity(entity);	}	@Override	public double supergetDistanceSqToEntity(Object entity) {		return super.getDistanceSqToEntity((Entity) entity);	}	@Override	public void onCollideWithPlayer(EntityPlayer entityPlayer) {		if (master != null) master.onCollideWithPlayer(entityPlayer);		else super.onCollideWithPlayer(entityPlayer);	}	@Override	public void superonCollideWithPlayer(Object entityPlayer) {		super.onCollideWithPlayer((EntityPlayer) entityPlayer);	}	@Override	public void applyEntityCollision(Entity entity) {		if (master != null) master.applyEntityCollision(entity);		else super.applyEntityCollision(entity);	}	@Override	public void superapplyEntityCollision(Object entity) {		super.applyEntityCollision((Entity) entity);	}	@Override	public void addVelocity(double p_70024_1_, double p_70024_3_, double p_70024_5_) {		if (master != null) master.addVelocity(p_70024_1_, p_70024_3_, p_70024_5_);		else super.addVelocity(p_70024_1_, p_70024_3_, p_70024_5_);	}	@Override	public void superaddVelocity(double p_70024_1_, double p_70024_3_, double p_70024_5_) {		super.addVelocity(p_70024_1_, p_70024_3_, p_70024_5_);	}	@Override	protected void setBeenAttacked() {		if (master != null) master.setBeenAttacked();		else super.setBeenAttacked();	}	@Override	public void supersetBeenAttacked() {		super.setBeenAttacked();	}	@Override	public boolean attackEntityFrom(DamageSource damageSource, float p_70097_2_) {		return master != null ? master.attackEntityFrom(damageSource, p_70097_2_) : super.attackEntityFrom(damageSource, p_70097_2_);	}	@Override	public boolean superattackEntityFrom(Object damageSource, Object p_70097_2_) {		return super.attackEntityFrom((DamageSource) damageSource, (Float) p_70097_2_);	}	@Override	public boolean canBeCollidedWith() {		return master != null ? master.canBeCollidedWith() : super.canBeCollidedWith();	}	@Override	public boolean supercanBeCollidedWith() {		return super.canBeCollidedWith();	}	@Override	public boolean canBePushed() {		return master != null ? master.canBePushed() : super.canBePushed();	}	@Override	public boolean supercanBePushed() {		return super.canBePushed();	}	@Override	public void addToPlayerScore(Entity entity, int p_70084_2_) {		if (master != null) master.awardKillScore(entity, p_70084_2_, null);		else super.addToPlayerScore(entity, p_70084_2_);	}	@Override	public void superawardKillScore(Object entity, int p_70084_2_, Object damageSource) {		super.addToPlayerScore((Entity) entity, p_70084_2_);	}	@Override	public boolean isInRangeToRender3d(double p_145770_1_, double p_145770_3_, double p_145770_5_) {		return master != null ? master.isInRangeToRender3d(p_145770_1_, p_145770_3_, p_145770_5_) : super.isInRangeToRender3d(p_145770_1_, p_145770_3_, p_145770_5_);	}	@Override	public boolean superisInRangeToRender3d(double p_145770_1_, double p_145770_3_, double p_145770_5_) {		return super.isInRangeToRender3d(p_145770_1_, p_145770_3_, p_145770_5_);	}	@Override	public boolean isInRangeToRenderDist(double p_70112_1_) {		return master != null ? master.isInRangeToRenderDist(p_70112_1_) : super.isInRangeToRenderDist(p_70112_1_);	}	@Override	public boolean superisInRangeToRenderDist(double p_70112_1_) {		return super.isInRangeToRenderDist(p_70112_1_);	}	@Override	public boolean writeMountToNBT(NBTTagCompound nBTTagCompound) {		return master != null ? master.writeToNBTAtomically(nBTTagCompound) : super.writeMountToNBT(nBTTagCompound);	}	@Override	public boolean superwriteToNBTAtomically(Object nBTTagCompound) {		return super.writeMountToNBT((NBTTagCompound) nBTTagCompound);	}	@Override	public boolean writeToNBTOptional(NBTTagCompound nBTTagCompound) {		return master != null ? master.writeToNBTOptional(nBTTagCompound) : super.writeToNBTOptional(nBTTagCompound);	}	@Override	public boolean superwriteToNBTOptional(Object nBTTagCompound) {		return super.writeToNBTOptional((NBTTagCompound) nBTTagCompound);	}	@Override	public void writeToNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.writeToNBT(nBTTagCompound);		else super.writeToNBT(nBTTagCompound);	}	@Override	public Object superwriteToNBT(Object nBTTagCompound) {		super.writeToNBT((NBTTagCompound) nBTTagCompound);		return nBTTagCompound;	}	@Override	public void readFromNBT(NBTTagCompound nBTTagCompound) {		if (master != null) master.readFromNBT(nBTTagCompound);		else super.readFromNBT(nBTTagCompound);	}	@Override	public void superreadFromNBT(Object nBTTagCompound) {		super.readFromNBT((NBTTagCompound) nBTTagCompound);	}	@Override	protected boolean shouldSetPosAfterLoading() {		return master != null ? master.shouldSetPosAfterLoading() : super.shouldSetPosAfterLoading();	}	@Override	public boolean supershouldSetPosAfterLoading() {		return super.shouldSetPosAfterLoading();	}	@Override	public void onChunkLoad() {		if (master != null) master.onChunkLoad();		else super.onChunkLoad();	}	@Override	public void superonChunkLoad() {		super.onChunkLoad();	}	@Override	protected NBTTagList newDoubleNBTList(double... p_70087_1_) {		return (NBTTagList) (master != null ? master.newDoubleNBTList(p_70087_1_) : super.newDoubleNBTList(p_70087_1_));	}	@Override	public NBTTagList supernewDoubleNBTList(double... p_70087_1_) {		return super.newDoubleNBTList(p_70087_1_);	}	@Override	protected NBTTagList newFloatNBTList(float... p_70049_1_) {		return (NBTTagList) (master != null ? master.newFloatNBTList(p_70049_1_) : super.newFloatNBTList(p_70049_1_));	}	@Override	public NBTTagList supernewFloatNBTList(float... p_70049_1_) {		return super.newFloatNBTList(p_70049_1_);	}	@Override	public EntityItem dropItem(Item item, int p_145779_2_) {		return (EntityItem) (master != null ? master.dropItem(item, p_145779_2_) : super.dropItem(item, p_145779_2_));	}	@Override	public EntityItem superdropItem(Object item, int p_145779_2_) {		return super.dropItem((Item) item, p_145779_2_);	}	@Override	public EntityItem entityDropItem(ItemStack itemStack, float p_70099_2_) {		return (EntityItem) (master != null ? master.entityDropItem(itemStack, p_70099_2_) : super.entityDropItem(itemStack, p_70099_2_));	}	@Override	public EntityItem superentityDropItem(Object itemStack, float p_70099_2_) {		return super.entityDropItem((ItemStack) itemStack, p_70099_2_);	}	@Override	public boolean isEntityAlive() {		return master != null ? master.isEntityAlive() : super.isEntityAlive();	}	@Override	public boolean superisEntityAlive() {		return super.isEntityAlive();	}	@Override	public boolean isEntityInsideOpaqueBlock() {		return master != null ? master.isEntityInsideOpaqueBlock() : super.isEntityInsideOpaqueBlock();	}	@Override	public boolean interactFirst(EntityPlayer entityPlayer) {		return master != null ? master.processInitialInteract(entityPlayer) : super.interactFirst(entityPlayer);	}	@Override	public boolean superprocessInitialInteract(Object entityPlayer) {		return super.interactFirst((EntityPlayer) entityPlayer);	}	@Override	public AxisAlignedBB getCollisionBox(Entity entity) {		return (AxisAlignedBB) (master != null ? master.getCollisionBox(entity) : super.getCollisionBox(entity));	}	@Override	public AxisAlignedBB supergetCollisionBox(Object entity) {		return super.getCollisionBox((Entity) entity);	}	@Override	public void updateRidden() {		if (master != null) master.updateRidden();		else super.updateRidden();	}	@Override	public void updateRiderPosition() {		if (master != null) master.updatePassenger();		else super.updateRiderPosition();	}	@Override	public void superupdatePassenger() {		super.updateRiderPosition();	}	@Override	public double getYOffset() {		return master != null ? master.getYOffset() : super.getYOffset();	}	@Override	public double supergetYOffset() {		return super.getYOffset();	}	@Override	public double getMountedYOffset() {		return master != null ? master.getMountedYOffset() : super.getMountedYOffset();	}	@Override	public double supergetMountedYOffset() {		return super.getMountedYOffset();	}	@Override	public void mountEntity(Entity entity) {		if (master != null) master.startRiding(entity);		else super.mountEntity(entity);	}	@Override	public boolean superstartRiding(Object entity) {		super.mountEntity((Entity) entity);		return true;	}	@Override	public float getCollisionBorderSize() {		return master != null ? master.getCollisionBorderSize() : super.getCollisionBorderSize();	}	@Override	public float supergetCollisionBorderSize() {		return super.getCollisionBorderSize();	}	@Override	public Vec3 getLookVec() {		return (Vec3) (master != null ? master.getLookVec() : super.getLookVec());	}	@Override	public Vec3 supergetLookVec() {		return super.getLookVec();	}	@Override	public void supersetInPortal() {	}	@Override	public int getPortalCooldown() {		return master != null ? master.getPortalCooldown() : super.getPortalCooldown();	}	@Override	public int supergetPortalCooldown() {		return super.getPortalCooldown();	}	@Override	public void setVelocity(double p_70016_1_, double p_70016_3_, double p_70016_5_) {		if (master != null) master.setVelocity(p_70016_1_, p_70016_3_, p_70016_5_);		else super.setVelocity(p_70016_1_, p_70016_3_, p_70016_5_);	}	@Override	public void supersetVelocity(double p_70016_1_, double p_70016_3_, double p_70016_5_) {		super.setVelocity(p_70016_1_, p_70016_3_, p_70016_5_);	}	@Override	public void performHurtAnimation() {		if (master != null) master.performHurtAnimation();		else super.performHurtAnimation();	}	@Override	public void superperformHurtAnimation() {		super.performHurtAnimation();	}	@Override	public void setCurrentItemOrArmor(int p_70062_1_, ItemStack itemStack) {		if (master != null) master.setItemStackToSlot(p_70062_1_, itemStack);	}	@Override	public void supersetItemStackToSlot(int p_70062_1_, Object itemStack) {	}	@Override	public boolean isBurning() {		return master != null ? master.isBurning() : super.isBurning();	}	@Override	public boolean superisBurning() {		return super.isBurning();	}	@Override	public boolean isRiding() {		return master != null ? master.isRiding() : super.isRiding();	}	@Override	public boolean superisRiding() {		return super.isRiding();	}	@Override	public boolean isSneaking() {		return master != null ? master.isSneaking() : super.isSneaking();	}	@Override	public boolean superisSneaking() {		return super.isSneaking();	}	@Override	public void setSneaking(boolean p_70095_1_) {		if (master != null) master.setSneaking(p_70095_1_);		else super.setSneaking(p_70095_1_);	}	@Override	public void supersetSneaking(boolean p_70095_1_) {		super.setSneaking(p_70095_1_);	}	@Override	public boolean isSprinting() {		return master != null ? master.isSprinting() : super.isSprinting();	}	@Override	public boolean superisSprinting() {		return super.isSprinting();	}	@Override	public void setSprinting(boolean p_70031_1_) {		if (master != null) master.setSprinting(p_70031_1_);		else super.setSprinting(p_70031_1_);	}	@Override	public void supersetSprinting(boolean p_70031_1_) {		super.setSprinting(p_70031_1_);	}	@Override	public boolean isInvisible() {		return master != null ? master.isInvisible() : super.isInvisible();	}	@Override	public boolean superisInvisible() {		return super.isInvisible();	}	@Override	public boolean isInvisibleToPlayer(EntityPlayer entityPlayer) {		return master != null ? master.isInvisibleToPlayer(entityPlayer) : super.isInvisibleToPlayer(entityPlayer);	}	@Override	public boolean superisInvisibleToPlayer(Object entityPlayer) {		return super.isInvisibleToPlayer((EntityPlayer) entityPlayer);	}	@Override	public void setInvisible(boolean p_82142_1_) {		if (master != null) master.setInvisible(p_82142_1_);		else super.setInvisible(p_82142_1_);	}	@Override	public void supersetInvisible(boolean p_82142_1_) {		super.setInvisible(p_82142_1_);	}	@Override	public boolean isEating() {		return master != null ? master.isEating() : super.isEating();	}	@Override	public boolean superisEating() {		return super.isEating();	}	@Override	public void setEating(boolean p_70019_1_) {		if (master != null) master.setEating(p_70019_1_);		else super.setEating(p_70019_1_);	}	@Override	public void supersetEating(boolean p_70019_1_) {		super.setEating(p_70019_1_);	}	@Override	protected boolean getFlag(int p_70083_1_) {		return master != null ? master.getFlag(p_70083_1_) : super.getFlag(p_70083_1_);	}	@Override	public boolean supergetFlag(int p_70083_1_) {		return super.getFlag(p_70083_1_);	}	@Override	protected void setFlag(int p_70052_1_, boolean p_70052_2_) {		if (master != null) master.setFlag(p_70052_1_, p_70052_2_);		else super.setFlag(p_70052_1_, p_70052_2_);	}	@Override	public void supersetFlag(int p_70052_1_, boolean p_70052_2_) {		super.setFlag(p_70052_1_, p_70052_2_);	}	@Override	public int getAir() {		return master != null ? master.getAir() : super.getAir();	}	@Override	public int supergetAir() {		return super.getAir();	}	@Override	public void setAir(int p_70050_1_) {		if (master != null) master.setAir(p_70050_1_);		else super.setAir(p_70050_1_);	}	@Override	public void supersetAir(int p_70050_1_) {		super.setAir(p_70050_1_);	}	@Override	public void onStruckByLightning(EntityLightningBolt entityLightningBolt) {		if (master != null) master.onStruckByLightning(entityLightningBolt);		else super.onStruckByLightning(entityLightningBolt);	}	@Override	public void superonStruckByLightning(Object entityLightningBolt) {		super.onStruckByLightning((EntityLightningBolt) entityLightningBolt);	}	@Override	public void onKillEntity(EntityLivingBase entityLivingBase) {		if (master != null) master.onKillEntity(entityLivingBase);		else super.onKillEntity(entityLivingBase);	}	@Override	public void superonKillEntity(Object entityLivingBase) {		super.onKillEntity((EntityLivingBase) entityLivingBase);	}	@Override	public void setInWeb() {		if (master != null) master.setInWeb();		else super.setInWeb();	}	@Override	public void supersetInWeb() {		super.setInWeb();	}	@Override	public Entity[] getParts() {		return (Entity[]) (master != null ? master.getParts() : super.getParts());	}	@Override	public Entity[] supergetParts() {		return super.getParts();	}	@Override	public boolean isEntityEqual(Entity entity) {		return master != null ? master.isEntityEqual(entity) : super.isEntityEqual(entity);	}	@Override	public boolean superisEntityEqual(Object entity) {		return super.isEntityEqual((Entity) entity);	}	@Override	public float getRotationYawHead() {		return master != null ? master.getRotationYawHead() : super.getRotationYawHead();	}	@Override	public float supergetRotationYawHead() {		return super.getRotationYawHead();	}	@Override	public void setRotationYawHead(float p_70034_1_) {		if (master != null) master.setRotationYawHead(p_70034_1_);		else super.setRotationYawHead(p_70034_1_);	}	@Override	public void supersetRotationYawHead(float p_70034_1_) {		super.setRotationYawHead(p_70034_1_);	}	@Override	public boolean canAttackWithItem() {		return master != null ? master.canBeAttackedWithItem() : super.canAttackWithItem();	}	@Override	public boolean supercanBeAttackedWithItem() {		return super.canAttackWithItem();	}	@Override	public boolean hitByEntity(Entity entity) {		return master != null ? master.hitByEntity(entity) : super.hitByEntity(entity);	}	@Override	public boolean superhitByEntity(Object entity) {		return super.hitByEntity((Entity) entity);	}	@Override	public String toString() {		return master != null ? master.toString() : super.toString();	}	@Override	public String supertoString() {		return super.toString();	}	@Override	public void copyLocationAndAnglesFrom(Entity entity) {		if (master != null) master.copyLocationAndAnglesFrom(entity);		else super.copyLocationAndAnglesFrom(entity);	}	@Override	public void supercopyLocationAndAnglesFrom(Object entity) {		super.copyLocationAndAnglesFrom((Entity) entity);	}	@Override	public void travelToDimension(int p_71027_1_) {		if (master != null) master.changeDimension(p_71027_1_);		else super.travelToDimension(p_71027_1_);	}	@Override	public Object superchangeDimension(int p_71027_1_) {		super.travelToDimension(p_71027_1_);		return this;	}	@Override	public boolean doesEntityNotTriggerPressurePlate() {		return master != null ? master.doesEntityNotTriggerPressurePlate() : super.doesEntityNotTriggerPressurePlate();	}	@Override	public boolean superdoesEntityNotTriggerPressurePlate() {		return super.doesEntityNotTriggerPressurePlate();	}	@Override	public void addEntityCrashInfo(CrashReportCategory crashReportCategory) {		if (master != null) master.addEntityCrashInfo(crashReportCategory);		else super.addEntityCrashInfo(crashReportCategory);	}	@Override	public void superaddEntityCrashInfo(Object crashReportCategory) {		super.addEntityCrashInfo((CrashReportCategory) crashReportCategory);	}	@Override	public boolean canRenderOnFire() {		return master != null ? master.canRenderOnFire() : super.canRenderOnFire();	}	@Override	public boolean supercanRenderOnFire() {		return super.canRenderOnFire();	}	@Override	public UUID getUniqueID() {		return master != null ? master.getUniqueID() : super.getUniqueID();	}	@Override	public UUID supergetUniqueID() {		return super.getUniqueID();	}	@Override	public boolean isPushedByWater() {		return master != null ? master.isPushedByWater() : super.isPushedByWater();	}	@Override	public boolean superisPushedByWater() {		return super.isPushedByWater();	}	@Override	public NBTTagCompound getEntityData() {		return (NBTTagCompound) (master != null ? master.getEntityData() : super.getEntityData());	}	@Override	public NBTTagCompound supergetEntityData() {		return super.getEntityData();	}	@Override	public boolean shouldRiderSit() {		return master != null ? master.shouldRiderSit() : super.shouldRiderSit();	}	@Override	public boolean supershouldRiderSit() {		return super.shouldRiderSit();	}	@Override	public ItemStack getPickedResult(MovingObjectPosition movingObjectPosition) {		return (ItemStack) (master != null ? master.getPickedResult(movingObjectPosition) : super.getPickedResult(movingObjectPosition));	}	@Override	public ItemStack supergetPickedResult(Object movingObjectPosition) {		return super.getPickedResult((MovingObjectPosition) movingObjectPosition);	}	@Override	public UUID getPersistentID() {		return master != null ? master.getPersistentID() : super.getPersistentID();	}	@Override	public UUID supergetPersistentID() {		return super.getPersistentID();	}	@Override	public boolean shouldRenderInPass(int pass) {		return master != null ? master.shouldRenderInPass(pass) : super.shouldRenderInPass(pass);	}	@Override	public boolean supershouldRenderInPass(int pass) {		return super.shouldRenderInPass(pass);	}	@Override	public boolean isCreatureType(EnumCreatureType enumCreatureType, boolean forSpawnCount) {		return master != null ? master.isCreatureType(enumCreatureType, forSpawnCount) : super.isCreatureType(enumCreatureType, forSpawnCount);	}	@Override	public boolean superisCreatureType(Object enumCreatureType, boolean forSpawnCount) {		return super.isCreatureType((EnumCreatureType) enumCreatureType, forSpawnCount);	}	@Override	public String registerExtendedProperties(String identifier, IExtendedEntityProperties iExtendedEntityProperties) {		return master != null ? master.registerExtendedProperties(identifier, iExtendedEntityProperties) : super.registerExtendedProperties(identifier, iExtendedEntityProperties);	}	@Override	public String superregisterExtendedProperties(String identifier, Object iExtendedEntityProperties) {		return super.registerExtendedProperties(identifier, (IExtendedEntityProperties) iExtendedEntityProperties);	}	@Override	public IExtendedEntityProperties getExtendedProperties(String identifier) {		return (IExtendedEntityProperties) (master != null ? master.getExtendedProperties(identifier) : super.getExtendedProperties(identifier));	}	@Override	public IExtendedEntityProperties supergetExtendedProperties(String identifier) {		return super.getExtendedProperties(identifier);	}	@Override	public boolean canRiderInteract() {		return master != null ? master.canRiderInteract() : super.canRiderInteract();	}	@Override	public boolean supercanRiderInteract() {		return super.canRiderInteract();	}	@Override	public boolean shouldDismountInWater(Entity entity) {		return master != null ? master.shouldDismountInWater(entity) : super.shouldDismountInWater(entity);	}	@Override	public boolean supershouldDismountInWater(Object entity) {		return super.shouldDismountInWater((Entity) entity);	}	// 180~	@Override	public void onKillCommand() {		if (master != null) master.onKillCommand();		else super.onKillCommand();	}	@Override	public void superonKillCommand() {		super.onKillCommand();	}	@Override	protected void doBlockCollisions() {		if (master != null) master.doBlockCollisions();		else super.doBlockCollisions();	}	@Override	public void superdoBlockCollisions() {		super.doBlockCollisions();	}	@Override	protected void playStepSound(BlockPos blockPos, Block block) {		if (master != null) master.playStepSound(blockPos, block);		else super.playStepSound(blockPos, block);	}	@Override	public void superplayStepSound(Object blockPos, Object block) {		super.playStepSound((BlockPos) blockPos, (Block) block);	}	@Override	public boolean isSilent() {		return master != null ? master.isSilent() : super.isSilent();	}	@Override	public boolean superisSilent() {		return super.isSilent();	}	@Override	public void setSilent(boolean isSilent) {		if (master != null) master.setSilent(isSilent);		else super.setSilent(isSilent);	}	@Override	public void supersetSilent(boolean isSilent) {		super.setSilent(isSilent);	}	@Override	public void fall(float distance, float damageMultiplier) {		if (master != null) master.fall(distance, damageMultiplier);		else super.fall(distance, damageMultiplier);	}	@Override	public void superfall(float distance, float damageMultiplier) {		super.fall(distance, damageMultiplier);	}	@Override	protected void resetHeight() {		if (master != null) master.doWaterSplashEffect();		else super.resetHeight();	}	@Override	public void superdoWaterSplashEffect() {		super.resetHeight();	}	@Override	public void spawnRunningParticles() {		if (master != null) master.spawnRunningParticles();		else super.spawnRunningParticles();	}	@Override	public void superspawnRunningParticles() {		super.spawnRunningParticles();	}	@Override	protected void createRunningParticles() {		if (master != null) master.createRunningParticles();		else super.createRunningParticles();	}	@Override	public void supercreateRunningParticles() {		super.createRunningParticles();	}	@Override	public boolean isInLava() {		return master != null ? master.isInLava() : super.isInLava();	}	@Override	public boolean superisInLava() {		return super.isInLava();	}	@Override	public void moveToBlockPosAndAngles(BlockPos blockPos, float p_174828_2_, float p_174828_3_) {		if (master != null) master.moveToBlockPosAndAngles(blockPos, p_174828_2_, p_174828_3_);		else super.moveToBlockPosAndAngles(blockPos, p_174828_2_, p_174828_3_);	}	@Override	public void supermoveToBlockPosAndAngles(Object blockPos, float p_174828_2_, float p_174828_3_) {		super.moveToBlockPosAndAngles((BlockPos) blockPos, p_174828_2_, p_174828_3_);	}	@Override	public double getDistanceSq(BlockPos blockPos) {		return master != null ? master.getDistanceSq(blockPos) : super.getDistanceSq(blockPos);	}	@Override	public double supergetDistanceSq(Object blockPos) {		return super.getDistanceSq((BlockPos) blockPos);	}	@Override	public double getDistanceSqToCenter(BlockPos blockPos) {		return master != null ? master.getDistanceSqToCenter(blockPos) : super.getDistanceSqToCenter(blockPos);	}	@Override	public double supergetDistanceSqToCenter(Object blockPos) {		return super.getDistanceSqToCenter((BlockPos) blockPos);	}	@Override	public Vec3 getLook(float p_70676_1_) {		return (Vec3) (master != null ? master.getLook(p_70676_1_) : super.getLook(p_70676_1_));	}	@Override	public Vec3 supergetLook(float p_70676_1_) {		return super.getLook(p_70676_1_);	}	@Override	public Vec3 getPositionEyes(float p_174824_1_) {		return (Vec3) (master != null ? master.getPositionEyes(p_174824_1_) : super.getPositionEyes(p_174824_1_));	}	@Override	public Vec3 supergetPositionEyes(float p_174824_1_) {		return super.getPositionEyes(p_174824_1_);	}	@Override	public MovingObjectPosition rayTrace(double p_174822_1_, float p_174822_3_) {		return (MovingObjectPosition) (master != null ? master.rayTrace(p_174822_1_, p_174822_3_) : super.rayTrace(p_174822_1_, p_174822_3_));	}	@Override	public MovingObjectPosition superrayTrace(double p_174822_1_, float p_174822_3_) {		return super.rayTrace(p_174822_1_, p_174822_3_);	}	@Override	public EntityItem dropItemWithOffset(Item item, int size, float p_145778_3_) {		return (EntityItem) (master != null ? master.dropItemWithOffset(item, size, p_145778_3_) : super.dropItemWithOffset(item, size, p_145778_3_));	}	@Override	public EntityItem superdropItemWithOffset(Object item, int size, float p_145778_3_) {		return super.dropItemWithOffset((Item) item, size, p_145778_3_);	}	@Override	public ItemStack[] getInventory() {		return (ItemStack[]) (master != null ? master.getInventory() : null);	}	@Override	public ItemStack[] supergetInventory() {		return null;	}	@Override	protected boolean pushOutOfBlocks(double x, double y, double z) {		return master != null ? master.pushOutOfBlocks(x, y, z) : super.pushOutOfBlocks(x, y, z);	}	@Override	public boolean superpushOutOfBlocks(double x, double y, double z) {		return super.pushOutOfBlocks(x, y, z);	}	@Override	public String getName() {		return master != null ? master.getName() : super.getName();	}	@Override	public boolean isEntityInvulnerable(DamageSource damageSource) {		return master != null ? master.isEntityInvulnerable(damageSource) : super.isEntityInvulnerable(damageSource);	}	@Override	public boolean superisEntityInvulnerable(Object damageSource) {		return super.isEntityInvulnerable((DamageSource) damageSource);	}	@Override	public void copyDataFromOld(Entity entity) {		if (master != null) master.copyDataFromOld(entity);		else super.copyDataFromOld(entity);	}	@Override	public void supercopyDataFromOld(Object entity) {		super.copyDataFromOld((Entity) entity);	}	@Override	public float getExplosionResistance(Explosion explosion, World world, BlockPos blockPos, IBlockState iBlockState) {		return master != null ? master.getExplosionResistance(explosion, world, blockPos, iBlockState) : super.getExplosionResistance(explosion, world, blockPos, iBlockState);	}	@Override	public float supergetExplosionResistance(Object explosion, Object world, Object blockPos, Object iBlockState) {		return super.getExplosionResistance((Explosion) explosion, (World) world, (BlockPos) blockPos, (IBlockState) iBlockState);	}	@Override	public int getMaxFallHeight() {		return master != null ? master.getMaxFallHeight() : super.getMaxFallHeight();	}	@Override	public int supergetMaxFallHeight() {		return super.getMaxFallHeight();	}	@Override	public IChatComponent getDisplayName() {		return (IChatComponent) (master != null ? master.getDisplayName() : super.getDisplayName());	}	@Override	public IChatComponent supergetDisplayName() {		return super.getDisplayName();	}	@Override	public void setCustomNameTag(String p_96094_1_) {		if (master != null) master.setCustomNameTag(p_96094_1_);		else super.setCustomNameTag(p_96094_1_);	}	@Override	public void supersetCustomNameTag(String p_96094_1_) {		super.setCustomNameTag(p_96094_1_);	}	@Override	public String getCustomNameTag() {		return master != null ? master.getCustomNameTag() : super.getCustomNameTag();	}	@Override	public String supergetCustomNameTag() {		return super.getCustomNameTag();	}	@Override	public boolean hasCustomName() {		return master != null ? master.hasCustomName() : super.hasCustomName();	}	@Override	public boolean superhasCustomName() {		return super.hasCustomName();	}	@Override	public void setAlwaysRenderNameTag(boolean p_174805_1_) {		if (master != null) master.setAlwaysRenderNameTag(p_174805_1_);		else super.setAlwaysRenderNameTag(p_174805_1_);	}	@Override	public void supersetAlwaysRenderNameTag(boolean p_174805_1_) {		super.setAlwaysRenderNameTag(p_174805_1_);	}	@Override	public boolean getAlwaysRenderNameTag() {		return master != null ? master.getAlwaysRenderNameTag() : super.getAlwaysRenderNameTag();	}	@Override	public boolean supergetAlwaysRenderNameTag() {		return super.getAlwaysRenderNameTag();	}	@Override	public void setPositionAndUpdate(double x, double y, double z) {		if (master != null) master.setPositionAndUpdate(x, y, z);		else super.setPositionAndUpdate(x, y, z);	}	@Override	public void supersetPositionAndUpdate(double x, double y, double z) {		super.setPositionAndUpdate(x, y, z);	}	@Override	public boolean getAlwaysRenderNameTagForRender() {		return master != null ? master.getAlwaysRenderNameTagForRender() : super.getAlwaysRenderNameTagForRender();	}	@Override	public boolean supergetAlwaysRenderNameTagForRender() {		return super.getAlwaysRenderNameTagForRender();	}	@Override	public EnumFacing getHorizontalFacing() {		return (EnumFacing) (master != null ? master.getHorizontalFacing() : super.getHorizontalFacing());	}	@Override	public EnumFacing supergetHorizontalFacing() {		return super.getHorizontalFacing();	}	@Override	public AxisAlignedBB getEntityBoundingBox() {		return (AxisAlignedBB) (master != null ? master.getEntityBoundingBox() : super.getEntityBoundingBox());	}	@Override	public AxisAlignedBB supergetEntityBoundingBox() {		return super.getEntityBoundingBox();	}	@Override	public void setEntityBoundingBox(AxisAlignedBB axisAlignedBB) {		if (master != null) master.setEntityBoundingBox(axisAlignedBB);		else super.setEntityBoundingBox(axisAlignedBB);	}	@Override	public void supersetEntityBoundingBox(Object axisAlignedBB) {		super.setEntityBoundingBox((AxisAlignedBB) axisAlignedBB);	}	@Override	public boolean isOutsideBorder() {		return master != null ? master.isOutsideBorder() : super.isOutsideBorder();	}	@Override	public boolean superisOutsideBorder() {		return super.isOutsideBorder();	}	@Override	public void setOutsideBorder(boolean p_174821_1_) {		if (master != null) master.setOutsideBorder(p_174821_1_);		else super.setOutsideBorder(p_174821_1_);	}	@Override	public void supersetOutsideBorder(boolean p_174821_1_) {		super.setOutsideBorder(p_174821_1_);	}	@Override	public boolean replaceItemInInventory(int p_174820_1_, ItemStack itemStack) {		return master != null ? master.replaceItemInInventory(p_174820_1_, itemStack) : super.replaceItemInInventory(p_174820_1_, itemStack);	}	@Override	public boolean superreplaceItemInInventory(int p_174820_1_, Object itemStack) {		return super.replaceItemInInventory(p_174820_1_, (ItemStack) itemStack);	}	@Override	public void addChatMessage(IChatComponent iChatComponent) {		if (master != null) master.sendMessage(iChatComponent);		else super.addChatMessage(iChatComponent);	}	@Override	public void supersendMessage(Object iChatComponent) {		super.addChatMessage((IChatComponent) iChatComponent);	}	@Override	public BlockPos getPosition() {		return (BlockPos) (master != null ? master.getPosition() : super.getPosition());	}	@Override	public BlockPos supergetPosition() {		return super.getPosition();	}	@Override	public Vec3 getPositionVector() {		return (Vec3) (master != null ? master.getPositionVector() : super.getPositionVector());	}	@Override	public Vec3 supergetPositionVector() {		return super.getPositionVector();	}	@Override	public World getEntityWorld() {		return (World) (master != null ? master.getEntityWorld() : super.getEntityWorld());	}	@Override	public World supergetEntityWorld() {		return super.getEntityWorld();	}	@Override	public Entity getCommandSenderEntity() {		return (Entity) (master != null ? master.getCommandSenderEntity() : super.getCommandSenderEntity());	}	@Override	public Entity supergetCommandSenderEntity() {		return super.getCommandSenderEntity();	}	@Override	public boolean sendCommandFeedback() {		return master != null ? master.sendCommandFeedback() : super.sendCommandFeedback();	}	@Override	public boolean supersendCommandFeedback() {		return super.sendCommandFeedback();	}	@Override	public void setCommandStat(Type type, int amount) {		if (master != null) master.setCommandStat(type, amount);		else super.setCommandStat(type, amount);	}	@Override	public void supersetCommandStat(Object type, int amount) {		super.setCommandStat((Type) type, amount);	}	@Override	public void func_174817_o(Entity entity) {		if (master != null) master.setCommandStats(entity);		else super.func_174817_o(entity);	}	@Override	public void supersetCommandStats(Object entity) {		super.func_174817_o((Entity) entity);	}	// ~164	@Override	public void superplayStepSound(int par1, int par2, int par3, int par4) {	}	@Override	public boolean superisInRangeToRender3d(Object vec3) {		return false;	}	@Override	public Object superdropItem(int par1, int par2) {		return null;	}	@Override	public Object superdropItemWithOffset(int par1, int par2, float par3) {		return null;	}	@Override	public float supergetBlockExplosionResistance(Object explosion, Object world, int par3, int par4, int par5, Object block) {		return 0;	}	@Override	public boolean supershouldExplodeBlock(Object explosion, Object world, int par3, int par4, int par5, Object par6, float par7) {		return false;	}	@Override	public String supergetTranslatedEntityName() {		return null;	}	// ~179	@Override	public void superfunc_145780_a(int p_145780_1_, int p_145780_2_, int p_145780_3_, Object block) {	}	@Override	public void superupdateFallState(double p_70064_1_, boolean p_70064_3_) {	}	@Override	public void superfall(float p_70069_1_) {	}	@Override	public boolean superisNotColliding() {		return false;	}	@Override	public float supergetShadowSize() {		return 0.0F;	}	@Override	public void supersetPositionAndRotationDirect(double p_70056_1_, double p_70056_3_, double p_70056_5_, float p_70056_7_, float p_70056_8_, int p_70056_9_) {	}	@Override	public ItemStack[] supergetLastActiveItems() {		return null;	}	@Override	public String supergetName() {		return super.getName();	}	@Override	public boolean superisEntityInvulnerable() {		return false;	}	@Override	public void supercopyDataFrom(Object entity, boolean p_82141_2_) {	}	@Override	public float superfunc_145772_a(Object explosion, Object world, int p_145772_3_, int p_145772_4_, int p_145772_5_, Object block) {		return 0.0F;	}	@Override	public boolean superfunc_145774_a(Object explosion, Object world, int p_145774_3_, int p_145774_4_, int p_145774_5_, Object block, float p_145774_7_) {		return false;	}	@Override	public int supergetMaxSafePointTries() {		return -1;	}	// ~152	@Override	public boolean superattackEntityFrom(Object damageSource, int par2) {		return super.attackEntityFrom((DamageSource) damageSource, par2);	}	@Override	public String supergetTexture() {		return null;	}	@Override	public boolean superaddNotRiddenEntityID(Object nBTTagCompound) {		return false;	}	@Override	public boolean superaddEntityID(Object nBTTagCompound) {		return false;	}	@Override	public boolean superinteract(Object entityPlayer) {		return false;	}	@Override	public void superunmountEntity(Object entity) {	}	@Override	public void superupdateCloak() {	}	@Override	public float superfunc_82146_a(Object explosion, Object world, int par3, int par4, int par5, Object block) {		return 0.0F;	}	@Override	public boolean superfunc_96091_a(Object explosion, Object world, int par3, int par4, int par5, int par6, float par7) {		return false;	}	@Override	public boolean superprocessInitialInteract(Object entityPlayer, Object itemStack, Object enumHand) {		return super.interactFirst((EntityPlayer) entityPlayer);	}	@Override	public Object supergetTags() {		return null;	}	@Override	public boolean superaddTag(String tag) {		return false;	}	@Override	public boolean superremoveTag(String tag) {		return false;	}	@Override	public boolean superequals(Object p_equals_1_) {		return super.equals(p_equals_1_);	}	@Override	public int superhashCode() {		return super.hashCode();	}	@Override	public void supersetDropItemsWhenDead(boolean p_184174_1_) {	}	@Override	public void superdecrementTimeUntilPortal() {	}	@Override	public void superresetPositionToBB() {	}	@Override	public void superupdatePassenger(Object entity) {		super.updateRiderPosition();	}	@Override	public void superapplyOrientationToEntity(Object entity) {	}	@Override	public boolean superstartRiding(Object entity, boolean force) {		super.mountEntity((Entity) entity);		return true;	}	@Override	public boolean supercanBeRidden(Object entity) {		return false;	}	@Override	public void superremovePassengers() {		super.mountEntity(null);	}	@Override	public void superdismountRidingEntity() {		if (ridingEntity != null) ridingEntity.riddenByEntity = null;	}	@Override	public void superaddPassenger(Object entity) {		super.mountEntity((Entity) entity);	}	@Override	public void superremovePassenger(Object entity) {		super.mountEntity(null);	}	@Override	public boolean supercanFitPassenger(Object entity) {		return false;	}	@Override	public Object supergetHeldEquipment() {		return null;	}	@Override	public Object supergetArmorInventoryList() {		return null;	}	@Override	public Object supergetEquipmentAndArmor() {		return null;	}	@Override	public void supersetItemStackToSlot(Object entityEquipmentSlot, Object itemStack) {	}	@Override	public boolean superisBeingRidden() {		return super.isRiding();	}	@Override	public boolean superisGlowing() {		return false;	}	@Override	public void supersetGlowing(boolean p_184195_1_) {	}	@Override	public Object supergetTeam() {		return null;	}	@Override	public boolean superisOnSameTeam(Object entity) {		return false;	}	@Override	public boolean superisOnScoreboardTeam(Object team) {		return false;	}	@Override	public void supersetEntityInvulnerable(boolean isInvulnerable) {	}	@Override	public boolean superisNonBoss() {		return false;	}	@Override	public void supersetUniqueId(UUID uniqueIdIn) {		entityUniqueID = uniqueIdIn;	}	@Override	public void supernotifyDataManagerChange(Object dataParameter) {	}	@Override	public Object supergetAdjustedHorizontalFacing() {		return super.getHorizontalFacing();	}	@Override	public Object supergetRenderBoundingBox() {		return super.getEntityBoundingBox();	}	@Override	public Object supergetServer() {		return MinecraftServer.getServer();	}	@Override	public boolean superhasCapability(Object capability, Object enumFacing) {		return false;	}	@Override	public Object supergetCapability(Object capability, Object enumFacing) {		return false;	}	@Override	public void superdeserializeNBT(Object nBTTagCompound) {		super.readFromNBT((NBTTagCompound) nBTTagCompound);	}	@Override	public Object superserializeNBT() {		return null;	}	@Override	public void superaddTrackingPlayer(Object entityPlayerMP) {	}	@Override	public void superremoveTrackingPlayer(Object entityPlayerMP) {	}	@Override	public float supergetRotatedYaw(Object rotation) {		return 0.0F;	}	@Override	public float supergetMirroredYaw(Object mirror) {		return 0.0F;	}	@Override	public boolean superignoreItemEntityData() {		return false;	}	@Override	public boolean supersetPositionNonDirty() {		return false;	}	@Override	public Object supergetControllingPassenger() {		return null;	}	@Override	public Object supergetPassengers() {		return null;	}	@Override	public boolean superisPassenger(Object entity) {		super.mountEntity((Entity) entity);		return true;	}	@Override	public Object supergetRecursivePassengers() {		return null;	}	@Override	public Object supergetLowestRidingEntity() {		Entity entity;		for (entity = this; entity.isRiding(); entity = entity.ridingEntity) {		}		return entity;	}	@Override	public boolean superisRidingSameEntity(Object entity) {		return false;	}	@Override	public boolean superisRidingOrBeingRiddenBy(Object entity) {		for (Entity entity1 = this; entity1.ridingEntity != null; entity1 = entity1.ridingEntity) {			if (entity1.equals(entity)) return true;		}		return false;	}	@Override	public boolean supercanPassengerSteer() {		return false;	}	@Override	public Object supergetRidingEntity() {		return ridingEntity;	}	@Override	public Object supergetPushReaction() {		return null;	}	@Override	public Object supergetSoundCategory() {		return null;	}	@Override	public Object supergetRecursivePassengersByType(Class entityClass) {		return null;	}	// Modchu_Entity ??R?s?[??	@Override	public int supergetBrightnessForRender() {		return -1;	}	@Override	public float supergetBrightness() {		return 0.0F;	}}