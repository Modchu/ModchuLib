package modchu.lib;

import java.util.Random;

public interface Modchu_IEntityLivingBaseMaster extends Modchu_IEntityMaster {
	public int func_96121_ay();
	public Random getRNG();
	public Object getAITarget();
	public Object getLastAttackingEntity();
	public void setLastAttackingEntity(Object entity);
	public int getAge();
	public float getAIMoveSpeed();
	public void setAIMoveSpeed(float par1);
	public boolean attackEntityAsMob(Object entity);
	public boolean isWithinHomeDistance(int par1, int par2, int par3);
	public void setHomeArea(int par1, int par2, int par3, int par4);
	public Object getHomePosition();
	public float getMaximumHomeDistance();
	public void detachHome();
	public boolean hasHome();
	public void setRevengeTarget(Object entityLiving);
	public boolean canEntityBeSeen(Object entity);
	public void onDeathUpdate();
	public int decreaseAirSupply(int par1);
	public int getExperiencePoints(Object entityPlayer);
	public boolean isPlayer();
	public void heal(int par1);
	public Object getHealth();
	public void setEntityHealth(int par1);
	public float getSoundPitch();
	public int getTotalArmorValue();
	public void damageArmor(int par1);
	public Object applyArmorCalculations(Object damageSource, int par2);
	public Object applyPotionDamageCalculations(Object damageSource, int par2);
	public void damageEntity(Object damageSource, int par2);
	public float getSoundVolume();
	public Object getAmbientSound();
	public Object getHurtSound();
	public Object getDeathSound();
	public void knockBack(Object entity, int par2, double par3, double par5);
	public void onDeath(Object damageSource);
	public void dropRareDrop(int par1);
	public void dropFewItems(boolean par1, int par2);
	public void moveEntityWithHeading(float par1, float par2);
	public boolean isOnLadder();
	public boolean canBreatheUnderwater();
	public void setJumping(boolean par1);
	public void onLivingUpdate();
	public void collideWithNearbyEntities();
	public void collideWithEntity(Object entity);
	public boolean isAIEnabled();
	public boolean isClientWorld();
	public boolean isMovementBlocked();
	public boolean isBlocking();
	public void jump();
	public void updateAITasks();
	public void handleJumpWater();
	public void updateEntityActionState();
	public void updateArmSwingProgress();
	public float getSwingProgress(float par1);
	public Object getPosition(float par1);
	public boolean isPlayerSleeping();
	public Object getItemIcon(Object itemStack, int par2);
	public void updatePotionEffects();
	public void clearActivePotions();
	public Object getActivePotionEffects();
	public boolean isPotionActive(int par1);
	public boolean isPotionActive(Object potion);
	public Object getActivePotionEffect(Object potion);
	public void addPotionEffect(Object potionEffect);
	public boolean isPotionApplicable(Object potionEffect);
	public boolean isEntityUndead();
	public void removePotionEffectClient(int par1);
	public void removePotionEffect(int par1);
	public void onNewPotionEffect(Object potionEffect);
	public void onChangedPotionEffect(Object potionEffect);
	public void onFinishedPotionEffect(Object potionEffect);
	public float getSpeedModifier();
	public boolean isChild();
	public Object getCreatureAttribute();
	public void renderBrokenItemStack(Object itemStack);
	public Object getHeldItemMainhand();
	public Object getItemStackFromSlot(int par1);
	public void dropEquipment(boolean par1, int par2);
	public void onItemPickup(Object entity, int par2);
	public void func_82162_bC();
	public void initCreature();
	public void swingArm();
	public Object getAttackingEntity();
	public void func_94058_c(String par1Str);
	public String func_94057_bL();
	public boolean func_94056_bM();
	public void setNoAI(boolean par1);
	public boolean func_94062_bN();
	public void func_96120_a(int par1, float par2);
	public void curePotionEffects(Object itemStack);
	public boolean shouldRiderFaceForward(Object entityPlayer);
	public void setInPortal();
	public Object getCurrentArmor(int par1);
	public Object getCurrentItemOrArmor(int par1);
	// 162~
	public void applyEntityAttributes();
	public int getRevengeTimer();
	public Object getLastAttacker();
	public int getLastAttackerTime();
	public void setLastAttacker(Object entity);
	public void onChangedPotionEffect(Object potionEffect, boolean par2);
	public void heal(float f);
	public void setHealth(float par1);
	public void knockBack(Object entity, float par2, double par3, double par5);
	public void damageArmor(float par1);
	public Object applyArmorCalculations(Object damageSource, float par2);
	public Object applyPotionDamageCalculations(Object damageSource, float par2);
	public void damageEntity(Object damageSource, float par2);
	public Object getCombatTracker();
	public Object getAttributeMap();
	public Object getEntityAttribute(Object iAttribute);
	public void dismountEntity(Object entity);
	public float updateDistance(float par1, float par2);
	public float getAbsorptionAmount();
	public void setAbsorptionAmount(float par1);
	public boolean isOnTeam(Object team);
	// 180~
	public boolean isServerWorld();
	public void markPotionsDirty();
	public boolean canUseCommand(int permLevel, String commandName);
	// 188~
	public boolean canDropLoot();
	public void updatePotionMetadata();
	public void resetPotionEffectMetadata();
	public float getJumpUpwardsMotion();
	public void handleJumpLava();
	public void sendEnterCombat();
	public void sendEndCombat();
	public void dropLoot();
	// 190~
	public void swingArm(Object enumHand);
	public Object getItemStackFromSlot(Object entityEquipmentSlot);
	public void dropLoot(boolean p_184610_1_, int p_184610_2_, Object damageSource);
	public void frostWalk(Object blockPos);
	public void playEquipSound(Object itemStack);
	public Object removeActivePotionEffect(Object potion);
	public void removePotionEffect(Object potion);
	public void playHurtSound(Object damageSource);
	public Object getFallSound(int heightIn);
	public void damageShield(float p_184590_1_);
	public Object getHeldItemOffhand();
	public Object getHeldItem(Object enumHand);
	public void setHeldItem(Object enumHand, Object itemStack);
	public boolean isHandActive();
	public Object getActiveHand();
	public void updateActiveHand();
	public void setActiveHand(Object enumHand);
	public void updateItemUse(Object itemStack, int p_184584_2_);
	public void onItemUseFinish();
	public Object getActiveItemStack();
	public int getItemInUseCount();
	public int getItemInUseMaxCount();
	public void stopActiveHand();
	public void resetActiveHand();
	public boolean isActiveItemStackBlocking();
	public boolean isElytraFlying();
	public int getTicksElytraFlying();
	public boolean attemptTeleport(double x, double y, double z);
	public boolean canBeHitWithPotion();

}
