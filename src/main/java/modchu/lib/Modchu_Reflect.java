package modchu.lib;import java.io.File;import java.io.InputStream;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.UUID;import java.util.concurrent.ConcurrentHashMap;public class Modchu_Reflect {	public static boolean debugReflectMessage = true;	public static boolean debugReflectMessageDetail = false;	private static ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Class> javaDefaultClassMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Method> methodMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Field> fieldMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, String> classNameMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, String> methodNameMap = new ConcurrentHashMap();	private static List<String> ngClassList = new ArrayList();	private static List<String> ngMethodList = new ArrayList();	private static List<String> ngFieldList = new ArrayList();	public static void setDebugMessage(boolean b) {		debugReflectMessage = b;	}	public static void setDebugMessageDetail(boolean b) {		debugReflectMessageDetail = b;	}	public static boolean copyFields(Class var0, Object var1, Object var2) {		boolean b = false;		Field[] ff = var0.getDeclaredFields();		for (int var4 = 0; var4 < ff.length; ++var4) {			Field f = ff[var4];			int var6 = f.getModifiers();			if (!Modifier.isStatic(var6) && !Modifier.isFinal(var6)) {				f.setAccessible(true);				setFieldObject(f, var2, getFieldObject(f, var1));				b = true;			}		}		return b;	}	public static boolean setFieldObject(Field var0, Object var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Field var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				var0.set(var1, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2);		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(null, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3) {		return setFieldObject(var0, var1, var2, var3, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(null, var3);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var4, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var4, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4) {		return setFieldObject(var0, var1, var2, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(var2, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, var4, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, var4, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4) {		return setFieldObject(var0, var1, var2, var3, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(var3, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static Object getFieldObject(Field var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Field var0, Object var1, int i) {		try {			if (var0 != null) return var0.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, Object var1, int i) {		Field f = null;		try {			f = getField(var0, null, i);			if (f != null) return f.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, String var1, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, Object var2, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, Object var2, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0, i);			if (c != null) f = getField(c, var1, i);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(String var0, String var1, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0, i);			if (c != null) f = getField(c, var1, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) f = getField(c, var1, var2, i);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Field getField(Class var0, String var1, String var2) {		return getField(var0, var1, var2, 1);	}	public static Field getField(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = getField(var0, var1, i);		return f;	}	public static Field getField(Class var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(Class var0, String var1, int i) {		Field f = null;		try {			f = getRawField(var0, var1, i);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	public static Field getField(String var0, String var1, String var2) {		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, 1);		if (f != null) return f;		f = getField(var0, var2, 1);		return f;	}	public static Field getField(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, i);		return f;	}	public static Field getField(String var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(String var0, String var1, int i) {		Field f = null;		try {			f = getRawField(loadClass(var0), var1, i);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	private static Field getRawField(Class var0, String var1) {		return getRawField(var0, var1, 1);	}	private static Field getRawField(Class var0, String var1, int i) {		String s = var0.getName() + "," + var1;		if (fieldMap.containsKey(s)) return fieldMap.get(s);		if (ngFieldList.contains(s)				&& i > -2) {			if (i > -1) {				String s1 = "getRawField ngFieldList.contains s="+s;				if (Modchu_Main.getMinecraftVersion() < 164) {					Modchu_Debug.lDebug(s1);				} else {					Modchu_Debug.mDebug(s1);				}			}			return null;		}		Field f = null;		Exception[] e = new Exception[10];		int eCount = 0;		if (var1 != null && var0 != null) {			String var2 = getFieldName(var1);			try {				f = var0.getDeclaredField(var2);				fieldMap.put(s, f);				return f;			} catch (Exception e2) {				e[eCount] = e2;				eCount++;			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var2);				fieldMap.put(s, f);				return f;			} catch (Exception e3) {			}			try {				f = var0.getDeclaredField(var1);				fieldMap.put(s, f);				return f;			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var1);				fieldMap.put(s, f);				return f;			} catch (Exception e3) {			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getField Class=" + var0 + " String=" + var1);			for (Class c = var0; c != Object.class; c = c.getSuperclass()) {				try {					if (c != null) f = c.getDeclaredField(var1);					if (f != null) {						f.setAccessible(true);						fieldMap.put(s, f);						return f;					}				} catch (Exception e4) {					if (eCount < e.length) {						e[eCount] = e4;						eCount++;					}				}			}		}		if (i > -1) {			for (int i2 = 0; i2 < 10; i2++) {				printStackTrace(e[i2]);			}		}		ngFieldList.add(s);		return f;	}	public static Method getMethod(Class var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, 1);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(Class var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(Class var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(Class var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2, int i) {		String s = var0.getName() + "," + var1;		if (var2 != null				&& var2.length > 0) {			StringBuilder sd = new StringBuilder().append(s);			int i1 = 0;			for (Class c : var2) {				String name = c.getName();				if (name != null						&& !name.isEmpty()) sd.append(",").append(name);				else {					Modchu_Debug.lDebug1("getRawMethod Class[] null error !! var0="+var0+" var1="+var1);					return null;				}				i1++;			}			s = sd.toString();			sd = null;		}		//Modchu_Debug.mDebug("getRawMethod s="+s);		if (methodMap.containsKey(s)) return (Method) methodMap.get(s);		if (ngMethodList.contains(s)) {			if (i > -1) {				String s1 = "getRawMethod ngMethodList.contains s="+s;				if (Modchu_Main.getMinecraftVersion() < 164) {					Modchu_Debug.lDebug(s1);				} else {					Modchu_Debug.mDebug(s1);				}			}			return null;		}		//Modchu_Debug.mDebug("getRawMethod s="+s);		Method method = null;		Exception[] e = new Exception[10];		int eCount = 0;		if (var1 != null) {			String var3 = getFieldName(var1);			try {				if (var0 != null) method = var0.getDeclaredMethod(var3, var2);				if (method != null) {					method.setAccessible(true);					methodMap.put(s, method);					return method;				}			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			try {				if (var0 != null) method = var0.getDeclaredMethod(var1, var2);				if (method != null) {					method.setAccessible(true);					methodMap.put(s, method);					return method;				}			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			//if (var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.mDebug("Modchu_Reflect getRawMethod var0="+var0);			for (Class c = var0; c != null && c != Object.class; c = c.getSuperclass()) {				try {					method = c.getDeclaredMethod(var3, var2);					if (method != null) {						method.setAccessible(true);						methodMap.put(s, method);						return method;					}				} catch (Exception e2) {				}				try {					method = c.getDeclaredMethod(var1, var2);					if (method != null) {						method.setAccessible(true);						methodMap.put(s, method);						return method;					}				} catch (Exception e2) {					e[eCount] = e2;					eCount++;					if (eCount > 9) eCount = 9;				}			}		}		if (i > -1) {			if (var0 != null				&& var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.mDebug("Modchu_Reflect getRawMethod miss var0=" + var0 + " var1=" + var1 + " var2=" + (var2 != null ? var2.toString() : null));			for (int i2 = 0; i2 < 10; i2++) {				printStackTrace(e[i2]);			}		}		if (i > -3) ngMethodList.add(s);		return method;	}	public static Method getMethod(String var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3) {		return getMethod(var0, var1, var2, var3, 1);	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(String var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(String var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(String var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(String var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(String var0, String var1, Class[] var2, int i) {		Class c = null;		Method method = null;		if (var1 != null) {			try {				c = loadClass(var0, i);				if (c != null) method = c.getDeclaredMethod(var1, var2);				return method;			} catch (Exception e1) {				if (debugDisplayDetail(i)) printStackTrace(e1);			}			try {				if (c != null) method = c.getMethod(var1, var2);			} catch (Exception e) {				if (debugDisplay(i)) printStackTrace(e);			}		}		return method;	}	public static Object invoke(Method var0) {		return invoke(var0, 1);	}	public static Object invoke(Method var0, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1) {		return invoke(var0, var1, 1);	}	public static Object invoke(Method var0, Object var1, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1, var2);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object... var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object[] var2, int i) {		try {			if (var0 != null) return var0.invoke(var1, (Object[]) var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(String var0, String var1, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, i);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			if (debugDisplay(i)) printStackTrace(e);			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, null, (Object[]) var4, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Class loadClass(String var0) {		return loadClass(var0, 1);	}	public static Class loadClass(String var0, int i) {		if (var0 != null				&& !var0.isEmpty()) ;else {			Modchu_Debug.mDebug("Modchu_Reflect loadClass load missing class var0 null !!");			return null;		}		if (javaDefaultClassMap.containsKey(var0)) return javaDefaultClassMap.get(var0);		Class c = null;		var0 = var0.replace("\\", ".").replace("/", ".");		var0 = getClassName(var0);		if (var0 != null				&& !var0.isEmpty()) ;else {			Modchu_Debug.mDebug("Modchu_Reflect loadClass getClassName load missing class var0 null !!");			return null;		}		if (classMap.containsKey(var0)) return classMap.get(var0);		if (ngClassList.contains(var0)) return null;		try {			c = Class.forName(var0);			if (c != null) {				classMap.put(var0, c);				return c;			}		} catch (Error e) {			if (debugDisplayDetail(i)) printStackTraceError(e);		} catch (ClassNotFoundException e) {			if (debugDisplayDetail(i)) printStackTrace(e);		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		try {			c = Class.forName("net.minecraft.src." + (var0.indexOf(".") > -1 ? Modchu_Main.lastIndexProcessing(var0, ".") : var0));			if (c != null) classMap.put(var0, c);		} catch (Error e1) {			if (debugDisplayDetail(i)) printStackTraceError(e1);		} catch (ClassNotFoundException e1) {			if (debugDisplayDetail(i)) printStackTrace(e1);		} catch (Exception e1) {			if (debugDisplayDetail(i)) printStackTrace(e1);		}		if (c != null) return c;		ngClassList.add(var0);		if (i != -1) Modchu_Debug.lDebug("Modchu_Reflect loadClass load missing class=" + var0);		else Modchu_Debug.mDebug("Modchu_Reflect loadClass load missing class=" + var0);		return null;	}	public static Class loadClassArray(String var0) {		return loadClassArray(var0, 1);	}	public static Class loadClassArray(String var0, int i) {		Object[] o = (Object[]) Array.newInstance(loadClass(var0), 2);		return o.getClass();	}	public static Object newInstance(String var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(Class var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3, int i) {		return newInstance(loadClass(var1), var2, var3, i);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor.newInstance(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object[] newInstanceArray(String var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(String var1, int i, int i2) {		Class c = null;		try {			c = loadClass(var1);			if (c != null) return (Object[]) Array.newInstance(c, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Object[] newInstanceArray(Class var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(Class var1, int i, int i2) {		Constructor constructor = null;		try {			if (var1 != null) return (Object[]) Array.newInstance(var1, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Constructor getConstructor(String var1, Class[] var2) {		return getConstructor(loadClass(var1), var2, 1);	}	public static Constructor getConstructor(String var1, Class[] var2, int i) {		return getConstructor(loadClass(var1), var2, i);	}	public static Constructor getConstructor(Class var1, Class[] var2) {		return getConstructor(var1, var2, 1);	}	public static Constructor getConstructor(Class var1, Class[] var2, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor;		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, 1);		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2, int i) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, i);		return null;	}	public static Object getPrivateValue(Class var0, Object var1, int var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, int var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception var4) {			if (debugDisplay(i)) var4.printStackTrace();		}		return null;	}	public static Object getPrivateValue(Class var0, Object var1, String var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, String var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					return f.get(var1);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}		return null;	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredFields()[var2];				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}	}	public static Enum getEnum(String var0, String var1) {		return getEnum(loadClass(var0), var1, 1);	}	public static Enum getEnum(String var0, String var1, int i) {		return getEnum(loadClass(var0), var1, i);	}	public static Enum getEnum(Class c, String var1) {		return getEnum(c, var1, 1);	}	public static Enum getEnum(Class c, String var1, int i) {		Enum en = null;		Object[] o = null;		try {			if (c != null) o = c.getEnumConstants();			if (o != null) {				for (int i1 = 0; i1 < o.length; i1++) {					if (((Enum)o[i1]).name().equalsIgnoreCase(var1)) {						en = (Enum) o[i1];						break;					}				}				return en;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Enum getEnum(String var0,  int i, int i1) {		return getEnum(loadClass(var0), i, i1);	}	public static Enum getEnum(Class c, int i, int i1) {		Enum en = null;		Object[] o = null;		try {			if (c != null) o = c.getEnumConstants();			if (o != null) {				if (o.length > i) {					en = (Enum) o[i];					return en;				}			}		} catch (Exception e) {			if (debugDisplay(i1)) printStackTrace(e);		}		return null;	}	private static boolean debugDisplay(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:			return debugReflectMessage;		case 2:			return debugReflectMessageDetail;		}		return false;	}	private static boolean debugDisplayDetail(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:			return debugReflectMessageDetail;		}		return false;	}	private static String reflectStringSetting(String var1, String var2) {		return Modchu_Main.isRelease() ? var1 : var2;	}	public static String getFieldName(String s) {		if (Modchu_Main.isForge && Modchu_Main.getMinecraftVersion() > 150) return s;		if (methodNameMap != null && methodNameMap.containsKey(s)) {			return methodNameMap.get(s);		}		if (s.startsWith("field")				| s.startsWith("func")) Modchu_Debug.lDebug("getFieldName check out s=" + s);		return s;	}	public static String getClassName(String s) {		int i1 = s.lastIndexOf("[]");		boolean flag = i1 > -1;		if (flag) s = s.substring(0, i1);		if (classNameMap != null && classNameMap.containsKey(s)) {			//return b ? "net.minecraft.src." + classNameMap.get(s) : classNameMap.get(s);			//Modchu_Debug.mDebug("getClassName s="+classNameMap.get(s));			s = classNameMap.get(s);		}		//Modchu_Debug.mDebug("getClassName else s="+s);		if (flag) s = s + "[]";		return s;	}	private static void printStackTraceError(Error e) {		e.printStackTrace();		Modchu_Debug.lDebug("Modchu_Reflect printStackTraceError", 2, e);	}	private static void printStackTrace(Exception e) {		if (e != null) {			e.printStackTrace();			Modchu_Debug.lDebug("Modchu_Reflect printStackTrace", 2, e);		}	}	public static void initNameMap() {		Modchu_Debug.lDebug("Modchu_Reflect initNameMap");		int version = Modchu_Main.getMinecraftVersion();		String[] s1 = null;		if (Modchu_Main.isForge) {			switch(version) {			case 152:				s1 = new String []{						"Minecraft", "net.minecraft.client.Minecraft", 						"AbstractClientPlayer", "net.minecraft.client.entity.EntityPlayer", 						"EntityLivingBase", "net.minecraft.entity.EntityLiving", 						"RendererLivingEntity", "net.minecraft.client.renderer.entity.RenderLiving", 						"ResourceLocation", "java.lang.String", 						"RenderEngine", "net.minecraft.client.renderer.RenderEngine", 						"MapItemRenderer", "net.minecraft.client.gui.MapItemRenderer", 						"TextureUtil", "", 						"Resource", "", 						"ResourceManager", "", 						"TextureManager", "net.minecraft.client.renderer.texture.TextureManager", 						"Entity", "net.minecraft.entity.Entity", 						"AxisAlignedBB", "net.minecraft.util.AxisAlignedBB", 						"World", "net.minecraft.world.World", 						"EntityPlayer", "net.minecraft.entity.player.EntityPlayer", 						"EntityVillager", "net.minecraft.entity.passive.EntityVillager", 						"NetClientHandler", "net.minecraft.client.multiplayer.NetClientHandler", 						"EnumGameType", "net.minecraft.world.EnumGameType", 						"FontRenderer", "net.minecraft.client.gui.FontRenderer", 						"Block", "net.minecraft.block.Block", 						"Item", "net.minecraft.item.Item", 						"ItemStack", "net.minecraft.item.ItemStack", 						"KeyBinding", "net.minecraft.client.settings.KeyBinding", 						"BlockFlower", "net.minecraft.block.BlockFlower", 						"BlockLeaves", "net.minecraft.block.BlockLeaves", 						"BlockPumpkin", "net.minecraft.block.BlockPumpkin", 						"EntityList", "net.minecraft.entity.EntityList", 						"Render", "net.minecraft.client.renderer.entity.Render", 						"GuiScreen", "net.minecraft.client.gui.GuiScreen", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"MathHelper", "net.minecraft.util.MathHelper", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"ItemRenderer", "net.minecraft.client.renderer.ItemRenderer", 						"EntityClientPlayerMP", "net.minecraft.client.entity.EntityClientPlayerMP", 						"EntityOtherPlayerMP", "net.minecraft.client.entity.EntityOtherPlayerMP", 						"GuiChat", "net.minecraft.client.gui.GuiChat", 						"MovementInputFromOptions", "net.minecraft.util.MovementInputFromOptions", 						"EntityPlayerSP", "net.minecraft.client.entity.EntityPlayerSP", 						"DamageSource", "net.minecraft.util.DamageSource", 						"EnumCreatureAttribute", "net.minecraft.entity.EnumCreatureAttribute", 						"InventoryPlayer", "net.minecraft.entity.player.InventoryPlayer", 						"ModelBase", "net.minecraft.client.model.ModelBase", 						"RenderBiped", "net.minecraft.client.renderer.entity.RenderBiped", 						"RenderPlayer", "net.minecraft.client.renderer.entity.RenderPlayer", 						"ItemArmor", "net.minecraft.item.ItemArmor", 						"GuiButton", "net.minecraft.client.gui.GuiButton", 						"Tessellator", "net.minecraft.client.renderer.Tessellator", 						"GuiSlot", "net.minecraft.client.gui.GuiSlot", 						"Gui", "net.minecraft.client.gui.Gui", 						"GameSettings", "net.minecraft.client.settings.GameSettings", 						"Session", "net.minecraft.util.Session", 						"EntityRenderer", "net.minecraft.client.renderer.EntityRenderer", 						"RenderHelper", "net.minecraft.client.renderer.RenderHelper", 						"OpenGlHelper", "net.minecraft.client.renderer.OpenGlHelper", 						"BlockMushroom", "net.minecraft.block.BlockMushroom", 						"EnumAction", "net.minecraft.item.EnumAction", 						"ItemMap", "net.minecraft.item.ItemMap", 						"DataWatcher", "net.minecraft.entity.DataWatcher", 						"TexturedQuad", "net.minecraft.client.model.TexturedQuad", 						"PositionTextureVertex", "net.minecraft.client.model.PositionTextureVertex", 						"Vec3", "net.minecraft.util.Vec3", 						"EnumCreatureType", "net.minecraft.entity.EnumCreatureType", 						"ModelRenderer", "net.minecraft.client.model.ModelRenderer", 						"WorldSettings", "net.minecraft.world.WorldSettings", 						"WorldSettings.GameType", "net.minecraft.world.WorldSettings.GameType", 						"EntityCreature", "net.minecraft.entity.EntityCreature", 						"Potion", "net.minecraft.potion.Potion", 						"EntityItem", "net.minecraft.entity.item.EntityItem", 						"EntityAnimal", "net.minecraft.entity.passive.EntityAnimal", 						"BiomeGenBase", "net.minecraft.world.biome.BiomeGenBase", 						"EntityLiving", "net.minecraft.entity.EntityLiving", 						"EntityArrow", "net.minecraft.entity.projectile.EntityArrow", 						"CreativeTabs", "net.minecraft.creativetab.CreativeTabs", 						"EntityHorse", "net.minecraft.entity.passive.EntityHorse", 						"EntityTameable", "net.minecraft.entity.passive.EntityTameable", 						"NBTTagCompound", "net.minecraft.nbt.NBTTagCompound", 						"TileEntitySkullRenderer", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", 						"IIcon", "net.minecraft.util.IIcon", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"PotionHelper", "net.minecraft.potion.PotionHelper", 						"ItemBow", "net.minecraft.item.ItemBow", 						"ModelBox", "net.minecraft.client.model.ModelBox", 						"RenderBlocks", "net.minecraft.client.renderer.RenderBlocks", 						"WorldClient", "net.minecraft.client.multiplayer.WorldClient", 						"WorldServer", "net.minecraft.world.WorldServer", 						"TextureOffset", "net.minecraft.client.model.TextureOffset", 						"ModelQuadruped", "net.minecraft.client.model.ModelQuadruped", 						"ModelBat", "net.minecraft.client.model.ModelBat", 						"ModelBlaze", "net.minecraft.client.model.ModelBlaze", 						"ModelChicken", "net.minecraft.client.model.ModelChicken", 						"ModelCreeper", "net.minecraft.client.model.ModelCreeper", 						"ModelGhast", "net.minecraft.client.model.ModelGhast", 						"ModelIronGolem", "net.minecraft.client.model.ModelIronGolem", 						"ModelOcelot", "net.minecraft.client.model.ModelOcelot", 						"ModelSnowMan", "net.minecraft.client.model.ModelSnowMan", 						"ModelSpider", "net.minecraft.client.model.ModelSpider", 						"ModelSquid", "net.minecraft.client.model.ModelSquid", 						"ModelWolf", "net.minecraft.client.model.ModelWolf", 						"GuiMainMenu", "net.minecraft.client.gui.GuiMainMenu", 						"ScaledResolution", "net.minecraft.client.gui.ScaledResolution", 						"Framebuffer", "", 						"GuiIngameMenu", "net.minecraft.client.gui.GuiIngameMenu", 						"GuiControls", "net.minecraft.client.gui.GuiControls", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "net.minecraft.util.Facing", 						"BlockLiquid", "net.minecraft.block.BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "net.minecraft.network.NetworkManager", 						"EntityPlayerMP", "net.minecraft.entity.player.EntityPlayerMP", 						"ItemPotion", "net.minecraft.item.ItemPotion", 						"Container", "net.minecraft.inventory.Container", 						"SharedMonsterAttributes", "net.minecraft.entity.SharedMonsterAttributes", 						"ModelBiped", "net.minecraft.client.model.ModelBiped", 						"LoadingScreenRenderer", "net.minecraft.client.LoadingScreenRenderer", 						"ItemCameraTransforms", "", 						"ItemCameraTransforms$TransformType", "", 						"ItemBlock", "net.minecraft.item.ItemBlock", 						"EntityZombie", "net.minecraft.entity.monster.EntityZombie", 						"TextureMap", "net.minecraft.client.renderer.texture.TextureMap", 						"ItemDoublePlant", "", 						"BlockPos", "", 						"IBlockState", "", 						"ModelResourceLocation", "", 						"BaseMod", "BaseMod", 						"ModLoader", "ModLoader", 						"FMLCommonHandler", "cpw.mods.fml.common.FMLCommonHandler", 						"GameRegistry", "cpw.mods.fml.common.registry.GameRegistry", 						"EntityRegistry", "cpw.mods.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "cpw.mods.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "cpw.mods.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "cpw.mods.fml.client.registry.RenderingRegistry", 						"Loader", "cpw.mods.fml.common.Loader", 						"ModContainer", "cpw.mods.fml.common.ModContainer", 						"NetworkRegistry", "cpw.mods.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "cpw.mods.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "MMM_IModelCaps"				};				break;			case 162:			case 164:				s1 = new String []{						"Minecraft", "net.minecraft.client.Minecraft", 						"AbstractClientPlayer", "net.minecraft.client.entity.AbstractClientPlayer", 						"EntityLivingBase", "net.minecraft.entity.EntityLivingBase", 						"RendererLivingEntity", "net.minecraft.client.renderer.entity.RendererLivingEntity", 						"ResourceLocation", "net.minecraft.util.ResourceLocation", 						"RenderEngine", "net.minecraft.client.renderer.RenderEngine", 						"MapItemRenderer", "net.minecraft.client.gui.MapItemRenderer", 						"TextureUtil", "net.minecraft.client.renderer.texture.TextureUtil", 						"Resource", "net.minecraft.client.resources.Resource", 						"ResourceManager", "net.minecraft.client.resources.ResourceManager", 						"TextureManager", "net.minecraft.client.renderer.texture.TextureManager", 						"Entity", "net.minecraft.entity.Entity", 						"AxisAlignedBB", "net.minecraft.util.AxisAlignedBB", 						"World", "net.minecraft.world.World", 						"EntityPlayer", "net.minecraft.entity.player.EntityPlayer", 						"EntityVillager", "net.minecraft.entity.passive.EntityVillager", 						"NetClientHandler", "net.minecraft.client.multiplayer.NetClientHandler", 						"EnumGameType", "net.minecraft.world.EnumGameType", 						"FontRenderer", "net.minecraft.client.gui.FontRenderer", 						"Block", "net.minecraft.block.Block", 						"Item", "net.minecraft.item.Item", 						"ItemStack", "net.minecraft.item.ItemStack", 						"KeyBinding", "net.minecraft.client.settings.KeyBinding", 						"BlockFlower", "net.minecraft.block.BlockFlower", 						"BlockLeaves", "net.minecraft.block.BlockLeaves", 						"BlockPumpkin", "net.minecraft.block.BlockPumpkin", 						"EntityList", "net.minecraft.entity.EntityList", 						"Render", "net.minecraft.client.renderer.entity.Render", 						"GuiScreen", "net.minecraft.client.gui.GuiScreen", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"MathHelper", "net.minecraft.util.MathHelper", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"ItemRenderer", "net.minecraft.client.renderer.ItemRenderer", 						"EntityClientPlayerMP", "net.minecraft.client.entity.EntityClientPlayerMP", 						"EntityOtherPlayerMP", "net.minecraft.client.entity.EntityOtherPlayerMP", 						"GuiChat", "net.minecraft.client.gui.GuiChat", 						"MovementInputFromOptions", "net.minecraft.util.MovementInputFromOptions", 						"EntityPlayerSP", "net.minecraft.client.entity.EntityPlayerSP", 						"DamageSource", "net.minecraft.util.DamageSource", 						"EnumCreatureAttribute", "net.minecraft.entity.EnumCreatureAttribute", 						"InventoryPlayer", "net.minecraft.entity.player.InventoryPlayer", 						"ModelBase", "net.minecraft.client.model.ModelBase", 						"RenderBiped", "net.minecraft.client.renderer.entity.RenderBiped", 						"RenderPlayer", "net.minecraft.client.renderer.entity.RenderPlayer", 						"ItemArmor", "net.minecraft.item.ItemArmor", 						"GuiButton", "net.minecraft.client.gui.GuiButton", 						"Tessellator", "net.minecraft.client.renderer.Tessellator", 						"GuiSlot", "net.minecraft.client.gui.GuiSlot", 						"Gui", "net.minecraft.client.gui.Gui", 						"GameSettings", "net.minecraft.client.settings.GameSettings", 						"Session", "net.minecraft.util.Session", 						"EntityRenderer", "net.minecraft.client.renderer.EntityRenderer", 						"RenderHelper", "net.minecraft.client.renderer.RenderHelper", 						"OpenGlHelper", "net.minecraft.client.renderer.OpenGlHelper", 						"BlockMushroom", "net.minecraft.block.BlockMushroom", 						"EnumAction", "net.minecraft.item.EnumAction", 						"ItemMap", "net.minecraft.item.ItemMap", 						"DataWatcher", "net.minecraft.entity.DataWatcher", 						"TexturedQuad", "net.minecraft.client.model.TexturedQuad", 						"PositionTextureVertex", "net.minecraft.client.model.PositionTextureVertex", 						"Vec3", "net.minecraft.util.Vec3", 						"EnumCreatureType", "net.minecraft.entity.EnumCreatureType", 						"ModelRenderer", "net.minecraft.client.model.ModelRenderer", 						"WorldSettings", "net.minecraft.world.WorldSettings", 						"WorldSettings.GameType", "net.minecraft.world.WorldSettings.GameType", 						"EntityCreature", "net.minecraft.entity.EntityCreature", 						"Potion", "net.minecraft.potion.Potion", 						"EntityItem", "net.minecraft.entity.item.EntityItem", 						"EntityAnimal", "net.minecraft.entity.passive.EntityAnimal", 						"BiomeGenBase", "net.minecraft.world.biome.BiomeGenBase", 						"EntityLiving", "net.minecraft.entity.EntityLiving", 						"EntityArrow", "net.minecraft.entity.projectile.EntityArrow", 						"CreativeTabs", "net.minecraft.creativetab.CreativeTabs", 						"EntityHorse", "net.minecraft.entity.passive.EntityHorse", 						"EntityTameable", "net.minecraft.entity.passive.EntityTameable", 						"NBTTagCompound", "net.minecraft.nbt.NBTTagCompound", 						"TileEntitySkullRenderer", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", 						"IIcon", "net.minecraft.util.IIcon", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"PotionHelper", "net.minecraft.potion.PotionHelper", 						"ItemBow", "net.minecraft.item.ItemBow", 						"ModelBox", "net.minecraft.client.model.ModelBox", 						"RenderBlocks", "net.minecraft.client.renderer.RenderBlocks", 						"WorldClient", "net.minecraft.client.multiplayer.WorldClient", 						"WorldServer", "net.minecraft.world.WorldServer", 						"TextureOffset", "net.minecraft.client.model.TextureOffset", 						"ModelQuadruped", "net.minecraft.client.model.ModelQuadruped", 						"ModelBat", "net.minecraft.client.model.ModelBat", 						"ModelBlaze", "net.minecraft.client.model.ModelBlaze", 						"ModelChicken", "net.minecraft.client.model.ModelChicken", 						"ModelCreeper", "net.minecraft.client.model.ModelCreeper", 						"ModelGhast", "net.minecraft.client.model.ModelGhast", 						"ModelIronGolem", "net.minecraft.client.model.ModelIronGolem", 						"ModelOcelot", "net.minecraft.client.model.ModelOcelot", 						"ModelSnowMan", "net.minecraft.client.model.ModelSnowMan", 						"ModelSpider", "net.minecraft.client.model.ModelSpider", 						"ModelSquid", "net.minecraft.client.model.ModelSquid", 						"ModelWolf", "net.minecraft.client.model.ModelWolf", 						"GuiMainMenu", "net.minecraft.client.gui.GuiMainMenu", 						"ScaledResolution", "net.minecraft.client.gui.ScaledResolution", 						"Framebuffer", "", 						"GuiIngameMenu", "net.minecraft.client.gui.GuiIngameMenu", 						"GuiControls", "net.minecraft.client.gui.GuiControls", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "net.minecraft.util.Facing", 						"BlockLiquid", "net.minecraft.block.BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "net.minecraft.network.NetworkManager", 						"EntityPlayerMP", "net.minecraft.entity.player.EntityPlayerMP", 						"ItemPotion", "net.minecraft.item.ItemPotion", 						"Container", "net.minecraft.inventory.Container", 						"SharedMonsterAttributes", "net.minecraft.entity.SharedMonsterAttributes", 						"ModelBiped", "net.minecraft.client.model.ModelBiped", 						"LoadingScreenRenderer", "net.minecraft.client.LoadingScreenRenderer", 						"ItemCameraTransforms", "", 						"ItemCameraTransforms$TransformType", "", 						"ItemBlock", "net.minecraft.item.ItemBlock", 						"EnumFacing", "net.minecraft.util.EnumFacing", 						"EntityZombie", "net.minecraft.entity.monster.EntityZombie", 						"TextureMap", "net.minecraft.client.renderer.texture.TextureMap", 						"ItemDoublePlant", "", 						"BlockPos", "", 						"IBlockState", "", 						"ModelResourceLocation", "", 						"BaseMod", "BaseMod", 						"ModLoader", "ModLoader", 						"FMLCommonHandler", "cpw.mods.fml.common.FMLCommonHandler", 						"GameRegistry", "cpw.mods.fml.common.registry.GameRegistry", 						"EntityRegistry", "cpw.mods.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "cpw.mods.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "cpw.mods.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "cpw.mods.fml.client.registry.RenderingRegistry", 						"Loader", "cpw.mods.fml.common.Loader", 						"ModContainer", "cpw.mods.fml.common.ModContainer", 						"NetworkRegistry", "cpw.mods.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "cpw.mods.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "MMM_IModelCaps", 				};				break;			case 172:			case 179:				s1 = new String []{						"Minecraft", "net.minecraft.client.Minecraft", 						"AbstractClientPlayer", "net.minecraft.client.entity.AbstractClientPlayer", 						"EntityLivingBase", "net.minecraft.entity.EntityLivingBase", 						"RendererLivingEntity", "net.minecraft.client.renderer.entity.RendererLivingEntity", 						"ResourceLocation", "net.minecraft.util.ResourceLocation", 						"RenderEngine", "net.minecraft.client.renderer.RenderEngine", 						"MapItemRenderer", "net.minecraft.client.gui.MapItemRenderer", 						"TextureUtil", "net.minecraft.client.renderer.texture.TextureUtil", 						"Resource", "net.minecraft.client.resources.Resource", 						"ResourceManager", "net.minecraft.client.resources.ResourceManager", 						"TextureManager", "net.minecraft.client.renderer.texture.TextureManager", 						"Entity", "net.minecraft.entity.Entity", 						"AxisAlignedBB", "net.minecraft.util.AxisAlignedBB", 						"World", "net.minecraft.world.World", 						"EntityPlayer", "net.minecraft.entity.player.EntityPlayer", 						"EntityVillager", "net.minecraft.entity.passive.EntityVillager", 						"NetClientHandler", "net.minecraft.client.network.NetHandlerPlayClient", 						"EnumGameType", "net.minecraft.world.EnumGameType", 						"FontRenderer", "net.minecraft.client.gui.FontRenderer", 						"Block", "net.minecraft.block.Block", 						"Item", "net.minecraft.item.Item", 						"ItemStack", "net.minecraft.item.ItemStack", 						"KeyBinding", "net.minecraft.client.settings.KeyBinding", 						"BlockFlower", "net.minecraft.block.BlockFlower", 						"BlockLeaves", "net.minecraft.block.BlockLeaves", 						"BlockPumpkin", "net.minecraft.block.BlockPumpkin", 						"EntityList", "net.minecraft.entity.EntityList", 						"Render", "net.minecraft.client.renderer.entity.Render", 						"GuiScreen", "net.minecraft.client.gui.GuiScreen", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"MathHelper", "net.minecraft.util.MathHelper", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"ItemRenderer", "net.minecraft.client.renderer.ItemRenderer", 						"EntityClientPlayerMP", "net.minecraft.client.entity.EntityClientPlayerMP", 						"EntityOtherPlayerMP", "net.minecraft.client.entity.EntityOtherPlayerMP", 						"GuiChat", "net.minecraft.client.gui.GuiChat", 						"MovementInputFromOptions", "net.minecraft.util.MovementInputFromOptions", 						"EntityPlayerSP", "net.minecraft.client.entity.EntityPlayerSP", 						"DamageSource", "net.minecraft.util.DamageSource", 						"EnumCreatureAttribute", "net.minecraft.entity.EnumCreatureAttribute", 						"InventoryPlayer", "net.minecraft.entity.player.InventoryPlayer", 						"ModelBase", "net.minecraft.client.model.ModelBase", 						"RenderBiped", "net.minecraft.client.renderer.entity.RenderBiped", 						"RenderPlayer", "net.minecraft.client.renderer.entity.RenderPlayer", 						"ItemArmor", "net.minecraft.item.ItemArmor", 						"GuiButton", "net.minecraft.client.gui.GuiButton", 						"Tessellator", "net.minecraft.client.renderer.Tessellator", 						"GuiSlot", "net.minecraft.client.gui.GuiSlot", 						"Gui", "net.minecraft.client.gui.Gui", 						"GameSettings", "net.minecraft.client.settings.GameSettings", 						"Session", "net.minecraft.util.Session", 						"EntityRenderer", "net.minecraft.client.renderer.EntityRenderer", 						"RenderHelper", "net.minecraft.client.renderer.RenderHelper", 						"OpenGlHelper", "net.minecraft.client.renderer.OpenGlHelper", 						"BlockMushroom", "net.minecraft.block.BlockMushroom", 						"EnumAction", "net.minecraft.item.EnumAction", 						"ItemMap", "net.minecraft.item.ItemMap", 						"DataWatcher", "net.minecraft.entity.DataWatcher", 						"TexturedQuad", "net.minecraft.client.model.TexturedQuad", 						"PositionTextureVertex", "net.minecraft.client.model.PositionTextureVertex", 						"Vec3", "net.minecraft.util.Vec3", 						"EnumCreatureType", "net.minecraft.entity.EnumCreatureType", 						"ModelRenderer", "net.minecraft.client.model.ModelRenderer", 						"WorldSettings", "net.minecraft.world.WorldSettings", 						"WorldSettings.GameType", "net.minecraft.world.WorldSettings.GameType", 						"EntityCreature", "net.minecraft.entity.EntityCreature", 						"Potion", "net.minecraft.potion.Potion", 						"EntityItem", "net.minecraft.entity.item.EntityItem", 						"EntityAnimal", "net.minecraft.entity.passive.EntityAnimal", 						"BiomeGenBase", "net.minecraft.world.biome.BiomeGenBase", 						"EntityLiving", "net.minecraft.entity.EntityLiving", 						"EntityArrow", "net.minecraft.entity.projectile.EntityArrow", 						"CreativeTabs", "net.minecraft.creativetab.CreativeTabs", 						"EntityHorse", "net.minecraft.entity.passive.EntityHorse", 						"EntityTameable", "net.minecraft.entity.passive.EntityTameable", 						"NBTTagCompound", "net.minecraft.nbt.NBTTagCompound", 						"TileEntitySkullRenderer", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", 						"IIcon", "net.minecraft.util.IIcon", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"PotionHelper", "net.minecraft.potion.PotionHelper", 						"ItemBow", "net.minecraft.item.ItemBow", 						"ModelBox", "net.minecraft.client.model.ModelBox", 						"RenderBlocks", "net.minecraft.client.renderer.RenderBlocks", 						"WorldClient", "net.minecraft.client.multiplayer.WorldClient", 						"WorldServer", "net.minecraft.world.WorldServer", 						"TextureOffset", "net.minecraft.client.model.TextureOffset", 						"ModelQuadruped", "net.minecraft.client.model.ModelQuadruped", 						"ModelBat", "net.minecraft.client.model.ModelBat", 						"ModelBlaze", "net.minecraft.client.model.ModelBlaze", 						"ModelChicken", "net.minecraft.client.model.ModelChicken", 						"ModelCreeper", "net.minecraft.client.model.ModelCreeper", 						"ModelGhast", "net.minecraft.client.model.ModelGhast", 						"ModelIronGolem", "net.minecraft.client.model.ModelIronGolem", 						"ModelOcelot", "net.minecraft.client.model.ModelOcelot", 						"ModelSnowMan", "net.minecraft.client.model.ModelSnowMan", 						"ModelSpider", "net.minecraft.client.model.ModelSpider", 						"ModelSquid", "net.minecraft.client.model.ModelSquid", 						"ModelWolf", "net.minecraft.client.model.ModelWolf", 						"GuiMainMenu", "net.minecraft.client.gui.GuiMainMenu", 						"ScaledResolution", "net.minecraft.client.gui.ScaledResolution", 						"Framebuffer", "net.minecraft.client.shader.Framebuffer", 						"GuiIngameMenu", "net.minecraft.client.gui.GuiIngameMenu", 						"GuiControls", "net.minecraft.client.gui.GuiControls", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "net.minecraft.util.Facing", 						"BlockLiquid", "net.minecraft.block.BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "net.minecraft.network.NetworkManager", 						"EntityPlayerMP", "net.minecraft.entity.player.EntityPlayerMP", 						"ItemPotion", "net.minecraft.item.ItemPotion", 						"Container", "net.minecraft.inventory.Container", 						"SharedMonsterAttributes", "net.minecraft.entity.SharedMonsterAttributes", 						"ModelBiped", "net.minecraft.client.model.ModelBiped", 						"LoadingScreenRenderer", "net.minecraft.client.LoadingScreenRenderer", 						"ItemCameraTransforms", "", 						"ItemCameraTransforms$TransformType", "", 						"ItemBlock", "net.minecraft.item.ItemBlock", 						"EnumFacing", "net.minecraft.util.EnumFacing", 						"EntityZombie", "net.minecraft.entity.monster.EntityZombie", 						"TextureMap", "net.minecraft.client.renderer.texture.TextureMap", 						"ItemDoublePlant", "", 						"BlockPos", "", 						"IBlockState", "", 						"ModelResourceLocation", "", 						"BaseMod", "BaseMod", 						"ModLoader", "ModLoader", 						"FMLCommonHandler", "cpw.mods.fml.common.FMLCommonHandler", 						"GameRegistry", "cpw.mods.fml.common.registry.GameRegistry", 						"EntityRegistry", "cpw.mods.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "cpw.mods.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "cpw.mods.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "cpw.mods.fml.client.registry.RenderingRegistry", 						"Loader", "cpw.mods.fml.common.Loader", 						"ModContainer", "cpw.mods.fml.common.ModContainer", 						"NetworkRegistry", "cpw.mods.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "cpw.mods.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "mmm.lib.multiModel.model.IModelCaps", 				};				break;			case 180:				s1 = new String []{						"Minecraft", "net.minecraft.client.Minecraft", 						"AbstractClientPlayer", "net.minecraft.client.entity.AbstractClientPlayer", 						"EntityLivingBase", "net.minecraft.entity.EntityLivingBase", 						"RendererLivingEntity", "net.minecraft.client.renderer.entity.RendererLivingEntity", 						"ResourceLocation", "net.minecraft.util.ResourceLocation", 						"RenderEngine", "net.minecraft.client.renderer.RenderEngine", 						"MapItemRenderer", "net.minecraft.client.gui.MapItemRenderer", 						"TextureUtil", "net.minecraft.client.renderer.texture.TextureUtil", 						"Resource", "net.minecraft.client.resources.Resource", 						"ResourceManager", "net.minecraft.client.resources.ResourceManager", 						"TextureManager", "net.minecraft.client.renderer.texture.TextureManager", 						"Entity", "net.minecraft.entity.Entity", 						"AxisAlignedBB", "net.minecraft.util.AxisAlignedBB", 						"World", "net.minecraft.world.World", 						"EntityPlayer", "net.minecraft.entity.player.EntityPlayer", 						"EntityVillager", "net.minecraft.entity.passive.EntityVillager", 						"NetClientHandler", "net.minecraft.client.network.NetHandlerPlayClient", 						"EnumGameType", "net.minecraft.world.EnumGameType", 						"FontRenderer", "net.minecraft.client.gui.FontRenderer", 						"Block", "net.minecraft.block.Block", 						"Item", "net.minecraft.item.Item", 						"ItemStack", "net.minecraft.item.ItemStack", 						"KeyBinding", "net.minecraft.client.settings.KeyBinding", 						"BlockFlower", "net.minecraft.block.BlockFlower", 						"BlockLeaves", "net.minecraft.block.BlockLeaves", 						"BlockPumpkin", "net.minecraft.block.BlockPumpkin", 						"EntityList", "net.minecraft.entity.EntityList", 						"Render", "net.minecraft.client.renderer.entity.Render", 						"GuiScreen", "net.minecraft.client.gui.GuiScreen", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"MathHelper", "net.minecraft.util.MathHelper", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"RenderManager", "net.minecraft.client.renderer.entity.RenderManager", 						"ItemRenderer", "net.minecraft.client.renderer.ItemRenderer", 						"EntityClientPlayerMP", "net.minecraft.client.entity.EntityClientPlayerMP", 						"EntityOtherPlayerMP", "net.minecraft.client.entity.EntityOtherPlayerMP", 						"GuiChat", "net.minecraft.client.gui.GuiChat", 						"MovementInputFromOptions", "net.minecraft.util.MovementInputFromOptions", 						"EntityPlayerSP", "net.minecraft.client.entity.EntityPlayerSP", 						"DamageSource", "net.minecraft.util.DamageSource", 						"EnumCreatureAttribute", "net.minecraft.entity.EnumCreatureAttribute", 						"InventoryPlayer", "net.minecraft.entity.player.InventoryPlayer", 						"ModelBase", "net.minecraft.client.model.ModelBase", 						"RenderBiped", "net.minecraft.client.renderer.entity.RenderBiped", 						"RenderPlayer", "net.minecraft.client.renderer.entity.RenderPlayer", 						"ItemArmor", "net.minecraft.item.ItemArmor", 						"GuiButton", "net.minecraft.client.gui.GuiButton", 						"Tessellator", "net.minecraft.client.renderer.Tessellator", 						"GuiSlot", "net.minecraft.client.gui.GuiSlot", 						"Gui", "net.minecraft.client.gui.Gui", 						"GameSettings", "net.minecraft.client.settings.GameSettings", 						"Session", "net.minecraft.util.Session", 						"EntityRenderer", "net.minecraft.client.renderer.EntityRenderer", 						"RenderHelper", "net.minecraft.client.renderer.RenderHelper", 						"OpenGlHelper", "net.minecraft.client.renderer.OpenGlHelper", 						"BlockMushroom", "net.minecraft.block.BlockMushroom", 						"EnumAction", "net.minecraft.item.EnumAction", 						"ItemMap", "net.minecraft.item.ItemMap", 						"DataWatcher", "net.minecraft.entity.DataWatcher", 						"TexturedQuad", "net.minecraft.client.model.TexturedQuad", 						"PositionTextureVertex", "net.minecraft.client.model.PositionTextureVertex", 						"Vec3", "net.minecraft.util.Vec3", 						"EnumCreatureType", "net.minecraft.entity.EnumCreatureType", 						"ModelRenderer", "net.minecraft.client.model.ModelRenderer", 						"WorldSettings", "net.minecraft.world.WorldSettings", 						"WorldSettings.GameType", "net.minecraft.world.WorldSettings.GameType", 						"EntityCreature", "net.minecraft.entity.EntityCreature", 						"Potion", "net.minecraft.potion.Potion", 						"EntityItem", "net.minecraft.entity.item.EntityItem", 						"EntityAnimal", "net.minecraft.entity.passive.EntityAnimal", 						"BiomeGenBase", "net.minecraft.world.biome.BiomeGenBase", 						"EntityLiving", "net.minecraft.entity.EntityLiving", 						"EntityArrow", "net.minecraft.entity.projectile.EntityArrow", 						"CreativeTabs", "net.minecraft.creativetab.CreativeTabs", 						"EntityHorse", "net.minecraft.entity.passive.EntityHorse", 						"EntityTameable", "net.minecraft.entity.passive.EntityTameable", 						"NBTTagCompound", "net.minecraft.nbt.NBTTagCompound", 						"TileEntitySkullRenderer", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", 						"IIcon", "net.minecraft.util.IIcon", 						"GLAllocation", "net.minecraft.client.renderer.GLAllocation", 						"PotionHelper", "net.minecraft.potion.PotionHelper", 						"ItemBow", "net.minecraft.item.ItemBow", 						"ModelBox", "net.minecraft.client.model.ModelBox", 						"RenderBlocks", "net.minecraft.client.renderer.RenderBlocks", 						"WorldClient", "net.minecraft.client.multiplayer.WorldClient", 						"WorldServer", "net.minecraft.world.WorldServer", 						"TextureOffset", "net.minecraft.client.model.TextureOffset", 						"ModelQuadruped", "net.minecraft.client.model.ModelQuadruped", 						"ModelBat", "net.minecraft.client.model.ModelBat", 						"ModelBlaze", "net.minecraft.client.model.ModelBlaze", 						"ModelChicken", "net.minecraft.client.model.ModelChicken", 						"ModelCreeper", "net.minecraft.client.model.ModelCreeper", 						"ModelGhast", "net.minecraft.client.model.ModelGhast", 						"ModelIronGolem", "net.minecraft.client.model.ModelIronGolem", 						"ModelOcelot", "net.minecraft.client.model.ModelOcelot", 						"ModelSnowMan", "net.minecraft.client.model.ModelSnowMan", 						"ModelSpider", "net.minecraft.client.model.ModelSpider", 						"ModelSquid", "net.minecraft.client.model.ModelSquid", 						"ModelWolf", "net.minecraft.client.model.ModelWolf", 						"GuiMainMenu", "net.minecraft.client.gui.GuiMainMenu", 						"ScaledResolution", "net.minecraft.client.gui.ScaledResolution", 						"Framebuffer", "net.minecraft.client.shader.Framebuffer", 						"GuiIngameMenu", "net.minecraft.client.gui.GuiIngameMenu", 						"GuiControls", "net.minecraft.client.gui.GuiControls", 						"ModelPlayer", "net.minecraft.client.model.ModelPlayer", 						"LayerArmorBase", "net.minecraft.client.renderer.entity.layers.LayerArmorBase", 						"Facing", "", 						"BlockLiquid", "net.minecraft.block.BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "net.minecraft.network.NetworkManager", 						"EntityPlayerMP", "net.minecraft.entity.player.EntityPlayerMP", 						"ItemPotion", "net.minecraft.item.ItemPotion", 						"Container", "net.minecraft.inventory.Container", 						"SharedMonsterAttributes", "net.minecraft.entity.SharedMonsterAttributes", 						"ModelBiped", "net.minecraft.client.model.ModelBiped", 						"LoadingScreenRenderer", "net.minecraft.client.LoadingScreenRenderer", 						"ItemCameraTransforms", "net.minecraft.client.renderer.block.model.ItemCameraTransforms", 						"ItemCameraTransforms$TransformType", "net.minecraft.client.renderer.block.model.ItemCameraTransforms$TransformType", 						"ItemBlock", "net.minecraft.item.ItemBlock", 						"EnumFacing", "net.minecraft.util.EnumFacing", 						"EntityZombie", "net.minecraft.entity.monster.EntityZombie", 						"TextureMap", "net.minecraft.client.renderer.texture.TextureMap", 						"ItemDoublePlant", "net.minecraft.item.ItemDoublePlant", 						"BlockPos", "net.minecraft.util.BlockPos", 						"IBlockState", "net.minecraft.block.state.IBlockState", 						"ModelResourceLocation", "net.minecraft.client.resources.model.ModelResourceLocation", 						"BaseMod", "BaseMod", 						"ModLoader", "ModLoader", 						"FMLCommonHandler", "net.minecraftforge.fml.common.FMLCommonHandler", 						"GameRegistry", "net.minecraftforge.fml.common.registry.GameRegistry", 						"EntityRegistry", "net.minecraftforge.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "net.minecraftforge.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "net.minecraftforge.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "net.minecraftforge.fml.client.registry.RenderingRegistry", 						"Loader", "net.minecraftforge.fml.common.Loader", 						"ModContainer", "net.minecraftforge.fml.common.ModContainer", 						"NetworkRegistry", "net.minecraftforge.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "net.minecraftforge.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "mmm.lib.multiModel.model.IModelCaps", 				};				break;			}		} else if (Modchu_Main.isRelease()) {			switch(version) {			case 152:				s1 = new String []{						"Minecraft", "net.minecraft.client.Minecraft", 						"AbstractClientPlayer", "sq", 						"EntityLivingBase", "ng", 						"RendererLivingEntity", "bho", 						"ResourceLocation", "java.lang.String", 						"RenderEngine", "bge", 						"MapItemRenderer", "axi", 						"TextureUtil", "", 						"Resource", "", 						"ResourceManager", "", 						"TextureManager", "biq", 						"Entity", "mp", 						"AxisAlignedBB", "aqx", 						"World", "aab", 						"EntityPlayer", "sq", 						"EntityVillager", "sm", 						"NetClientHandler", "bdk", 						"EnumGameType", "aaj", 						"FontRenderer", "awv", 						"Block", "apa", 						"Item", "wk", 						"ItemStack", "wm", 						"KeyBinding", "ava", 						"BlockFlower", "alh", 						"BlockLeaves", "ana", 						"BlockPumpkin", "anz", 						"EntityList", "mv", 						"Render", "bgz", 						"GuiScreen", "axr", 						"RenderManager", "bgy", 						"MathHelper", "kx", 						"GLAllocation", "avc", 						"RenderManager", "bgy", 						"ItemRenderer", "bfx", 						"EntityClientPlayerMP", "bdv", 						"EntityOtherPlayerMP", "bfk", 						"GuiChat", "awj", 						"MovementInputFromOptions", "bfi", 						"EntityPlayerSP", "bfj", 						"DamageSource", "mg", 						"EnumCreatureAttribute", "no", 						"InventoryPlayer", "so", 						"ModelBase", "bcd", 						"RenderBiped", "bhg", 						"RenderPlayer", "bht", 						"ItemArmor", "uo", 						"GuiButton", "awg", 						"Tessellator", "bgd", 						"GuiSlot", "axt", 						"Gui", "awx", 						"GameSettings", "avy", 						"Session", "awf", 						"EntityRenderer", "bfq", 						"RenderHelper", "avb", 						"OpenGlHelper", "bkn", 						"BlockMushroom", "anl", 						"EnumAction", "xp", 						"ItemMap", "wo", 						"DataWatcher", "ns", 						"TexturedQuad", "bcg", 						"PositionTextureVertex", "bct", 						"Vec3", "arc", 						"EnumCreatureType", "nn", 						"ModelRenderer", "bdi", 						"WorldSettings", "aai", 						"WorldSettings.GameType", "aaj", 						"EntityCreature", "nr", 						"Potion", "mk", 						"EntityItem", "rh", 						"EntityAnimal", "qh", 						"BiomeGenBase", "aav", 						"EntityLiving", "ng", 						"EntityArrow", "ss", 						"CreativeTabs", "ve", 						"EntityHorse", "", 						"EntityTameable", "nu", 						"NBTTagCompound", "bs", 						"TileEntitySkullRenderer", "bjb", 						"IIcon", "", 						"GLAllocation", "avc", 						"PotionHelper", "xu", 						"ItemBow", "uw", 						"ModelBox", "bdd", 						"RenderBlocks", "bgf", 						"WorldClient", "bds", 						"WorldServer", "iz", 						"TextureOffset", "bdj", 						"ModelQuadruped", "bch", 						"ModelBat", "bbp", 						"ModelBlaze", "bbq", 						"ModelChicken", "bbu", 						"ModelCreeper", "bbw", 						"ModelGhast", "bby", 						"ModelIronGolem", "bcu", 						"ModelOcelot", "bce", 						"ModelSnowMan", "bcq", 						"ModelSpider", "bcr", 						"ModelSquid", "bcs", 						"ModelWolf", "bcz", 						"GuiMainMenu", "bkf", 						"ScaledResolution", "axs", 						"Framebuffer", "", 						"GuiIngameMenu", "axl", 						"GuiControls", "awl", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "s", 						"BlockLiquid", "", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "cg", 						"EntityPlayerMP", "jc", 						"ItemPotion", "ww", 						"Container", "tj", 						"SharedMonsterAttributes", "", 						"ModelBiped", "bbz", 						"LoadingScreenRenderer", "awb", 						"ItemCameraTransforms", "", 						"ItemCameraTransforms$TransformType", "", 						"ItemBlock", "xn", 						"EnumFacing", "bf", 						"EntityZombie", "sj", 						"TextureMap", "bir", 						"ItemDoublePlant", "", 						"BlockPos", "", 						"IBlockState", "", 						"ModelResourceLocation", "", 						"BaseMod", "BaseMod", 						"ModLoader", "ModLoader", 						"FMLCommonHandler", "", 						"GameRegistry", "", 						"EntityRegistry", "", 						"LanguageRegistry", "", 						"ClientRegistry", "", 						"RenderingRegistry", "", 						"Loader", "", 						"ModContainer", "", 						"NetworkRegistry", "", 						"FMLClientHandler", "", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "MMM_IModelCaps", 				};				break;			case 162:			case 164:				s1 = new String []{						"Minecraft", "ats", 						"AbstractClientPlayer", "ber", 						"EntityLivingBase", "oe", 						"RendererLivingEntity", "bgy", 						"ResourceLocation", "bjl", 						"RenderEngine", "bge", 						"MapItemRenderer", "avs", 						"TextureUtil", "bim", 						"Resource", "bjk", 						"ResourceManager", "bjm", 						"TextureManager", "bij", 						"Entity", "nm", 						"AxisAlignedBB", "asu", 						"World", "abv", 						"EntityPlayer", "ue", 						"EntityVillager", "ua", 						"NetClientHandler", "bct", 						"EnumGameType", "acd", 						"FontRenderer", "avf", 						"Block", "aqw", 						"Item", "yb", 						"ItemStack", "yd", 						"KeyBinding", "atp", 						"BlockFlower", "anb", 						"BlockLeaves", "aow", 						"BlockPumpkin", "apv", 						"EntityList", "ns", 						"Render", "bgj", 						"GuiScreen", "awb", 						"RenderManager", "bgi", 						"MathHelper", "lr", 						"GLAllocation", "atr", 						"RenderManager", "bgi", 						"ItemRenderer", "bfg", 						"EntityClientPlayerMP", "bdf", 						"EntityOtherPlayerMP", "bev", 						"GuiChat", "aut", 						"MovementInputFromOptions", "bet", 						"EntityPlayerSP", "beu", 						"DamageSource", "na", 						"EnumCreatureAttribute", "oi", 						"InventoryPlayer", "uc", 						"ModelBase", "bbl", 						"RenderBiped", "bgr", 						"RenderPlayer", "bhg", 						"ItemArmor", "wg", 						"GuiButton", "auq", 						"Tessellator", "bfn", 						"GuiSlot", "awd", 						"Gui", "avh", 						"GameSettings", "aui", 						"Session", "aup", 						"EntityRenderer", "bfb", 						"RenderHelper", "atq", 						"OpenGlHelper", "blx", 						"BlockMushroom", "apg", 						"EnumAction", "zi", 						"ItemMap", "yg", 						"DataWatcher", "on", 						"TexturedQuad", "bbp", 						"PositionTextureVertex", "bcc", 						"Vec3", "asz", 						"EnumCreatureType", "og", 						"ModelRenderer", "bcr", 						"WorldSettings", "acc", 						"WorldSettings.GameType", "acd", 						"EntityCreature", "om", 						"Potion", "nh", 						"EntityItem", "sr", 						"EntityAnimal", "ro", 						"BiomeGenBase", "acp", 						"EntityLiving", "of", 						"EntityArrow", "ug", 						"CreativeTabs", "wv", 						"EntityHorse", "rr", 						"EntityTameable", "op", 						"NBTTagCompound", "bx", 						"TileEntitySkullRenderer", "biy", 						"IIcon", "", 						"GLAllocation", "atr", 						"PotionHelper", "zo", 						"ItemBow", "wo", 						"ModelBox", "bcm", 						"RenderBlocks", "bfo", 						"WorldClient", "bda", 						"WorldServer", "jr", 						"TextureOffset", "bcs", 						"ModelQuadruped", "bbq", 						"ModelBat", "baw", 						"ModelBlaze", "bax", 						"ModelChicken", "bbb", 						"ModelCreeper", "bbd", 						"ModelGhast", "bbf", 						"ModelIronGolem", "bcd", 						"ModelOcelot", "bbn", 						"ModelSnowMan", "bbz", 						"ModelSpider", "bca", 						"ModelSquid", "bcb", 						"ModelWolf", "bci", 						"GuiMainMenu", "blq", 						"ScaledResolution", "awc", 						"Framebuffer", "", 						"GuiIngameMenu", "avv", 						"GuiControls", "auv", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "s", 						"BlockLiquid", "", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "cl", 						"EntityPlayerMP", "ju", 						"ItemPotion", "yo", 						"Container", "ux", 						"SharedMonsterAttributes", "to", 						"ModelBiped", "bbg", 						"LoadingScreenRenderer", "aul", 						"ItemCameraTransforms", "", 						"ItemCameraTransforms$TransformType", "", 						"ItemBlock", "zg", 						"EnumFacing", "bk", 						"EntityZombie", "tv", 						"TextureMap", "bih", 						"ItemDoublePlant", "", 						"BlockPos", "", 						"IBlockState", "", 						"ModelResourceLocation", "", 						"BaseMod", "BaseMod", 						"ModLoader", "ModLoader", 						"FMLCommonHandler", "", 						"GameRegistry", "", 						"EntityRegistry", "", 						"LanguageRegistry", "", 						"ClientRegistry", "", 						"RenderingRegistry", "", 						"Loader", "", 						"ModContainer", "", 						"NetworkRegistry", "", 						"FMLClientHandler", "", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "MMM_IModelCaps", 				};				break;			}		} else {			if (version > 179) {				s1 = new String []{						"Minecraft", "Minecraft", 						"AbstractClientPlayer", "AbstractClientPlayer", 						"EntityLivingBase", "EntityLivingBase", 						"RendererLivingEntity", "RendererLivingEntity", 						"ResourceLocation", "ResourceLocation", 						"RenderEngine", "RenderEngine", 						"MapItemRenderer", "MapItemRenderer", 						"TextureUtil", "TextureUtil", 						"Resource", "Resource", 						"ResourceManager", "ResourceManager", 						"TextureManager", "TextureManager", 						"Entity", "Entity", 						"AxisAlignedBB", "AxisAlignedBB", 						"World", "World", 						"EntityPlayer", "EntityPlayer", 						"EntityVillager", "EntityVillager", 						"NetClientHandler", "NetHandlerPlayClient", 						"EnumGameType", "EnumGameType", 						"FontRenderer", "FontRenderer", 						"Block", "Block", 						"Item", "Item", 						"ItemStack", "ItemStack", 						"KeyBinding", "KeyBinding", 						"BlockFlower", "BlockFlower", 						"BlockLeaves", "BlockLeaves", 						"BlockPumpkin", "BlockPumpkin", 						"EntityList", "EntityList", 						"Render", "Render", 						"GuiScreen", "GuiScreen", 						"RenderManager", "RenderManager", 						"MathHelper", "MathHelper", 						"GLAllocation", "GLAllocation", 						"RenderManager", "RenderManager", 						"ItemRenderer", "ItemRenderer", 						"EntityClientPlayerMP", "EntityClientPlayerMP", 						"EntityOtherPlayerMP", "EntityOtherPlayerMP", 						"GuiChat", "GuiChat", 						"MovementInputFromOptions", "MovementInputFromOptions", 						"EntityPlayerSP", "EntityPlayerSP", 						"DamageSource", "DamageSource", 						"EnumCreatureAttribute", "EnumCreatureAttribute", 						"InventoryPlayer", "InventoryPlayer", 						"ModelBase", "ModelBase", 						"RenderBiped", "RenderBiped", 						"RenderPlayer", "RenderPlayer", 						"ItemArmor", "ItemArmor", 						"GuiButton", "GuiButton", 						"Tessellator", "Tessellator", 						"GuiSlot", "GuiSlot", 						"Gui", "Gui", 						"GameSettings", "GameSettings", 						"Session", "Session", 						"EntityRenderer", "EntityRenderer", 						"RenderHelper", "RenderHelper", 						"OpenGlHelper", "OpenGlHelper", 						"BlockMushroom", "BlockMushroom", 						"EnumAction", "EnumAction", 						"ItemMap", "ItemMap", 						"DataWatcher", "DataWatcher", 						"TexturedQuad", "TexturedQuad", 						"PositionTextureVertex", "PositionTextureVertex", 						"Vec3", "Vec3", 						"EnumCreatureType", "EnumCreatureType", 						"ModelRenderer", "ModelRenderer", 						"WorldSettings", "WorldSettings", 						"WorldSettings.GameType", "WorldSettings.GameType", 						"EntityCreature", "EntityCreature", 						"Potion", "Potion", 						"EntityItem", "EntityItem", 						"EntityAnimal", "EntityAnimal", 						"BiomeGenBase", "BiomeGenBase", 						"EntityLiving", "EntityLiving", 						"EntityArrow", "EntityArrow", 						"CreativeTabs", "CreativeTabs", 						"EntityHorse", "EntityHorse", 						"EntityTameable", "EntityTameable", 						"NBTTagCompound", "NBTTagCompound", 						"TileEntitySkullRenderer", "TileEntitySkullRenderer", 						"IIcon", "IIcon", 						"GLAllocation", "GLAllocation", 						"PotionHelper", "PotionHelper", 						"ItemBow", "ItemBow", 						"ModelBox", "ModelBox", 						"RenderBlocks", "RenderBlocks", 						"WorldClient", "WorldClient", 						"WorldServer", "WorldServer", 						"TextureOffset", "TextureOffset", 						"ModelQuadruped", "ModelQuadruped", 						"ModelBat", "ModelBat", 						"ModelBlaze", "ModelBlaze", 						"ModelChicken", "ModelChicken", 						"ModelCreeper", "ModelCreeper", 						"ModelGhast", "ModelGhast", 						"ModelIronGolem", "ModelIronGolem", 						"ModelOcelot", "ModelOcelot", 						"ModelSnowMan", "ModelSnowMan", 						"ModelSpider", "ModelSpider", 						"ModelSquid", "ModelSquid", 						"ModelWolf", "ModelWolf", 						"GuiMainMenu", "GuiMainMenu", 						"ScaledResolution", "ScaledResolution", 						"Framebuffer", "Framebuffer", 						"GuiIngameMenu", "GuiIngameMenu", 						"GuiControls", "GuiControls", 						"ModelPlayer", "ModelPlayer", 						"LayerArmorBase", "LayerArmorBase", 						"Facing", "", 						"BlockLiquid", "BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "NetworkManager", 						"EntityPlayerMP", "EntityPlayerMP", 						"ItemPotion", "ItemPotion", 						"Container", "Container", 						"SharedMonsterAttributes", "SharedMonsterAttributes", 						"ModelBiped", "ModelBiped", 						"LoadingScreenRenderer", "LoadingScreenRenderer", 						"ItemBlock", "ItemBlock", 						"EnumFacing", "EnumFacing", 						"EntityZombie", "EntityZombie", 						"TextureMap", "TextureMap", 						"ItemDoublePlant", "ItemDoublePlant", 						"BlockPos", "BlockPos", 						"IBlockState", "IBlockState", 						"ModelResourceLocation", "ModelResourceLocation", 						"BaseMod", "net.minecraft.src.BaseMod", 						"ModLoader", "net.minecraft.src.ModLoader", 						"FMLCommonHandler", "net.minecraftforge.fml.common.FMLCommonHandler", 						"GameRegistry", "net.minecraftforge.fml.common.registry.GameRegistry", 						"EntityRegistry", "net.minecraftforge.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "net.minecraftforge.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "net.minecraftforge.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "net.minecraftforge.fml.client.registry.RenderingRegistry", 						"Loader", "net.minecraftforge.fml.common.Loader", 						"ModContainer", "net.minecraftforge.fml.common.ModContainer", 						"NetworkRegistry", "net.minecraftforge.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "net.minecraftforge.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "mmm.lib.multiModel.model.IModelCaps", 				};			}			else if (version > 169) {				s1 = new String []{						"Minecraft", "Minecraft", 						"AbstractClientPlayer", "AbstractClientPlayer", 						"EntityLivingBase", "EntityLivingBase", 						"RendererLivingEntity", "RendererLivingEntity", 						"ResourceLocation", "ResourceLocation", 						"RenderEngine", "RenderEngine", 						"MapItemRenderer", "MapItemRenderer", 						"TextureUtil", "TextureUtil", 						"Resource", "Resource", 						"ResourceManager", "ResourceManager", 						"TextureManager", "TextureManager", 						"Entity", "Entity", 						"AxisAlignedBB", "AxisAlignedBB", 						"World", "World", 						"EntityPlayer", "EntityPlayer", 						"EntityVillager", "EntityVillager", 						"NetClientHandler", "NetHandlerPlayClient", 						"EnumGameType", "EnumGameType", 						"FontRenderer", "FontRenderer", 						"Block", "Block", 						"Item", "Item", 						"ItemStack", "ItemStack", 						"KeyBinding", "KeyBinding", 						"BlockFlower", "BlockFlower", 						"BlockLeaves", "BlockLeaves", 						"BlockPumpkin", "BlockPumpkin", 						"EntityList", "EntityList", 						"Render", "Render", 						"GuiScreen", "GuiScreen", 						"RenderManager", "RenderManager", 						"MathHelper", "MathHelper", 						"GLAllocation", "GLAllocation", 						"RenderManager", "RenderManager", 						"ItemRenderer", "ItemRenderer", 						"EntityClientPlayerMP", "EntityClientPlayerMP", 						"EntityOtherPlayerMP", "EntityOtherPlayerMP", 						"GuiChat", "GuiChat", 						"MovementInputFromOptions", "MovementInputFromOptions", 						"EntityPlayerSP", "EntityPlayerSP", 						"DamageSource", "DamageSource", 						"EnumCreatureAttribute", "EnumCreatureAttribute", 						"InventoryPlayer", "InventoryPlayer", 						"ModelBase", "ModelBase", 						"RenderBiped", "RenderBiped", 						"RenderPlayer", "RenderPlayer", 						"ItemArmor", "ItemArmor", 						"GuiButton", "GuiButton", 						"Tessellator", "Tessellator", 						"GuiSlot", "GuiSlot", 						"Gui", "Gui", 						"GameSettings", "GameSettings", 						"Session", "Session", 						"EntityRenderer", "EntityRenderer", 						"RenderHelper", "RenderHelper", 						"OpenGlHelper", "OpenGlHelper", 						"BlockMushroom", "BlockMushroom", 						"EnumAction", "EnumAction", 						"ItemMap", "ItemMap", 						"DataWatcher", "DataWatcher", 						"TexturedQuad", "TexturedQuad", 						"PositionTextureVertex", "PositionTextureVertex", 						"Vec3", "Vec3", 						"EnumCreatureType", "EnumCreatureType", 						"ModelRenderer", "ModelRenderer", 						"WorldSettings", "WorldSettings", 						"WorldSettings.GameType", "WorldSettings.GameType", 						"EntityCreature", "EntityCreature", 						"Potion", "Potion", 						"EntityItem", "EntityItem", 						"EntityAnimal", "EntityAnimal", 						"BiomeGenBase", "BiomeGenBase", 						"EntityLiving", "EntityLiving", 						"EntityArrow", "EntityArrow", 						"CreativeTabs", "CreativeTabs", 						"EntityHorse", "EntityHorse", 						"EntityTameable", "EntityTameable", 						"NBTTagCompound", "NBTTagCompound", 						"TileEntitySkullRenderer", "TileEntitySkullRenderer", 						"IIcon", "IIcon", 						"GLAllocation", "GLAllocation", 						"PotionHelper", "PotionHelper", 						"ItemBow", "ItemBow", 						"ModelBox", "ModelBox", 						"RenderBlocks", "RenderBlocks", 						"WorldClient", "WorldClient", 						"WorldServer", "WorldServer", 						"TextureOffset", "TextureOffset", 						"ModelQuadruped", "ModelQuadruped", 						"ModelBat", "ModelBat", 						"ModelBlaze", "ModelBlaze", 						"ModelChicken", "ModelChicken", 						"ModelCreeper", "ModelCreeper", 						"ModelGhast", "ModelGhast", 						"ModelIronGolem", "ModelIronGolem", 						"ModelOcelot", "ModelOcelot", 						"ModelSnowMan", "ModelSnowMan", 						"ModelSpider", "ModelSpider", 						"ModelSquid", "ModelSquid", 						"ModelWolf", "ModelWolf", 						"GuiMainMenu", "GuiMainMenu", 						"ScaledResolution", "ScaledResolution", 						"Framebuffer", "Framebuffer", 						"GuiIngameMenu", "GuiIngameMenu", 						"GuiControls", "GuiControls", 						"ModelPlayer", "ModelPlayer", 						"LayerArmorBase", "", 						"Facing", "Facing", 						"BlockLiquid", "BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "NetworkManager", 						"EntityPlayerMP", "EntityPlayerMP", 						"ItemPotion", "ItemPotion", 						"Container", "Container", 						"SharedMonsterAttributes", "SharedMonsterAttributes", 						"ModelBiped", "ModelBiped", 						"LoadingScreenRenderer", "LoadingScreenRenderer", 						"ItemBlock", "ItemBlock", 						"EnumFacing", "EnumFacing", 						"EntityZombie", "EntityZombie", 						"TextureMap", "TextureMap", 						"ItemDoublePlant", "ItemDoublePlant", 						"BlockPos", "BlockPos", 						"IBlockState", "IBlockState", 						"ModelResourceLocation", "ModelResourceLocation", 						"BaseMod", "net.minecraft.src.BaseMod", 						"ModLoader", "net.minecraft.src.ModLoader", 						"FMLCommonHandler", "cpw.mods.fml.common.FMLCommonHandler", 						"GameRegistry", "cpw.mods.fml.common.registry.GameRegistry", 						"EntityRegistry", "cpw.mods.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "cpw.mods.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "cpw.mods.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "cpw.mods.fml.client.registry.RenderingRegistry", 						"Loader", "cpw.mods.fml.common.Loader", 						"ModContainer", "cpw.mods.fml.common.ModContainer", 						"NetworkRegistry", "cpw.mods.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "cpw.mods.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "mmm.lib.multiModel.model.IModelCaps", 				};			}			else if (version < 170					&& version > 159) {				s1 = new String []{						"Minecraft", "Minecraft", 						"AbstractClientPlayer", "AbstractClientPlayer", 						"EntityLivingBase", "EntityLivingBase", 						"RendererLivingEntity", "RendererLivingEntity", 						"ResourceLocation", "ResourceLocation", 						"RenderEngine", "RenderEngine", 						"MapItemRenderer", "MapItemRenderer", 						"TextureUtil", "TextureUtil", 						"Resource", "Resource", 						"ResourceManager", "ResourceManager", 						"TextureManager", "TextureManager", 						"Entity", "Entity", 						"AxisAlignedBB", "AxisAlignedBB", 						"World", "World", 						"EntityPlayer", "EntityPlayer", 						"EntityVillager", "EntityVillager", 						"NetClientHandler", "NetClientHandler", 						"EnumGameType", "EnumGameType", 						"FontRenderer", "FontRenderer", 						"Block", "Block", 						"Item", "Item", 						"ItemStack", "ItemStack", 						"KeyBinding", "KeyBinding", 						"BlockFlower", "BlockFlower", 						"BlockLeaves", "BlockLeaves", 						"BlockPumpkin", "BlockPumpkin", 						"EntityList", "EntityList", 						"Render", "Render", 						"GuiScreen", "GuiScreen", 						"RenderManager", "RenderManager", 						"MathHelper", "MathHelper", 						"GLAllocation", "GLAllocation", 						"RenderManager", "RenderManager", 						"ItemRenderer", "ItemRenderer", 						"EntityClientPlayerMP", "EntityClientPlayerMP", 						"EntityOtherPlayerMP", "EntityOtherPlayerMP", 						"GuiChat", "GuiChat", 						"MovementInputFromOptions", "MovementInputFromOptions", 						"EntityPlayerSP", "EntityPlayerSP", 						"DamageSource", "DamageSource", 						"EnumCreatureAttribute", "EnumCreatureAttribute", 						"InventoryPlayer", "InventoryPlayer", 						"ModelBase", "ModelBase", 						"RenderBiped", "RenderBiped", 						"RenderPlayer", "RenderPlayer", 						"ItemArmor", "ItemArmor", 						"GuiButton", "GuiButton", 						"Tessellator", "Tessellator", 						"GuiSlot", "GuiSlot", 						"Gui", "Gui", 						"GameSettings", "GameSettings", 						"Session", "Session", 						"EntityRenderer", "EntityRenderer", 						"RenderHelper", "RenderHelper", 						"OpenGlHelper", "OpenGlHelper", 						"BlockMushroom", "BlockMushroom", 						"EnumAction", "EnumAction", 						"ItemMap", "ItemMap", 						"DataWatcher", "DataWatcher", 						"TexturedQuad", "TexturedQuad", 						"PositionTextureVertex", "PositionTextureVertex", 						"Vec3", "Vec3", 						"EnumCreatureType", "EnumCreatureType", 						"ModelRenderer", "ModelRenderer", 						"WorldSettings", "WorldSettings", 						"WorldSettings.GameType", "WorldSettings.GameType", 						"EntityCreature", "EntityCreature", 						"Potion", "Potion", 						"EntityItem", "EntityItem", 						"EntityAnimal", "EntityAnimal", 						"BiomeGenBase", "BiomeGenBase", 						"EntityLiving", "EntityLiving", 						"EntityArrow", "EntityArrow", 						"CreativeTabs", "CreativeTabs", 						"EntityHorse", "EntityHorse", 						"EntityTameable", "EntityTameable", 						"NBTTagCompound", "NBTTagCompound", 						"TileEntitySkullRenderer", "TileEntitySkullRenderer", 						"IIcon", "IIcon", 						"GLAllocation", "GLAllocation", 						"PotionHelper", "PotionHelper", 						"ItemBow", "ItemBow", 						"ModelBox", "ModelBox", 						"RenderBlocks", "RenderBlocks", 						"WorldClient", "WorldClient", 						"WorldServer", "WorldServer", 						"TextureOffset", "TextureOffset", 						"ModelQuadruped", "ModelQuadruped", 						"ModelBat", "ModelBat", 						"ModelBlaze", "ModelBlaze", 						"ModelChicken", "ModelChicken", 						"ModelCreeper", "ModelCreeper", 						"ModelGhast", "ModelGhast", 						"ModelIronGolem", "ModelIronGolem", 						"ModelOcelot", "ModelOcelot", 						"ModelSnowMan", "ModelSnowMan", 						"ModelSpider", "ModelSpider", 						"ModelSquid", "ModelSquid", 						"ModelWolf", "ModelWolf", 						"GuiMainMenu", "GuiMainMenu", 						"ScaledResolution", "ScaledResolution", 						"Framebuffer", "", 						"GuiIngameMenu", "GuiIngameMenu", 						"GuiControls", "GuiControls", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "Facing", 						"BlockLiquid", "BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "NetworkManager", 						"EntityPlayerMP", "EntityPlayerMP", 						"ItemPotion", "ItemPotion", 						"Container", "Container", 						"SharedMonsterAttributes", "SharedMonsterAttributes", 						"ModelBiped", "ModelBiped", 						"LoadingScreenRenderer", "LoadingScreenRenderer", 						"ItemBlock", "ItemBlock", 						"EntityZombie", "EntityZombie", 						"TextureMap", "TextureMap", 						"ItemDoublePlant", "ItemDoublePlant", 						"BlockPos", "BlockPos", 						"IBlockState", "IBlockState", 						"ModelResourceLocation", "ModelResourceLocation", 						"BaseMod", "net.minecraft.src.BaseMod", 						"ModLoader", "net.minecraft.src.ModLoader", 						"FMLCommonHandler", "cpw.mods.fml.common.FMLCommonHandler", 						"GameRegistry", "cpw.mods.fml.common.registry.GameRegistry", 						"EntityRegistry", "cpw.mods.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "cpw.mods.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "cpw.mods.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "cpw.mods.fml.client.registry.RenderingRegistry", 						"Loader", "cpw.mods.fml.common.Loader", 						"ModContainer", "cpw.mods.fml.common.ModContainer", 						"NetworkRegistry", "cpw.mods.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "cpw.mods.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "MMM_IModelCaps", 				};			}			else if (version < 160) {				s1 = new String []{						"Minecraft", "net.minecraft.client.Minecraft", 						"AbstractClientPlayer", "EntityPlayer", 						"EntityLivingBase", "EntityLiving", 						"RendererLivingEntity", "RenderLiving", 						"ResourceLocation", "java.lang.String", 						"RenderEngine", "RenderEngine", 						"MapItemRenderer", "MapItemRenderer", 						"TextureUtil", "", 						"Resource", "", 						"ResourceManager", "", 						"TextureManager", "TextureManager", 						"Entity", "Entity", 						"AxisAlignedBB", "AxisAlignedBB", 						"World", "World", 						"EntityPlayer", "EntityPlayer", 						"EntityVillager", "EntityVillager", 						"NetClientHandler", "NetClientHandler", 						"EnumGameType", "EnumGameType", 						"FontRenderer", "FontRenderer", 						"Block", "Block", 						"Item", "Item", 						"ItemStack", "ItemStack", 						"KeyBinding", "KeyBinding", 						"BlockFlower", "BlockFlower", 						"BlockLeaves", "BlockLeaves", 						"BlockPumpkin", "BlockPumpkin", 						"EntityList", "EntityList", 						"Render", "Render", 						"GuiScreen", "GuiScreen", 						"RenderManager", "RenderManager", 						"MathHelper", "MathHelper", 						"GLAllocation", "GLAllocation", 						"RenderManager", "RenderManager", 						"ItemRenderer", "ItemRenderer", 						"EntityClientPlayerMP", "EntityClientPlayerMP", 						"EntityOtherPlayerMP", "EntityOtherPlayerMP", 						"GuiChat", "GuiChat", 						"MovementInputFromOptions", "MovementInputFromOptions", 						"EntityPlayerSP", "EntityPlayerSP", 						"DamageSource", "DamageSource", 						"EnumCreatureAttribute", "EnumCreatureAttribute", 						"InventoryPlayer", "InventoryPlayer", 						"ModelBase", "ModelBase", 						"RenderBiped", "RenderBiped", 						"RenderPlayer", "RenderPlayer", 						"ItemArmor", "ItemArmor", 						"GuiButton", "GuiButton", 						"Tessellator", "Tessellator", 						"GuiSlot", "GuiSlot", 						"Gui", "Gui", 						"GameSettings", "GameSettings", 						"Session", "Session", 						"EntityRenderer", "EntityRenderer", 						"RenderHelper", "RenderHelper", 						"OpenGlHelper", "OpenGlHelper", 						"BlockMushroom", "BlockMushroom", 						"EnumAction", "EnumAction", 						"ItemMap", "ItemMap", 						"DataWatcher", "DataWatcher", 						"TexturedQuad", "TexturedQuad", 						"PositionTextureVertex", "PositionTextureVertex", 						"Vec3", "Vec3", 						"EnumCreatureType", "EnumCreatureType", 						"ModelRenderer", "ModelRenderer", 						"WorldSettings", "WorldSettings", 						"WorldSettings.GameType", "WorldSettings.GameType", 						"EntityCreature", "EntityCreature", 						"Potion", "Potion", 						"EntityItem", "EntityItem", 						"EntityAnimal", "EntityAnimal", 						"BiomeGenBase", "BiomeGenBase", 						"EntityLiving", "EntityLiving", 						"EntityArrow", "EntityArrow", 						"CreativeTabs", "CreativeTabs", 						"EntityHorse", "EntityHorse", 						"EntityTameable", "EntityTameable", 						"NBTTagCompound", "NBTTagCompound", 						"TileEntitySkullRenderer", "TileEntitySkullRenderer", 						"IIcon", "IIcon", 						"GLAllocation", "GLAllocation", 						"PotionHelper", "PotionHelper", 						"ItemBow", "ItemBow", 						"ModelBox", "ModelBox", 						"RenderBlocks", "RenderBlocks", 						"WorldClient", "WorldClient", 						"WorldServer", "WorldServer", 						"TextureOffset", "TextureOffset", 						"ModelQuadruped", "ModelQuadruped", 						"ModelBat", "ModelBat", 						"ModelBlaze", "ModelBlaze", 						"ModelChicken", "ModelChicken", 						"ModelCreeper", "ModelCreeper", 						"ModelGhast", "ModelGhast", 						"ModelIronGolem", "ModelIronGolem", 						"ModelOcelot", "ModelOcelot", 						"ModelSnowMan", "ModelSnowMan", 						"ModelSpider", "ModelSpider", 						"ModelSquid", "ModelSquid", 						"ModelWolf", "ModelWolf", 						"GuiMainMenu", "GuiMainMenu", 						"ScaledResolution", "ScaledResolution", 						"Framebuffer", "", 						"GuiIngameMenu", "GuiIngameMenu", 						"GuiControls", "GuiControls", 						"ModelPlayer", "", 						"LayerArmorBase", "", 						"Facing", "Facing", 						"BlockLiquid", "BlockLiquid", 						"MinecraftServer", "net.minecraft.server.MinecraftServer", 						"NetworkManager", "NetworkManager", 						"EntityPlayerMP", "EntityPlayerMP", 						"ItemPotion", "ItemPotion", 						"Container", "Container", 						"SharedMonsterAttributes", "SharedMonsterAttributes", 						"ModelBiped", "ModelBiped", 						"LoadingScreenRenderer", "LoadingScreenRenderer", 						"ItemCameraTransforms", "ItemCameraTransforms", 						"ItemCameraTransforms$TransformType", "ItemCameraTransforms$TransformType", 						"ItemBlock", "ItemBlock", 						"EntityZombie", "EntityZombie", 						"TextureMap", "TextureMap", 						"ItemDoublePlant", "ItemDoublePlant", 						"BlockPos", "BlockPos", 						"IBlockState", "IBlockState", 						"ModelResourceLocation", "ModelResourceLocation", 						"BaseMod", "net.minecraft.src.BaseMod", 						"ModLoader", "net.minecraft.src.ModLoader", 						"FMLCommonHandler", "cpw.mods.fml.common.FMLCommonHandler", 						"GameRegistry", "cpw.mods.fml.common.registry.GameRegistry", 						"EntityRegistry", "cpw.mods.fml.common.registry.EntityRegistry", 						"LanguageRegistry", "cpw.mods.fml.common.registry.LanguageRegistry", 						"ClientRegistry", "cpw.mods.fml.client.registry.ClientRegistry", 						"RenderingRegistry", "cpw.mods.fml.client.registry.RenderingRegistry", 						"Loader", "cpw.mods.fml.common.Loader", 						"ModContainer", "cpw.mods.fml.common.ModContainer", 						"NetworkRegistry", "cpw.mods.fml.common.network.NetworkRegistry", 						"FMLClientHandler", "cpw.mods.fml.client.FMLClientHandler", 						"decoBlock", "net.minecraft.decoblock.DecoBlock", 						"decoBlockBase", "net.minecraft.decoblock.base.BaseBlock", 						"favBlock", "net.minecraft.favstar.BlockFav", 						"MMM_IModelCaps", "MMM_IModelCaps", 				};			}		}		if (s1 != null) {			Modchu_Debug.lDebug("Modchu_Reflect initNameMap 1 s1.length="+s1.length);			for(int i = 0; i < s1.length - 1; i += 2) {				classNameMap.put(s1[i], s1[i + 1]);			}		}		s1 = null;		switch(version) {		case 152:			s1 = new String []{					"field_77110_j", "h", 					"func_82441_a", "a", 					"func_71061_d_", "aa", 					"func_70105_a", "a", 					"field_75623_d", "d", 					"func_70301_a", "a", 					"field_70462_a", "a", 					"func_70301_a", "a", 					"func_71052_bv", "bL", 					"field_70460_b", "b", 					"field_82424_k", "l", 					"func_110143_aJ", "aM", 					"field_70760_ar", "az", 					"field_70761_aq", "ay", 					"field_70758_at", "aB", 					"field_70759_as", "aA", 					"field_70722_aY", "bh", 					"field_70721_aZ", "bi", 					"field_70754_ba", "bj", 					"func_70631_g_", "g_", 					"func_78086_a", "a", 					"func_382_a", "a", 					"field_70737_aN", "aW", 					"field_70725_aQ", "aZ", 					"func_77033_b", "b", 					"func_110309_l", "p", 					"field_20047_bv", "bA", 					"field_622_aY", "bB", 					"func_76984_a", "a", 					"func_82150_aj", "ai", 					"func_82241_s", "r", 					"func_77105_b", "a", 					"func_77102_a", "a", 					"field_71442_b", "b", 					"field_71460_t", "u", 					"field_71439_g", "g", 					"field_71441_e", "e", 					"field_71415_G", "H", 					"field_71474_y", "z", 					"field_1064_b", "b", 					"field_4209_q", "t", 					"field_6313_p", "n", 					"field_6323_f", "fg", 					"func_71410_x", "x", 					"func_110300_d", "d", 					"func_110304_a", "a", 					"func_110306_p", "r", 					"func_110309_l", "p", 					"func_110557_a", "a", 					"func_76976_a", "a", 					"func_71391_r", "r", 					"func_71356_B", "C", 					"func_110138_aP", "aS", 					"func_110536_a", "a", 					"func_110442_L", "K", 					"func_110776_a", "a", 					"func_110623_a", "a", 					"func_130087_a", "a", 					"func_110577_a", "a", 					"func_110432_I", "H", 					"func_70073_O", "N", 					"field_70120_cr", "cv", 					"func_78350_a", "a", 					"func_110434_K", "J", 					"field_71412_D", "x", 					"func_71373_a", "a", 					"field_74320_O", "aa", 					"func_110987_a", "a", 					"field_71446_o", "p", 					"func_78351_a", "a", 					"func_77220_a", "a", 					"func_130000_a", "a", 					"field_70734_aK", "aU", 					"func_71386_F", "G", 					"func_110527_b", "b", 					"func_110857_a", "a", 					"func_77031_a", "a", 					"field_70475_c", "h", 					"func_71380_b", "b", 					"func_76985_a", "a", 					"field_71462_r", "s", 					"field_71456_v", "w", 					"field_73886_k", "q", 					"func_71354_a", "a", 					"field_71451_h", "h", 					"func_78745_b", "b", 					"func_78064_b", "b", 					"func_607_d", "d", 					"field_71466_p", "q", 					"field_71456_v", "w", 					"func_94277_a", "b", 					"func_110311_f", "", 					"field_110316_a", "", 					"field_78729_o", "q", 					"func_73827_b", "c", 					"func_73765_a", "a", 					"field_142025_a", "a", 					"func_71376_c", "c", 					"field_78779_k", "k", 					"func_78746_a", "a", 					"func_78748_a", "a", 					"func_41014_d", "d", 					"field_71158_b", "b", 					"func_78758_h", "h", 					"func_6473_b", "b", 					"func_6420_o", "ab", 					"func_40117_c", "d", 					"field_41031_b", "bx", 					"field_70173_aa", "ac", 					"field_70165_t", "u", 					"field_70163_u", "v", 					"field_70161_v", "w", 					"field_70121_D", "E", 					"field_72337_e", "e", 					"func_70093_af", "ag", 					"func_72799_c", "c", 					"field_70154_o", "o", 					"field_70157_k", "k", 					"field_70181_x", "y", 					"field_70718_bc", "", 					"func_70684_aJ", "", 					"field_70717_bb", "", 					"func_70693_a", "", 					"field_76988_d", "a", 					"field_76990_c", "c", 					"field_71092_bJ", "bS", 					"field_71100_bB", "bN", 					"field_70703_bu", "bG", 					"field_76989_e", "d", 					"field_76987_f", "e", 					"func_77043_a", "a", 					"func_71868_h", "k", 					"field_70134_J", "K", 					"field_70701_bs", "bE", 					"field_70702_br", "bD", 					"func_78342_b", "b", 					"func_78713_a", "a", 					"func_78443_a", "a", 					"field_71443_c", "c", 					"field_71440_d", "d", 					"field_71416_A", "B", 					"func_77366_a", "a", 					"field_73883_a", "a", 					"func_73875_a", "a", 					"func_71387_A", "B", 					"field_71437_Z", "ab", 					"func_71344_c", "an", 					"field_73319_a", "k", 					"field_74516_a", "a", 					"field_74515_c", "c", 					"field_74512_d", "d", 					"field_78516_c", "c", 					"field_73438_a", "cp", 					"field_71973_m", "r", 					"field_77756_aW", "aX", 					"field_74513_e", "e", 					"field_74511_f", "f", 					"field_77993_c", "c", 					"field_82512_cj", "bR", 					"field_77698_e", "f", 					"field_77747_aY", "aZ", 					"field_77820_ah", "ai", 					"field_73815_a", "m", 					"field_77798_ai", "aj", 					"field_77800_aj", "ak", 					"field_77794_ak", "al", 					"field_77744_bd", "be", 					"func_77042_a", "a", 					"field_77046_h", "j", 					"func_76986_a", "a", 					"func_70678_g", "g", 					"func_77041_b", "a", 					"func_77039_a", "a", 					"func_77973_b", "b", 					"field_78727_a", "a", 					"func_70440_f", "f", 					"field_77994_a", "c", 					"func_77948_v", "x", 					"func_76126_a", "a", 					"func_76134_b", "b", 					"field_78783_a", "a", 					"field_78782_b", "b", 					"func_70608_bn", "bz", 					"field_70130_N", "O", 					"field_70131_O", "P", 					"func_74527_f", "f", 					"func_74526_a", "a", 					"func_77960_j", "j", 					"func_76129_c", "c", 					"func_78715_a", "a", 					"field_71942_A", "F", 					"field_71943_B", "E", 					"field_78721_f", "f", 					"func_72912_H", "M", 					"func_73081_b", "q", 					"field_71093_bK", "ar", 					"func_70106_y", "w", 					"field_71071_by", "bK", 					"field_74351_w", "I", 					"field_74368_y", "K", 					"field_74370_x", "J", 					"field_74366_z", "L", 					"field_73388_b", "x", 					"field_73389_c", "y", 					"field_73387_d", "z", 					"func_70115_ae", "af", 					"func_70107_b", "b", 					"func_70047_e", "e", 					"func_76128_c", "c", 					"field_70129_M", "N", 					"func_72935_r", "v", 					"func_70013_c", "c", 					"func_72937_j", "l", 					"func_70015_d", "d", 					"func_70026_G", "F", 					"field_76366_f", "f", 					"field_76367_g", "g", 					"field_76368_d", "d", 					"field_76369_e", "e", 					"field_76370_b", "b", 					"field_76371_c", "c", 					"field_76372_a", "a", 					"field_76377_j", "j", 					"field_76378_k", "k", 					"field_76379_h", "h", 					"field_76380_i", "i", 					"field_82727_n", "l", 					"field_82728_o", "m", 					"field_82729_p", "n", 					"field_72995_K", "I", 					"func_70090_H", "G", 					"field_72340_a", "a", 					"field_72338_b", "b", 					"field_72339_c", "c", 					"field_72336_d", "d", 					"field_72337_e", "e", 					"field_72334_f", "f", 					"func_72887_b", "c", 					"func_71024_bL", "cn", 					"func_77944_b", "b", 					"field_77880_c", "d", 					"func_74519_b", "b", 					"func_74518_a", "a", 					"field_70177_z", "C", 					"field_70127_C", "A", 					"field_70125_A", "B", 					"func_70448_g", "h", 					"func_77975_n", "o", 					"func_70070_b", "b", 					"field_70126_B", "C", 					"func_110310_o", "", 					"field_71091_bM", "bU", 					".field_71096_bN", "bV", 					"field_71097_bO", "bW", 					"field_71094_bP", "bX", 					"field_71095_bQ", "bY", 					"field_71085_bR", "bZ", 					"field_70169_q", "r", 					"field_70167_r", "s", 					"field_70166_s", "t", 					"field_71107_bF", "bQ", 					"field_71109_bG", "bR", 					"field_70141_P", "Q", 					"field_70140_Q", "R", 					"func_78087_a", "a", 					"field_110798_h", "", 					"field_77476_b", "", 					"field_77478_a", "a", 					"func_77473_a", "a", 					"field_73887_h", "k", 					"field_73880_f", "h", 					"field_73881_g", "i", 					"func_78276_b", "a", 					"func_78719_a", "a", 					"field_73742_g", "g", 					"field_73741_f", "f", 					"field_78398_a", "a", 					"func_78382_b", "b", 					"func_78374_a", "a", 					"func_78381_a", "a", 					"field_73010_i", "h", 					"func_73875_a", "a", 					"func_73863_a", "a", 					"func_73732_a", "b", 					"func_74298_c", "c", 					"field_85185_A", "A", 					"func_78374_a", "a", 					"func_78384_a", "a", 					"func_78600_a", "a", 					"field_78724_e", "e", 					"func_73731_b", "b", 					"field_146292_n", "k", 					"func_147940_a", "a", 					"field_146127_k", "f", 					"field_146124_l", "g", 					"field_77045_g", "i", 					"func_70096_w", "u", 					"func_111145_d", "", 					"field_71449_j", "k", 					"field_72770_i", "p", 					"field_71423_H", "I", 					"field_73746_c", "c", 					"field_73743_d", "d", 					"field_73748_h", "h", 					"field_73747_a", "a", 					"field_73745_b", "b", 					"func_78236_a", "a", 					"func_78240_a", "a", 					"field_78243_a", "a", 					"func_72444_a", "a", 					"func_72431_c", "e", 					"func_72443_a", "a", 					"func_78371_b", "b", 					"func_78375_b", "b", 					"field_78241_b", "b", 					"field_78242_c", "c", 					"func_72432_b", "a", 					"func_77211_a", "a", 					"func_77219_a", "a", 					"field_110153_bc", "bB", 					"func_70647_i", "aY", 					"func_70599_aP", "ba", 					"field_70787_b", "b", 					"field_70789_a", "a_", 					"func_70665_d", "d", 					"field_70718_bc", "bl", 					"func_70018_K", "J", 					"field_70882_e", "e", 					"field_70881_d", "d", 					"field_78253_h", "h", 					"field_78254_i", "i", 					"field_110447_Z", "", 					"field_78092_r", "r", 					"field_78801_a", "t", 					"field_78799_b", "u", 					"field_75624_e", "e",					"func_175273_b", "",					"func_111206_d", "",					"func_78789_a", "a",					"func_78786_a", "a",					"func_78790_a", "a",					"field_77791_bV", "ct",					"field_111218_cA", "",					"func_78785_a", "a",					"func_78794_c", "c",					"func_78791_b", "b",					"field_78800_c",  "c", 					"field_78797_d",  "d", 					"field_78798_e",  "e", 					"field_78795_f",  "f", 					"field_78796_g",  "g", 					"field_78808_h",  "h", 					"field_78806_j",  "j", 					"func_75691_i",  "i", 					"func_75669_b",  "b", 					"field_70776_bF",  "bY", 					"field_70708_bq",  "", 					"field_70700_bx",  "bJ", 			};			break;		case 162:			s1 = new String []{					"field_77110_j", "h", 					"func_82441_a", "b", 					"func_71061_d_", "aa", 					"func_70105_a", "a", 					"field_75623_d", "d", 					"func_70301_a", "a", 					"field_70462_a", "a", 					"func_70301_a", "a", 					"func_71052_bv", "bL", 					"field_70460_b", "b", 					"field_82424_k", "l", 					"func_110143_aJ", "aM", 					"field_70760_ar", "aO", 					"field_70761_aq", "aN", 					"field_70758_at", "aQ", 					"field_70759_as", "aP", 					"field_70722_aY", "aF", 					"field_70721_aZ", "aG", 					"field_70754_ba", "aH", 					"func_70631_g_", "g_", 					"func_78086_a", "a", 					"func_382_a", "a", 					"field_70737_aN", "ay", 					"field_70725_aQ", "aB", 					"func_77033_b", "b", 					"func_110309_l", "p", 					"field_20047_bv", "bA", 					"field_622_aY", "bB", 					"func_76984_a", "a", 					"func_82150_aj", "ai", 					"func_82241_s", "r", 					"func_77105_b", "a", 					"func_77102_a", "a", 					"field_71442_b", "c", 					"field_71460_t", "p", 					"field_71439_g", "h", 					"field_71441_e", "f", 					"field_71415_G", "A", 					"field_71474_y", "u", 					"field_1064_b", "b", 					"field_4209_q", "t", 					"field_6313_p", "n", 					"field_6323_f", "g", 					"func_71410_x", "w", 					"func_110300_d", "d", 					"func_110304_a", "a", 					"func_110306_p", "r", 					"func_110309_l", "p", 					"func_110557_a", "a", 					"func_76976_a", "a", 					"func_71391_r", "q", 					"func_71356_B", "B", 					"func_110138_aP", "aS", 					"func_110536_a", "a", 					"func_110442_L", "K", 					"func_110776_a", "a", 					"func_110623_a", "a", 					"func_130087_a", "a", 					"func_110577_a", "a", 					"func_110432_I", "H", 					"func_70073_O", "N", 					"field_70120_cr", "cv", 					"func_78350_a", "a", 					"func_110434_K", "J", 					"field_71412_D", "x", 					"func_71373_a", "a", 					"field_74320_O", "aa", 					"func_110987_a", "a", 					"field_71446_o", "p", 					"func_78351_a", "a", 					"func_77220_a", "a", 					"func_130000_a", "a", 					"field_70734_aK", "aU", 					"func_71386_F", "F", 					"func_110527_b", "b", 					"func_110857_a", "a", 					"func_77031_a", "a", 					"field_70475_c", "h", 					"func_71380_b", "b", 					"func_76985_a", "a", 					"field_71462_r", "n", 					"field_71456_v", "r", 					"field_73886_k", "o", 					"func_71354_a", "a", 					"field_71451_h", "h", 					"func_78745_b", "b", 					"func_78064_b", "b", 					"func_607_d", "d", 					"field_71466_p", "l", 					"field_71456_v", "r", 					"func_94277_a", "b", 					"func_110311_f", "f", 					"field_110316_a", "a", 					"field_78729_o", "q", 					"func_73827_b", "c", 					"func_73765_a", "a", 					"field_142025_a", "a", 					"func_71376_c", "", 					"field_78779_k", "k", 					"func_78746_a", "a", 					"func_78748_a", "a", 					"func_41014_d", "", 					"field_71158_b", "c", 					"func_78758_h", "h", 					"func_6473_b", "b", 					"func_6420_o", "", 					"func_40117_c", "", 					"field_41031_b", "", 					"field_70173_aa", "ac", 					"field_70165_t", "u", 					"field_70163_u", "v", 					"field_70161_v", "w", 					"field_70121_D", "E", 					"field_72337_e", "e", 					"func_70093_af", "ag", 					"func_72799_c", "c", 					"field_70154_o", "o", 					"field_70157_k", "k", 					"field_70181_x", "y", 					"field_70718_bc", "aT", 					"func_70684_aJ", "aB", 					"field_70717_bb", "aS", 					"func_70693_a", "e", 					"field_76988_d", "c", 					"field_76990_c", "b", 					"field_71092_bJ", "bu", 					"field_71100_bB", "bq", 					"field_70703_bu", "bd", 					"field_76989_e", "d", 					"field_76987_f", "e", 					"func_77043_a", "a", 					"func_71868_h", "k", 					"field_70134_J", "K", 					"field_70701_bs", "be", 					"field_70702_br", "bf", 					"func_78342_b", "", 					"func_78713_a", "a", 					"func_78443_a", "a", 					"field_71443_c", "d", 					"field_71440_d", "e", 					"field_71416_A", "v", 					"func_77366_a", "a", 					"field_73883_a", "a", 					"func_73875_a", "a", 					"func_71387_A", "A", 					"field_71437_Z", "Z", 					"func_71344_c", "c", 					"field_73319_a", "k", 					"field_74516_a", "a", 					"field_74515_c", "c", 					"field_74512_d", "d", 					"field_78516_c", "c", 					"field_73438_a", "cv", 					"field_71973_m", "s", 					"field_77756_aW", "aY", 					"field_74513_e", "e", 					"field_74511_f", "f", 					"field_77993_c", "d", 					"field_82512_cj", "bS", 					"field_77698_e", "g", 					"field_77747_aY", "ba", 					"field_77820_ah", "aj", 					"field_73815_a", "o", 					"field_77798_ai", "ak", 					"field_77800_aj", "al", 					"field_77794_ak", "am", 					"field_77744_bd", "bf", 					"func_77042_a", "a", 					"field_77046_h", "j", 					"func_76986_a", "a", 					"func_70678_g", "k", 					"func_77041_b", "a", 					"func_77039_a", "a", 					"func_77973_b", "b", 					"field_78727_a", "a", 					"func_70440_f", "f", 					"field_77994_a", "b", 					"func_77948_v", "y", 					"func_76126_a", "a", 					"func_76134_b", "b", 					"field_78783_a", "a", 					"field_78782_b", "b", 					"func_70608_bn", "bg", 					"field_70130_N", "O", 					"field_70131_O", "P", 					"func_74527_f", "f", 					"func_74526_a", "a", 					"func_77960_j", "j", 					"func_76129_c", "c", 					"func_78715_a", "a", 					"field_71942_A", "G", 					"field_71943_B", "F", 					"field_78721_f", "f", 					"func_72912_H", "N", 					"func_73081_b", "q", 					"field_71093_bK", "ar", 					"func_70106_y", "w", 					"field_71071_by", "bn", 					"field_74351_w", "I", 					"field_74368_y", "K", 					"field_74370_x", "J", 					"field_74366_z", "L", 					"field_73388_b", "x", 					"field_73389_c", "y", 					"field_73387_d", "z", 					"func_70115_ae", "af", 					"func_70107_b", "b", 					"func_70047_e", "f", 					"func_76128_c", "c", 					"field_70129_M", "N", 					"func_72935_r", "v", 					"func_70013_c", "d", 					"func_72937_j", "l", 					"func_70015_d", "d", 					"func_70026_G", "F", 					"field_76366_f", "f", 					"field_76367_g", "g", 					"field_76368_d", "d", 					"field_76369_e", "e", 					"field_76370_b", "b", 					"field_76371_c", "c", 					"field_76372_a", "a", 					"field_76377_j", "j", 					"field_76378_k", "k", 					"field_76379_h", "h", 					"field_76380_i", "i", 					"field_82727_n", "l", 					"field_82728_o", "m", 					"field_82729_p", "n", 					"field_72995_K", "I", 					"func_70090_H", "G", 					"field_72340_a", "a", 					"field_72338_b", "b", 					"field_72339_c", "c", 					"field_72336_d", "d", 					"field_72337_e", "e", 					"field_72334_f", "f", 					"func_72887_b", "c", 					"func_71024_bL", "bH", 					"func_77944_b", "b", 					"field_77880_c", "d", 					"func_74519_b", "b", 					"func_74518_a", "a", 					"field_70177_z", "C", 					"field_70127_C", "A", 					"field_70125_A", "B", 					"func_70448_g", "h", 					"func_77975_n", "o", 					"func_70070_b", "c", 					"field_70126_B", "C", 					"func_110310_o", "q", 					"field_71091_bM", "bw", 					".field_71096_bN", "bx", 					"field_71097_bO", "by", 					"field_71094_bP", "bz", 					"field_71095_bQ", "bA", 					"field_71085_bR", "bB", 					"field_70169_q", "r", 					"field_70167_r", "s", 					"field_70166_s", "t", 					"field_71107_bF", "bs", 					"field_71109_bG", "bt", 					"field_70141_P", "Q", 					"field_70140_Q", "R", 					"func_78087_a", "a", 					"field_110798_h", "a", 					"field_77476_b", "b", 					"field_77478_a", "a", 					"func_77473_a", "a", 					"field_73887_h", "i", 					"field_73880_f", "g", 					"field_73881_g", "h", 					"func_78276_b", "a", 					"func_78719_a", "a", 					"field_73742_g", "h", 					"field_73741_f", "g", 					"field_78398_a", "a", 					"func_78382_b", "b", 					"func_78374_a", "a", 					"func_78381_a", "a", 					"field_73010_i", "h", 					"func_73875_a", "a", 					"func_73863_a", "a", 					"func_73732_a", "b", 					"func_74298_c", "c", 					"field_85185_A", "A", 					"func_78374_a", "a", 					"func_78384_a", "a", 					"func_78600_a", "a", 					"field_78724_e", "e", 					"func_73731_b", "b", 					"field_146292_n", "i", 					"func_147940_a", "a", 					"field_146127_k", "g", 					"field_146124_l", "h", 					"field_77045_g", "i", 					"func_70096_w", "u", 					"func_111145_d", "d", 					"field_71449_j", "U", 					"field_72770_i", "N", 					"field_71423_H", "B", 					"field_73746_c", "d", 					"field_73743_d", "e", 					"field_73748_h", "i", 					"field_73747_a", "b", 					"field_73745_b", "c", 					"func_78236_a", "a", 					"func_78240_a", "a", 					"field_78243_a", "a", 					"func_72444_a", "a", 					"func_72431_c", "e", 					"func_72443_a", "a", 					"func_78371_b", "b", 					"func_78375_b", "b", 					"field_78241_b", "b", 					"field_78242_c", "c", 					"func_72432_b", "a", 					"func_77211_a", "a", 					"func_77219_a", "a", 					"field_110153_bc", "bc", 					"func_70647_i", "ba", 					"func_70599_aP", "aZ", 					"field_70787_b", "bn", 					"field_70789_a", "j", 					"func_70665_d", "d", 					"field_70718_bc", "aT", 					"func_70018_K", "J", 					"field_70882_e", "bq", 					"field_70881_d", "bp", 					"field_78253_h", "h", 					"field_78254_i", "i", 					"field_110447_Z", "ab", 					"field_78092_r", "r", 					"field_78801_a", "t", 					"field_78799_b", "u", 					"field_75624_e", "e", 					"func_175273_b", "",					"func_111206_d", "d",					"func_78789_a", "a",					"func_78786_a", "a",					"func_78790_a", "a",					"field_77791_bV", "cz",					"field_111218_cA", "cA",					"func_78785_a", "a",					"func_78794_c", "c",					"func_78791_b", "b",					"field_78800_c",  "c", 					"field_78797_d",  "d", 					"field_78798_e",  "e", 					"field_78795_f",  "f", 					"field_78796_g",  "g", 					"field_78808_h",  "h", 					"field_78806_j",  "j", 					"func_75691_i",  "i", 					"func_75669_b",  "c", 					"field_70776_bF",  "bu", 					"field_70708_bq",  "aV", 					"field_70700_bx",  "g", 			};			break;		}		if (s1 != null) {			Modchu_Debug.lDebug("Modchu_Reflect initNameMap 2 s1.length="+s1.length);			for (int i = 0; i < s1.length - 1; i += 2) {				methodNameMap.put(s1[i], s1[i + 1]);			}		}		Object[] o1 = new Object[]{				"String", String.class,				"int", int.class,				"Integer", Integer.class,				"Byte", Byte.class,				"byte", byte.class,				"Float", Float.class,				"float", float.class,				"Double", Double.class,				"double", double.class,				"Long", Long.class,				"long", long.class,				"Short", Short.class,				"short", short.class,				"Boolean", Boolean.class,				"boolean", boolean.class,				"List", List.class,				"ArrayList", ArrayList.class,				"LinkedList", LinkedList.class,				"ConcurrentHashMap", ConcurrentHashMap.class,				"HashMap", HashMap.class,				"Map", Map.class,				"Enum", Enum.class,				"File", File.class,				"InputStream", InputStream.class,				"UUID", UUID.class		};		if (o1 != null) {			Modchu_Debug.lDebug("Modchu_Reflect initNameMap 3 o1.length="+o1.length);			for (int i = 0; i < o1.length - 1; i += 2) {				javaDefaultClassMap.put(o1[i].toString(), (Class) o1[i + 1]);			}		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap end. o1.length="+o1.length);	}	public static Class getTopSuperClass(Object o) {		Class c = null;		for (c = o.getClass(); c != Object.class; c = c.getSuperclass()) {		}		return c;	}	public static Map<String, Object> getAllFieldObject(Object o) {		return getAllFieldObject(o, true, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, int i) {		return getAllFieldObject(o, true, i);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b) {		return getAllFieldObject(o, b, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b, int i) {		Map map = new HashMap();		if (o != null) {			Class c = o.getClass();			while (c != null) {				Field[] f = null;				try {					f = c.getDeclaredFields();					for (Field f1 : f) {						if (f1 != null) f1.setAccessible(true);						String s = f1.getName();						Object o1 = f1.get(o);						map.put(s, o1);					}				} catch (Exception e2) {					if (debugDisplayDetail(i)) printStackTrace(e2);				}				if (b) c = c.getSuperclass();				else c = null;			};		}		return map;	}}