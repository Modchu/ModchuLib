package modchu.lib;import java.io.BufferedReader;import java.io.File;import java.io.InputStream;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.UUID;import java.util.concurrent.ConcurrentHashMap;public class Modchu_Reflect {	public static boolean debugReflectMessage = true;	public static boolean debugReflectMessageDetail = false;	private static ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Class> javaDefaultClassMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Method> methodMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Field> fieldMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, String> classNameMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, String> fieldOrMethodNameMap = new ConcurrentHashMap();	private static List<String> ngClassList = new ArrayList();	private static List<String> ngMethodList = new ArrayList();	private static List<String> ngFieldList = new ArrayList();	public static void setDebugMessage(boolean b) {		debugReflectMessage = b;	}	public static void setDebugMessageDetail(boolean b) {		debugReflectMessageDetail = b;	}	public static boolean copyFields(Class var0, Object var1, Object var2) {		boolean b = false;		Field[] ff = var0.getDeclaredFields();		for (int var4 = 0; var4 < ff.length; ++var4) {			Field f = ff[var4];			int var6 = f.getModifiers();			if (!Modifier.isStatic(var6) && !Modifier.isFinal(var6)) {				f.setAccessible(true);				setFieldObject(f, var2, getFieldObject(f, var1));				b = true;			}		}		return b;	}	public static boolean setFieldObject(Field var0, Object var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Field var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				var0.set(var1, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2);		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(null, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3) {		return setFieldObject(var0, var1, var2, var3, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(null, var3);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var4, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var4, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4) {		return setFieldObject(var0, var1, var2, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(var2, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, var4, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, var4, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4) {		return setFieldObject(var0, var1, var2, var3, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(var3, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static Object getFieldObject(Field var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Field var0, Object var1, int i) {		try {			if (var0 != null) return var0.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, Object var1, int i) {		Field f = null;		try {			f = getField(var0, null, i);			if (f != null) return f.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, String var1, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, Object var2, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, Object var2, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0, i);			if (c != null) f = getField(c, var1, i);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(String var0, String var1, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0, i);			if (c != null) f = getField(c, var1, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) f = getField(c, var1, var2, i);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Field getField(Class var0, String var1, String var2) {		return getField(var0, var1, var2, 1);	}	public static Field getField(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = getField(var0, var1, i);		return f;	}	public static Field getField(Class var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(Class var0, String var1, int i) {		Field f = null;		try {			f = getRawField(var0, var1, i);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	public static Field getField(String var0, String var1, String var2) {		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, 1);		if (f != null) return f;		f = getField(var0, var2, 1);		return f;	}	public static Field getField(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, i);		return f;	}	public static Field getField(String var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(String var0, String var1, int i) {		Field f = null;		try {			f = getRawField(loadClass(var0), var1, i);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	private static Field getRawField(Class var0, String var1) {		return getRawField(var0, var1, 1);	}	private static Field getRawField(Class var0, String var1, int i) {		String s = var0.getName() + "," + var1;		if (fieldMap.containsKey(s)) return fieldMap.get(s);		if (ngFieldList.contains(s)				&& i > -2) {			if (i > -1) {				String s1 = "getRawField ngFieldList.contains s="+s;				if (Modchu_Main.getMinecraftVersion() < 164) {					Modchu_Debug.lDebug(s1);				} else {					Modchu_Debug.mDebug(s1);				}			}			return null;		}		Field f = null;		Exception[] e = new Exception[10];		int eCount = 0;		if (var1 != null && var0 != null) {			String var2 = getFieldOrMethodName(var1);			try {				f = var0.getDeclaredField(var2);				fieldMap.put(s, f);				return f;			} catch (Exception e2) {				e[eCount] = e2;				eCount++;			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var2);				fieldMap.put(s, f);				return f;			} catch (Exception e3) {			}			try {				f = var0.getDeclaredField(var1);				fieldMap.put(s, f);				return f;			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var1);				fieldMap.put(s, f);				return f;			} catch (Exception e3) {			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getField Class=" + var0 + " String=" + var1);			for (Class c = var0; c != Object.class; c = c.getSuperclass()) {				try {					if (c != null) f = c.getDeclaredField(var1);					if (f != null) {						f.setAccessible(true);						fieldMap.put(s, f);						return f;					}				} catch (Exception e4) {					if (eCount < e.length) {						e[eCount] = e4;						eCount++;					}				}			}		}		if (i > -1) {			for (int i2 = 0; i2 < 10; i2++) {				printStackTrace(e[i2]);			}		}		ngFieldList.add(s);		return f;	}	public static Method getMethod(Class var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, 1);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(Class var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(Class var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(Class var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2, int i) {		String s = var0.getName() + "," + var1;		if (var2 != null				&& var2.length > 0) {			StringBuilder sd = new StringBuilder().append(s);			int i1 = 0;			for (Class c : var2) {				String name = c != null ? c.getName() : null;				if (name != null						&& !name.isEmpty()) sd.append(",").append(name);				else {					Modchu_Debug.lDebug1("getRawMethod Class[] null error !! var0="+var0+" var1="+var1);					return null;				}				i1++;			}			s = sd.toString();			sd = null;		}		//Modchu_Debug.mDebug("getRawMethod s="+s);		if (methodMap.containsKey(s)) return (Method) methodMap.get(s);		if (ngMethodList.contains(s)) {			if (i > -1) {				String s1 = "getRawMethod ngMethodList.contains s="+s;				if (Modchu_Main.getMinecraftVersion() < 164) {					Modchu_Debug.lDebug(s1);				} else {					Modchu_Debug.mDebug(s1);				}			}			return null;		}		//Modchu_Debug.mDebug("getRawMethod s="+s);		Method method = null;		Exception[] e = new Exception[10];		int eCount = 0;		if (var1 != null) {			String var3 = getFieldOrMethodName(var1);			try {				if (var0 != null) method = var0.getDeclaredMethod(var3, var2);				if (method != null) {					method.setAccessible(true);					methodMap.put(s, method);					return method;				}			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			try {				if (var0 != null) method = var0.getDeclaredMethod(var1, var2);				if (method != null) {					method.setAccessible(true);					methodMap.put(s, method);					return method;				}			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			//if (var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.mDebug("Modchu_Reflect getRawMethod var0="+var0);			for (Class c = var0; c != null && c != Object.class; c = c.getSuperclass()) {				try {					method = c.getDeclaredMethod(var3, var2);					if (method != null) {						method.setAccessible(true);						methodMap.put(s, method);						return method;					}				} catch (Exception e2) {				}				try {					method = c.getDeclaredMethod(var1, var2);					if (method != null) {						method.setAccessible(true);						methodMap.put(s, method);						return method;					}				} catch (Exception e2) {					e[eCount] = e2;					eCount++;					if (eCount > 9) eCount = 9;				}			}		}		if (i > -1) {			if (var0 != null				&& var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.mDebug("Modchu_Reflect getRawMethod miss var0=" + var0 + " var1=" + var1 + " var2=" + (var2 != null ? var2.toString() : null));			for (int i2 = 0; i2 < 10; i2++) {				printStackTrace(e[i2]);			}		}		if (i > -3) ngMethodList.add(s);		return method;	}	public static Method getMethod(String var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3) {		return getMethod(var0, var1, var2, var3, 1);	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(String var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(String var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(String var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(String var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(String var0, String var1, Class[] var2, int i) {		Class c = null;		Method method = null;		if (var1 != null) {			try {				c = loadClass(var0, i);				if (c != null) method = c.getDeclaredMethod(var1, var2);				return method;			} catch (Exception e1) {				if (debugDisplayDetail(i)) printStackTrace(e1);			}			try {				if (c != null) method = c.getMethod(var1, var2);			} catch (Exception e) {				if (debugDisplay(i)) printStackTrace(e);			}		}		return method;	}	public static Object invoke(Method var0) {		return invoke(var0, 1);	}	public static Object invoke(Method var0, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1) {		return invoke(var0, var1, 1);	}	public static Object invoke(Method var0, Object var1, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1, var2);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object... var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object[] var2, int i) {		try {			if (var0 != null) return var0.invoke(var1, (Object[]) var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(String var0, String var1, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, i);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			if (debugDisplay(i)) printStackTrace(e);			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, null, (Object[]) var4, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Class loadClass(String var0) {		return loadClass(var0, 1);	}	public static Class loadClass(String var0, int i) {		if (var0 != null				&& !var0.isEmpty()); else {			Modchu_Debug.mDebug("Modchu_Reflect loadClass load missing class var0 null !!");			return null;		}		if (javaDefaultClassMap.containsKey(var0)) return javaDefaultClassMap.get(var0);		Class c = null;		var0 = var0.replace("\\", ".").replace("/", ".");		var0 = getClassName(var0);		if (var0 != null				&& !var0.isEmpty()); else {			Modchu_Debug.mDebug("Modchu_Reflect loadClass getClassName load missing class var0 null !!");			return null;		}		if (classMap.containsKey(var0)) return classMap.get(var0);		if (ngClassList.contains(var0)) return null;		try {			c = Class.forName(var0);			if (c != null) {				classMap.put(var0, c);				return c;			}		} catch (Error e) {			if (debugDisplayDetail(i)) printStackTraceError(e);		} catch (ClassNotFoundException e) {			if (debugDisplayDetail(i)) printStackTrace(e);		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		try {			String s = ""+var0;			s = s.replaceAll("net.minecraft.src.", "");			s = (!Modchu_Main.isRelease() ? "net.minecraft.src." : "") + (var0.indexOf(".") > -1 ? Modchu_Main.lastIndexProcessing(var0, ".") : var0);			s = getClassName(s);			c = Class.forName(s);			if (c != null) classMap.put(var0, c);		} catch (Error e1) {			if (debugDisplayDetail(i)) printStackTraceError(e1);		} catch (ClassNotFoundException e1) {			if (debugDisplayDetail(i)) printStackTrace(e1);		} catch (Exception e1) {			if (debugDisplayDetail(i)) printStackTrace(e1);		}		if (c != null) return c;		ngClassList.add(var0);		if (i != -1) Modchu_Debug.lDebug("Modchu_Reflect loadClass load missing class=" + var0);		else Modchu_Debug.mDebug("Modchu_Reflect loadClass load missing class=" + var0);		return null;	}	public static Class loadClassArray(String var0) {		return loadClassArray(var0, 1);	}	public static Class loadClassArray(String var0, int i) {		Object[] o = (Object[]) Array.newInstance(loadClass(var0), 2);		return o.getClass();	}	public static Object newInstance(String var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(Class var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3, int i) {		return newInstance(loadClass(var1), var2, var3, i);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor.newInstance(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object[] newInstanceArray(String var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(String var1, int i, int i2) {		Class c = null;		try {			c = loadClass(var1);			if (c != null) return (Object[]) Array.newInstance(c, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Object[] newInstanceArray(Class var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(Class var1, int i, int i2) {		Constructor constructor = null;		try {			if (var1 != null) return (Object[]) Array.newInstance(var1, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Constructor getConstructor(String var1, Class[] var2) {		return getConstructor(loadClass(var1), var2, 1);	}	public static Constructor getConstructor(String var1, Class[] var2, int i) {		return getConstructor(loadClass(var1), var2, i);	}	public static Constructor getConstructor(Class var1, Class[] var2) {		return getConstructor(var1, var2, 1);	}	public static Constructor getConstructor(Class var1, Class[] var2, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor;		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, 1);		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2, int i) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, i);		return null;	}	public static Object getPrivateValue(Class var0, Object var1, int var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, int var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception var4) {			if (debugDisplay(i)) var4.printStackTrace();		}		return null;	}	public static Object getPrivateValue(Class var0, Object var1, String var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, String var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					return f.get(var1);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}		return null;	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredFields()[var2];				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}	}	public static Enum getEnum(String var0, String var1) {		return getEnum(loadClass(var0), var1, 1);	}	public static Enum getEnum(String var0, String var1, int i) {		return getEnum(loadClass(var0), var1, i);	}	public static Enum getEnum(Class c, String var1) {		return getEnum(c, var1, 1);	}	public static Enum getEnum(Class c, String var1, int i) {		Enum en = null;		Object[] o = null;		try {			if (c != null) o = c.getEnumConstants();			if (o != null) {				for (int i1 = 0; i1 < o.length; i1++) {					if (((Enum)o[i1]).name().equalsIgnoreCase(var1)) {						en = (Enum) o[i1];						break;					}				}				return en;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Enum getEnum(String var0,  int i, int i1) {		return getEnum(loadClass(var0), i, i1);	}	public static Enum getEnum(Class c, int i, int i1) {		Enum en = null;		Object[] o = null;		try {			if (c != null) o = c.getEnumConstants();			if (o != null) {				if (o.length > i) {					en = (Enum) o[i];					return en;				}			}		} catch (Exception e) {			if (debugDisplay(i1)) printStackTrace(e);		}		return null;	}	private static boolean debugDisplay(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:			return debugReflectMessage;		case 2:			return debugReflectMessageDetail;		}		return false;	}	private static boolean debugDisplayDetail(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:			return debugReflectMessageDetail;		}		return false;	}	private static String reflectStringSetting(String var1, String var2) {		return Modchu_Main.isRelease() ? var1 : var2;	}	public static String getFieldOrMethodName(String s) {		if (Modchu_Main.isForge && Modchu_Main.getMinecraftVersion() > 150) return s;		if (fieldOrMethodNameMap != null && fieldOrMethodNameMap.containsKey(s)) {			return fieldOrMethodNameMap.get(s);		}		if (s.startsWith("field")				| s.startsWith("func")) Modchu_Debug.lDebug("getFieldOrMethodName check out s=" + s);		return s;	}	public static String getClassName(String s) {		int i1 = s.lastIndexOf("[]");		boolean flag = i1 > -1;		if (flag) s = s.substring(0, i1);		if (classNameMap != null && classNameMap.containsKey(s)) {			//return b ? "net.minecraft.src." + classNameMap.get(s) : classNameMap.get(s);			s = classNameMap.get(s);			//Modchu_Debug.mDebug("getClassName s="+s);		} else {			//Modchu_Debug.mDebug("getClassName else s="+s+" classNameMap.size()="+classNameMap.size());		}		if (flag) s = s + "[]";		return s;	}	private static void printStackTraceError(Error e) {		e.printStackTrace();		Modchu_Debug.lDebug("Modchu_Reflect printStackTraceError", 2, e);	}	private static void printStackTrace(Exception e) {		if (e != null) {			e.printStackTrace();			Modchu_Debug.lDebug("Modchu_Reflect printStackTrace", 2, e);		}	}	public static void initNameMap() {		Modchu_Debug.lDebug("Modchu_Reflect initNameMap");		int version = Modchu_Main.getMinecraftVersion();		String s = null;		if (Modchu_Main.isForge				| Modchu_Main.isRelease()) {			s = "assets/modchulib/data/mc"+version+"/class.csv";			classNameMap = (ConcurrentHashMap<String, String>) initNameMapAddMap(s, 2, classNameMap, false);		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap classNameMap.size()="+classNameMap.size());		if (Modchu_Main.isForge) {			s = "assets/modchulib/data/mc"+version+"/class1.csv";			classNameMap = (ConcurrentHashMap<String, String>) initNameMapAddMap(s, 1, classNameMap, false);		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap classNameMap.size()="+classNameMap.size());		s = "assets/modchulib/data/mc"+version+"/class2.csv";		classNameMap = (ConcurrentHashMap<String, String>) initNameMapAddMap(s, 1, classNameMap, false);		Modchu_Debug.lDebug("Modchu_Reflect initNameMap classNameMap.size()="+classNameMap.size());		if (Modchu_Main.isRelease()) {			s = "assets/modchulib/data/mc"+version+(Modchu_Main.isForge ? "/methods.csv" : "/methods1.csv");			fieldOrMethodNameMap = (ConcurrentHashMap<String, String>) initNameMapAddMap(s, 1, fieldOrMethodNameMap, false);			Modchu_Debug.lDebug("Modchu_Reflect initNameMap fieldOrMethodNameMap.size()="+fieldOrMethodNameMap.size());			s = "assets/modchulib/data/mc"+version+(Modchu_Main.isForge ? "/fields.csv" : "/fields1.csv");			fieldOrMethodNameMap = (ConcurrentHashMap<String, String>) initNameMapAddMap(s, 1, fieldOrMethodNameMap, false);			Modchu_Debug.lDebug("Modchu_Reflect initNameMap fieldOrMethodNameMap.size()="+fieldOrMethodNameMap.size());		}		Object[] o1 = new Object[]{				"String", String.class,				"int", int.class,				"Integer", Integer.class,				"Byte", Byte.class,				"byte", byte.class,				"Float", Float.class,				"float", float.class,				"Double", Double.class,				"double", double.class,				"Long", Long.class,				"long", long.class,				"Short", Short.class,				"short", short.class,				"Boolean", Boolean.class,				"boolean", boolean.class,				"List", List.class,				"ArrayList", ArrayList.class,				"LinkedList", LinkedList.class,				"ConcurrentHashMap", ConcurrentHashMap.class,				"HashMap", HashMap.class,				"Map", Map.class,				"Enum", Enum.class,				"File", File.class,				"InputStream", InputStream.class,				"UUID", UUID.class		};		if (o1 != null) {			Modchu_Debug.lDebug("Modchu_Reflect initNameMap 3 o1.length="+o1.length);			for (int i = 0; i < o1.length - 1; i += 2) {				javaDefaultClassMap.put(o1[i].toString(), (Class) o1[i + 1]);			}		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap end. o1.length="+o1.length);	}	private static Map initNameMapAddMap(String s, int type, Map map, boolean errorOkFlag) {		int version = Modchu_Main.getMinecraftVersion();		Modchu_Debug.lDebug("initNameMapAddMap s="+s);		LinkedList<String> list = initLoadNameMapFile(s);		if (list != null				&& !list.isEmpty()); else {			if (!errorOkFlag) {				String errorString = "Modchu_Reflect initNameMapAddMap data read error !! fileName="+s;				Modchu_Main.setRuntimeException(errorString);			}			return map;		}		for (String s1 : list) {			if (s1.indexOf(",") < 0) continue;			String[] s0 = s1.split(",");			if (s0 != null); else continue;			switch(type) {			case 0:				if (s0.length > 1						&& s0[0] != null) {					String s2 = s0[0].replaceAll(" ", "").replaceAll("	", "");					String s3 = s0[1] != null ? s0[1].replaceAll(" ", "").replaceAll("	", "") : null;					map.put(s2, s3);				}				break;			case 1:				if (s0.length > 1						&& s0[1] != null) {					String s2 = s0[1].replaceAll(" ", "").replaceAll("	", "");					String s3 = s0[0] != null ? s0[0].replaceAll(" ", "").replaceAll("	", "") : null;					//Modchu_Debug.lDebug("initNameMapAddMap add s2="+s2+" s3="+s3);					map.put(s2, s3);				}				break;			case 2:				if (s0.length < 0) break;				if (!Modchu_Main.isForge) map.put(s0[1], s0[0]);				String s2 = Modchu_Main.lastIndexProcessing(s0[1], ".").replaceAll(" ", "").replaceAll("	", "");				if (s2 != null) {					String s3 = s0[Modchu_Main.isForge ? 1 : 0];					s3 = s3 != null ? s3.replaceAll(" ", "").replaceAll("	", "") : null;					//Modchu_Debug.lDebug("initNameMapAddMap add s2="+s2+" s3="+s3);					map.put(s2, s3);				}				break;			}		}		return map;	}	private static LinkedList<String> initLoadNameMapFile(String s) {		int version = Modchu_Main.getMinecraftVersion();		BufferedReader bufferedReader = Modchu_FileManager.getResourceBufferedReader(s);		if (bufferedReader != null); else {			Modchu_Debug.lDebug("initLoadNameMapFile fileName="+s+" bufferedReader == null error !!");			return null;		}		//Modchu_Debug.lDebug("initLoadNameMapFile bufferedReader="+bufferedReader);		return Modchu_FileManager.bufferedReaderToLinkedList(bufferedReader);	}	public static Class getTopSuperClass(Object o) {		Class c = null;		for (c = o.getClass(); c != Object.class; c = c.getSuperclass()) {		}		return c;	}	public static Map<String, Object> getAllFieldObject(Object o) {		return getAllFieldObject(o, true, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, int i) {		return getAllFieldObject(o, true, i);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b) {		return getAllFieldObject(o, b, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b, int i) {		Map map = new HashMap();		if (o != null) {			Class c = o.getClass();			while (c != null) {				Field[] f = null;				try {					f = c.getDeclaredFields();					for (Field f1 : f) {						if (f1 != null) f1.setAccessible(true);						String s = f1.getName();						Object o1 = f1.get(o);						map.put(s, o1);					}				} catch (Exception e2) {					if (debugDisplayDetail(i)) printStackTrace(e2);				}				if (b) c = c.getSuperclass();				else c = null;			};		}		return map;	}}