package modchu.lib;import java.io.File;import java.io.InputStream;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.UUID;import java.util.concurrent.ConcurrentHashMap;public class Modchu_Reflect {	public static boolean debugReflectMessage = true;	public static boolean debugReflectMessageDetail = false;	private static ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Class> javaDefaultClassMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Method> methodMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Field> fieldMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, String> classNameMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, String> methodNameMap = new ConcurrentHashMap();	private static List<String> ngClassList = new ArrayList();	private static List<String> ngMethodList = new ArrayList();	private static List<String> ngFieldList = new ArrayList();	public static void setDebugMessage(boolean b) {		debugReflectMessage = b;	}	public static void setDebugMessageDetail(boolean b) {		debugReflectMessageDetail = b;	}	public static boolean copyFields(Class var0, Object var1, Object var2) {		boolean b = false;		Field[] ff = var0.getDeclaredFields();		for (int var4 = 0; var4 < ff.length; ++var4) {			Field f = ff[var4];			int var6 = f.getModifiers();			if (!Modifier.isStatic(var6) && !Modifier.isFinal(var6)) {				f.setAccessible(true);				setFieldObject(f, var2, getFieldObject(f, var1));				b = true;			}		}		return b;	}	public static boolean setFieldObject(Field var0, Object var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Field var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				var0.set(var1, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2);		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(null, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3) {		return setFieldObject(var0, var1, var2, var3, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(null, var3);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var4, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var4, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4) {		return setFieldObject(var0, var1, var2, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(var2, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, var4, 1);		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4, int i) {		Class c = loadClass(var0);		if (c != null) return setFieldObject(c, var1, var2, var3, var4, i);		return false;	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4) {		return setFieldObject(var0, var1, var2, var3, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) {				f.set(var3, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static Object getFieldObject(Field var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Field var0, Object var1, int i) {		try {			if (var0 != null) return var0.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, Object var1, int i) {		Field f = null;		try {			f = getField(var0, null, i);			if (f != null) return f.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, String var1, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, Object var2, int i) {		Field f = null;		try {			f = getField(var0, var1, i);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, int i) {		Field f = null;		try {			f = getField(var0, var1, var2, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, Object var2, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0, i);			if (c != null) f = getField(c, var1, i);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(String var0, String var1, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0, i);			if (c != null) f = getField(c, var1, i);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3, int i) {		Field f = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) f = getField(c, var1, var2, i);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Field getField(Class var0, String var1, String var2) {		return getField(var0, var1, var2, 1);	}	public static Field getField(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = getField(var0, var1, i);		return f;	}	public static Field getField(Class var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(Class var0, String var1, int i) {		Field f = null;		try {			f = getRawField(var0, var1, i);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	public static Field getField(String var0, String var1, String var2) {		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, 1);		if (f != null) return f;		f = getField(var0, var2, 1);		return f;	}	public static Field getField(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, i);		return f;	}	public static Field getField(String var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(String var0, String var1, int i) {		Field f = null;		try {			f = getRawField(loadClass(var0), var1, i);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	private static Field getRawField(Class var0, String var1) {		return getRawField(var0, var1, 1);	}	private static Field getRawField(Class var0, String var1, int i) {		String s = var0.getName() + "," + var1;		if (fieldMap.containsKey(s)) return fieldMap.get(s);		if (ngFieldList.contains(s)				&& i > -2) {			if (i > -1) Modchu_Debug.mDebug("getRawField ngFieldList.contains s=" + s);			return null;		}		Field f = null;		Exception[] e = new Exception[10];		int eCount = 0;		if (var1 != null && var0 != null) {			String var2 = getFieldName(var1);			try {				f = var0.getDeclaredField(var2);				fieldMap.put(s, f);				return f;			} catch (Exception e2) {				e[eCount] = e2;				eCount++;			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var2);				fieldMap.put(s, f);				return f;			} catch (Exception e3) {			}			try {				f = var0.getDeclaredField(var1);				fieldMap.put(s, f);				return f;			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var1);				fieldMap.put(s, f);				return f;			} catch (Exception e3) {			}			if (debugReflectMessageDetail) Modchu_Debug.Debug("getRawField Exception getField Class=" + var0 + " String=" + var1);			for (Class c = var0; c != Object.class; c = c.getSuperclass()) {				try {					if (c != null) f = c.getDeclaredField(var1);					if (f != null) {						f.setAccessible(true);						fieldMap.put(s, f);						return f;					}				} catch (Exception e4) {					if (eCount < e.length) {						e[eCount] = e4;						eCount++;					}				}			}		}		if (i > -1) {			for (int i2 = 0; i2 < 10; i2++) {				printStackTrace(e[i2]);			}		}		ngFieldList.add(s);		return f;	}	public static Method getMethod(Class var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, 1);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(Class var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(Class var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(Class var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2, int i) {		String s = var0.getName() + "," + var1;		if (var2 != null				&& var2.length > 0) {			StringBuilder sd = new StringBuilder().append(s);			int i1 = 0;			for (Class c : var2) {				String name = c.getName();				if (name != null						&& !name.isEmpty()) sd.append(",").append(name);				else {					Modchu_Debug.lDebug1("getRawMethod Class[] null error !! var0="+var0+" var1="+var1);					return null;				}				i1++;			}			s = sd.toString();			sd = null;		}		//Modchu_Debug.mDebug("getRawMethod s="+s);		if (methodMap.containsKey(s)) return (Method) methodMap.get(s);		if (ngMethodList.contains(s)) {			if (i > -1) Modchu_Debug.mDebug("getRawMethod ngMethodList.contains s=" + s);			return null;		}		//Modchu_Debug.mDebug("getRawMethod s="+s);		Method method = null;		Exception[] e = new Exception[10];		int eCount = 0;		if (var1 != null) {			String var3 = getFieldName(var1);			try {				if (var0 != null) method = var0.getDeclaredMethod(var3, var2);				if (method != null) {					method.setAccessible(true);					methodMap.put(s, method);					return method;				}			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			try {				if (var0 != null) method = var0.getDeclaredMethod(var1, var2);				if (method != null) {					method.setAccessible(true);					methodMap.put(s, method);					return method;				}			} catch (Exception e1) {				e[eCount] = e1;				eCount++;			}			//if (var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.mDebug("Modchu_Reflect getRawMethod var0="+var0);			for (Class c = var0; c != null && c != Object.class; c = c.getSuperclass()) {				try {					method = c.getDeclaredMethod(var3, var2);					if (method != null) {						method.setAccessible(true);						methodMap.put(s, method);						return method;					}				} catch (Exception e2) {				}				try {					method = c.getDeclaredMethod(var1, var2);					if (method != null) {						method.setAccessible(true);						methodMap.put(s, method);						return method;					}				} catch (Exception e2) {					e[eCount] = e2;					eCount++;					if (eCount > 9) eCount = 9;				}			}		}		if (i > -1) {			if (var0 != null				&& var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.mDebug("Modchu_Reflect getRawMethod miss var0=" + var0 + " var1=" + var1 + " var2=" + (var2 != null ? var2.toString() : null));			for (int i2 = 0; i2 < 10; i2++) {				printStackTrace(e[i2]);			}		}		if (i > -3) ngMethodList.add(s);		return method;	}	public static Method getMethod(String var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3) {		return getMethod(var0, var1, var2, var3, 1);	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(String var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(String var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(String var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(String var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(String var0, String var1, Class[] var2, int i) {		Class c = null;		Method method = null;		if (var1 != null) {			try {				c = loadClass(var0, i);				if (c != null) method = c.getDeclaredMethod(var1, var2);				return method;			} catch (Exception e1) {				if (debugDisplayDetail(i)) printStackTrace(e1);			}			try {				if (c != null) method = c.getMethod(var1, var2);			} catch (Exception e) {				if (debugDisplay(i)) printStackTrace(e);			}		}		return method;	}	public static Object invoke(Method var0) {		return invoke(var0, 1);	}	public static Object invoke(Method var0, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1) {		return invoke(var0, var1, 1);	}	public static Object invoke(Method var0, Object var1, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1, var2);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object... var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object[] var2, int i) {		try {			if (var0 != null) return var0.invoke(var1, (Object[]) var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(String var0, String var1, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, i);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			if (debugDisplay(i)) printStackTrace(e);			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, null, (Object[]) var4, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Class loadClass(String var0) {		return loadClass(var0, 1);	}	public static Class loadClass(String var0, int i) {		if (javaDefaultClassMap.containsKey(var0)) return javaDefaultClassMap.get(var0);		Class c = null;		var0 = var0.replace("\\", ".").replace("/", ".");		var0 = getClassName(var0);		if (classMap.containsKey(var0)) return classMap.get(var0);		if (ngClassList.contains(var0)) return null;		try {			c = Class.forName(var0);			if (c != null) {				classMap.put(var0, c);				return c;			}		} catch (Error e) {			if (debugDisplayDetail(i)) printStackTraceError(e);		} catch (ClassNotFoundException e) {			if (debugDisplayDetail(i)) printStackTrace(e);		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		try {			c = Class.forName("net.minecraft.src." + var0);			if (c != null) classMap.put(var0, c);		} catch (Error e1) {			if (debugDisplayDetail(i)) printStackTraceError(e1);		} catch (ClassNotFoundException e1) {			if (debugDisplayDetail(i)) printStackTrace(e1);		} catch (Exception e1) {			if (debugDisplayDetail(i)) printStackTrace(e1);		}		if (c != null) return c;		ngClassList.add(var0);		if (i != -1) Modchu_Debug.lDebug("Modchu_Reflect loadClass load missing class=" + var0);		else Modchu_Debug.mDebug("Modchu_Reflect loadClass load missing class=" + var0);		return null;	}	public static Class loadClassArray(String var0) {		return loadClassArray(var0, 1);	}	public static Class loadClassArray(String var0, int i) {		Object[] o = (Object[]) Array.newInstance(loadClass(var0), 2);		return o.getClass();	}	public static Object newInstance(String var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(Class var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3, int i) {		return newInstance(loadClass(var1), var2, var3, i);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor.newInstance(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object[] newInstanceArray(String var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(String var1, int i, int i2) {		Class c = null;		try {			c = loadClass(var1);			if (c != null) return (Object[]) Array.newInstance(c, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	static Object[] newInstanceArray(Class var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(Class var1, int i, int i2) {		Constructor constructor = null;		try {			if (var1 != null) return (Object[]) Array.newInstance(var1, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Constructor getConstructor(String var1, Class[] var2) {		return getConstructor(loadClass(var1), var2, 1);	}	public static Constructor getConstructor(String var1, Class[] var2, int i) {		return getConstructor(loadClass(var1), var2, i);	}	public static Constructor getConstructor(Class var1, Class[] var2) {		return getConstructor(var1, var2, 1);	}	public static Constructor getConstructor(Class var1, Class[] var2, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor;		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, 1);		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2, int i) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, i);		return null;	}	public static Object getPrivateValue(Class var0, Object var1, int var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, int var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception var4) {			if (debugDisplay(i)) var4.printStackTrace();		}		return null;	}	public static Object getPrivateValue(Class var0, Object var1, String var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, String var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					return f.get(var1);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}		return null;	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredFields()[var2];				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugDisplayDetail(i)) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugDisplayDetail(i)) printStackTrace(e2);			}		}	}	public static Enum getEnum(String var0, String var1) {		return getEnum(var0, var1, 1);	}	public static Enum getEnum(String var0, String var1, int i) {		Enum en = null;		Object[] o = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) o = c.getEnumConstants();			if (o != null) {				for (int i1 = 0; i1 < o.length; i1++) {					if (((Enum)o[i]).name().equalsIgnoreCase(var1)) {						en = (Enum) o[i1];						break;					}				}				return en;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	private static boolean debugDisplay(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:			return debugReflectMessage;		case 2:			return debugReflectMessageDetail;		}		return false;	}	private static boolean debugDisplayDetail(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:			return debugReflectMessageDetail;		}		return false;	}	private static String reflectStringSetting(String var1, String var2) {		return Modchu_Main.isRelease() ? var1 : var2;	}	public static String getFieldName(String s) {		if (Modchu_Main.isForge && Modchu_Main.getMinecraftVersion() > 150) return s;		if (methodNameMap != null && methodNameMap.containsKey(s)) {			return methodNameMap.get(s);		}		if (!Modchu_Main.isRelease() && (s.startsWith("field") | (s.startsWith("func")))) Modchu_Debug.lDebug("getFieldName check out var0=" + s);		return s;	}	public static String getClassName(String s) {		int i1 = s.lastIndexOf("[]");		boolean flag = i1 > -1;		if (flag) s = s.substring(0, i1);		if (classNameMap != null && classNameMap.containsKey(s)) {			//return b ? "net.minecraft.src." + classNameMap.get(s) : classNameMap.get(s);			//Modchu_Debug.mDebug("getClassName s="+classNameMap.get(s));			s = classNameMap.get(s);		}		//Modchu_Debug.mDebug("getClassName else s="+s);		if (flag) s = s + "[]";		return s;	}	private static void printStackTraceError(Error e) {		e.printStackTrace();		Modchu_Debug.lDebug("", null, 2, e);	}	private static void printStackTrace(Exception e) {		if (e != null) {			e.printStackTrace();			Modchu_Debug.lDebug("", null, 2, e);		}	}	public static void initNameMap() {		String[] s1 = {				"Minecraft", "AbstractClientPlayer", "EntityLivingBase", "RendererLivingEntity", "ResourceLocation",				"RenderEngine", "MapItemRenderer", "TextureUtil", "Resource", "ResourceManager",				"TextureManager", "Entity", "AxisAlignedBB", "World", "EntityPlayer",				"EntityVillager", "NetClientHandler", "EnumGameType", "FontRenderer", "Block",				"Item", "ItemStack", "KeyBinding", "BlockFlower", "BlockLeaves",				"BlockPumpkin", "EntityList", "Render", "GuiScreen", "RenderManager",				"MathHelper", "GLAllocation", "RenderManager", "ItemRenderer", "EntityClientPlayerMP",				"EntityOtherPlayerMP", "GuiChat", "MovementInputFromOptions", "EntityPlayerSP", "DamageSource",				"EnumCreatureAttribute", "InventoryPlayer", "ModelBase", "RenderBiped", "RenderPlayer",				"ItemArmor", "GuiButton", "Tessellator", "GuiSlot", "Gui",				"GameSettings", "Session", "EntityRenderer", "RenderHelper", "OpenGlHelper",				"BlockMushroom", "EnumAction", "ItemMap", "DataWatcher", "TexturedQuad",				"PositionTextureVertex", "Vec3", "EnumCreatureType", "ModelRenderer", "WorldSettings",				"WorldSettings.GameType", "EntityCreature", "Potion", "EntityItem", "EntityAnimal",				"BiomeGenBase", "EntityLiving", "EntityArrow", "CreativeTabs", "EntityHorse", 				"EntityTameable", "NBTTagCompound", "TileEntitySkullRenderer", "IIcon", "GLAllocation",				"PotionHelper", "ItemBow", "ModelBox", "RenderBlocks",				"BaseMod", "ModLoader",				"decoBlock", "decoBlockBase", "favBlock",				"MMM_IModelCaps"		};		String[] s2 = null;		if (Modchu_Main.isForge) {			switch(Modchu_Main.getMinecraftVersion()) {			case 152:				s2 = new String []{						"net.minecraft.client.Minecraft", "net.minecraft.client.entity.EntityPlayer", "net.minecraft.entity.EntityLiving", "net.minecraft.client.renderer.entity.RenderLiving", "java.lang.String",						"net.minecraft.client.renderer.RenderEngine","net.minecraft.client.gui.MapItemRenderer", "", "", "",						"net.minecraft.client.renderer.texture.TextureManager", "net.minecraft.entity.Entity", "net.minecraft.util.AxisAlignedBB", "net.minecraft.world.World", "net.minecraft.entity.player.EntityPlayer",						"net.minecraft.entity.passive.EntityVillager", "net.minecraft.client.multiplayer.NetClientHandler", "net.minecraft.world.EnumGameType", "net.minecraft.client.gui.FontRenderer", "net.minecraft.block.Block",						"net.minecraft.item.Item", "net.minecraft.item.ItemStack", "net.minecraft.client.settings.KeyBinding", "net.minecraft.block.BlockFlower", "net.minecraft.block.BlockLeaves",						"net.minecraft.block.BlockPumpkin", "net.minecraft.entity.EntityList", "net.minecraft.client.renderer.entity.Render", "net.minecraft.client.gui.GuiScreen", "net.minecraft.client.renderer.entity.RenderManager",						"net.minecraft.util.MathHelper", "net.minecraft.client.renderer.GLAllocation", "net.minecraft.client.renderer.entity.RenderManager", "net.minecraft.client.renderer.ItemRenderer", "net.minecraft.client.entity.EntityClientPlayerMP",						"net.minecraft.client.entity.EntityOtherPlayerMP", "net.minecraft.client.gui.GuiChat", "net.minecraft.util.MovementInputFromOptions", "net.minecraft.client.entity.EntityPlayerSP", "net.minecraft.util.DamageSource",						"net.minecraft.entity.EnumCreatureAttribute", "net.minecraft.entity.player.InventoryPlayer", "net.minecraft.client.model.ModelBase", "net.minecraft.client.renderer.entity.RenderBiped", "net.minecraft.client.renderer.entity.RenderPlayer",						"net.minecraft.item.ItemArmor", "net.minecraft.client.gui.GuiButton", "net.minecraft.client.renderer.Tessellator", "net.minecraft.client.gui.GuiSlot", "net.minecraft.client.gui.Gui",						"net.minecraft.client.settings.GameSettings", "net.minecraft.util.Session", "net.minecraft.client.renderer.EntityRenderer", "net.minecraft.client.renderer.RenderHelper", "net.minecraft.client.renderer.OpenGlHelper",						"net.minecraft.block.BlockMushroom", "net.minecraft.item.EnumAction", "net.minecraft.item.ItemMap", "net.minecraft.entity.DataWatcher", "net.minecraft.client.model.TexturedQuad",						"net.minecraft.client.model.PositionTextureVertex", "net.minecraft.util.Vec3", "net.minecraft.entity.EnumCreatureType", "net.minecraft.client.model.ModelRenderer", "net.minecraft.world.WorldSettings",						"net.minecraft.world.WorldSettings.GameType", "net.minecraft.entity.EntityCreature", "net.minecraft.potion.Potion", "net.minecraft.entity.item.EntityItem", "net.minecraft.entity.passive.EntityAnimal",						"net.minecraft.world.biome.BiomeGenBase", "net.minecraft.entity.EntityLiving", "net.minecraft.entity.projectile.EntityArrow", "net.minecraft.creativetab.CreativeTabs", "net.minecraft.entity.passive.EntityHorse",						"net.minecraft.entity.passive.EntityTameable", "net.minecraft.nbt.NBTTagCompound", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", "net.minecraft.util.IIcon", "net.minecraft.client.renderer.GLAllocation",						"net.minecraft.potion.PotionHelper", "net.minecraft.item.ItemBow", "net.minecraft.client.model.ModelBox", "net.minecraft.client.renderer.RenderBlocks",						"BaseMod", "ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"MMM_IModelCaps"				};				break;			case 162:			case 164:				s2 = new String []{						"net.minecraft.client.Minecraft", "net.minecraft.client.entity.AbstractClientPlayer", "net.minecraft.entity.EntityLivingBase", "net.minecraft.client.renderer.entity.RendererLivingEntity", "net.minecraft.util.ResourceLocation",						"net.minecraft.client.renderer.RenderEngine","net.minecraft.client.gui.MapItemRenderer", "net.minecraft.client.renderer.texture.TextureUtil", "net.minecraft.client.resources.Resource", "net.minecraft.client.resources.ResourceManager",						"net.minecraft.client.renderer.texture.TextureManager", "net.minecraft.entity.Entity", "net.minecraft.util.AxisAlignedBB", "net.minecraft.world.World", "net.minecraft.entity.player.EntityPlayer",						"net.minecraft.entity.passive.EntityVillager", "net.minecraft.client.multiplayer.NetClientHandler", "net.minecraft.world.EnumGameType", "net.minecraft.client.gui.FontRenderer", "net.minecraft.block.Block",						"net.minecraft.item.Item", "net.minecraft.item.ItemStack", "net.minecraft.client.settings.KeyBinding", "net.minecraft.block.BlockFlower", "net.minecraft.block.BlockLeaves",						"net.minecraft.block.BlockPumpkin", "net.minecraft.entity.EntityList", "net.minecraft.client.renderer.entity.Render", "net.minecraft.client.gui.GuiScreen", "net.minecraft.client.renderer.entity.RenderManager",						"net.minecraft.util.MathHelper", "net.minecraft.client.renderer.GLAllocation", "net.minecraft.client.renderer.entity.RenderManager", "net.minecraft.client.renderer.ItemRenderer", "net.minecraft.client.entity.EntityClientPlayerMP",						"net.minecraft.client.entity.EntityOtherPlayerMP", "net.minecraft.client.gui.GuiChat", "net.minecraft.util.MovementInputFromOptions", "net.minecraft.client.entity.EntityPlayerSP", "net.minecraft.util.DamageSource",						"net.minecraft.entity.EnumCreatureAttribute", "net.minecraft.entity.player.InventoryPlayer", "net.minecraft.client.model.ModelBase", "net.minecraft.client.renderer.entity.RenderBiped", "net.minecraft.client.renderer.entity.RenderPlayer",						"net.minecraft.item.ItemArmor", "net.minecraft.client.gui.GuiButton", "net.minecraft.client.renderer.Tessellator", "net.minecraft.client.gui.GuiSlot", "net.minecraft.client.gui.Gui",						"net.minecraft.client.settings.GameSettings", "net.minecraft.util.Session", "net.minecraft.client.renderer.EntityRenderer", "net.minecraft.client.renderer.RenderHelper", "net.minecraft.client.renderer.OpenGlHelper",						"net.minecraft.block.BlockMushroom", "net.minecraft.item.EnumAction", "net.minecraft.item.ItemMap", "net.minecraft.entity.DataWatcher", "net.minecraft.client.model.TexturedQuad",						"net.minecraft.client.model.PositionTextureVertex", "net.minecraft.util.Vec3", "net.minecraft.entity.EnumCreatureType", "net.minecraft.client.model.ModelRenderer", "net.minecraft.world.WorldSettings",						"net.minecraft.world.WorldSettings.GameType", "net.minecraft.entity.EntityCreature", "net.minecraft.potion.Potion", "net.minecraft.entity.item.EntityItem", "net.minecraft.entity.passive.EntityAnimal",						"net.minecraft.world.biome.BiomeGenBase", "net.minecraft.entity.EntityLiving",  "net.minecraft.entity.projectile.EntityArrow", "net.minecraft.creativetab.CreativeTabs", "net.minecraft.entity.passive.EntityHorse",						"net.minecraft.entity.passive.EntityTameable", "net.minecraft.nbt.NBTTagCompound", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", "net.minecraft.util.IIcon", "net.minecraft.client.renderer.GLAllocation",						"net.minecraft.potion.PotionHelper", "net.minecraft.item.ItemBow", "net.minecraft.client.model.ModelBox", "net.minecraft.client.renderer.RenderBlocks",						"BaseMod", "ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"MMM_IModelCaps"				};				break;			case 172:			case 179:				s2 = new String []{						"net.minecraft.client.Minecraft", "net.minecraft.client.entity.AbstractClientPlayer", "net.minecraft.entity.EntityLivingBase", "net.minecraft.client.renderer.entity.RendererLivingEntity", "net.minecraft.util.ResourceLocation",						"net.minecraft.client.renderer.RenderEngine","net.minecraft.client.gui.MapItemRenderer", "net.minecraft.client.renderer.texture.TextureUtil", "net.minecraft.client.resources.Resource", "net.minecraft.client.resources.ResourceManager",						"net.minecraft.client.renderer.texture.TextureManager", "net.minecraft.entity.Entity", "net.minecraft.util.AxisAlignedBB", "net.minecraft.world.World", "net.minecraft.entity.player.EntityPlayer",						"net.minecraft.entity.passive.EntityVillager", "net.minecraft.client.network.NetHandlerPlayClient", "net.minecraft.world.EnumGameType", "net.minecraft.client.gui.FontRenderer", "net.minecraft.block.Block",						"net.minecraft.item.Item", "net.minecraft.item.ItemStack", "net.minecraft.client.settings.KeyBinding", "net.minecraft.block.BlockFlower", "net.minecraft.block.BlockLeaves",						"net.minecraft.block.BlockPumpkin", "net.minecraft.entity.EntityList", "net.minecraft.client.renderer.entity.Render", "net.minecraft.client.gui.GuiScreen", "net.minecraft.client.renderer.entity.RenderManager",						"net.minecraft.util.MathHelper", "net.minecraft.client.renderer.GLAllocation", "net.minecraft.client.renderer.entity.RenderManager", "net.minecraft.client.renderer.ItemRenderer", "net.minecraft.client.entity.EntityClientPlayerMP",						"net.minecraft.client.entity.EntityOtherPlayerMP", "net.minecraft.client.gui.GuiChat", "net.minecraft.util.MovementInputFromOptions", "net.minecraft.client.entity.EntityPlayerSP", "net.minecraft.util.DamageSource",						"net.minecraft.entity.EnumCreatureAttribute", "net.minecraft.entity.player.InventoryPlayer", "net.minecraft.client.model.ModelBase", "net.minecraft.client.renderer.entity.RenderBiped", "net.minecraft.client.renderer.entity.RenderPlayer",						"net.minecraft.item.ItemArmor", "net.minecraft.client.gui.GuiButton", "net.minecraft.client.renderer.Tessellator", "net.minecraft.client.gui.GuiSlot", "net.minecraft.client.gui.Gui",						"net.minecraft.client.settings.GameSettings", "net.minecraft.util.Session", "net.minecraft.client.renderer.EntityRenderer", "net.minecraft.client.renderer.RenderHelper", "net.minecraft.client.renderer.OpenGlHelper",						"net.minecraft.block.BlockMushroom", "net.minecraft.item.EnumAction", "net.minecraft.item.ItemMap", "net.minecraft.entity.DataWatcher", "net.minecraft.client.model.TexturedQuad",						"net.minecraft.client.model.PositionTextureVertex", "net.minecraft.util.Vec3", "net.minecraft.entity.EnumCreatureType", "net.minecraft.client.model.ModelRenderer", "net.minecraft.world.WorldSettings",						"net.minecraft.world.WorldSettings.GameType", "net.minecraft.entity.EntityCreature", "net.minecraft.potion.Potion", "net.minecraft.entity.item.EntityItem", "net.minecraft.entity.passive.EntityAnimal",						"net.minecraft.world.biome.BiomeGenBase", "net.minecraft.entity.EntityLiving",  "net.minecraft.entity.projectile.EntityArrow", "net.minecraft.creativetab.CreativeTabs", "net.minecraft.entity.passive.EntityHorse",						"net.minecraft.entity.passive.EntityTameable", "net.minecraft.nbt.NBTTagCompound", "net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer", "net.minecraft.util.IIcon", "net.minecraft.client.renderer.GLAllocation",						"net.minecraft.potion.PotionHelper", "net.minecraft.item.ItemBow", "net.minecraft.client.model.ModelBox", "net.minecraft.client.renderer.RenderBlocks",						"BaseMod", "ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"mmm.lib.multiModel.model.IModelCaps"				};				break;			}		} else if (Modchu_Main.isRelease()) {			switch(Modchu_Main.getMinecraftVersion()) {			case 152:				s2 = new String []{						"net.minecraft.client.Minecraft", "sq", "ng", "bho", "java.lang.String",						"bge", "axi", "", "", "",						"biq", "mp", "aqx", "aab", "sq",						"sm", "bdk", "aaj", "awv",  "apa",						"wk", "wm", "ava", "alh", "ana",						"anz", "mv", "bgz", "axr", "bgy",						"kx", "avc", "bgy", "bfx", "bdv",						"bfk", "awj", "bfi", "bfj", "mg",						"no", "so", "bcd", "bhg", "bht",						"uo", "awg", "bgd", "axt", "awx",						"avy", "awf", "bfq", "avb", "bkn",						"anl", "xp", "wo", "ns", "bcg",						"bct", "arc", "nn", "bdi", "aai",						"aaj", "nr", "mk", "rh", "qh",						"aav", "ng", "ss", "ve", "",						"nu", "bs", "bjb", "", "avc",						"xu", "", "bdd", "bgf",						"BaseMod", "ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"MMM_IModelCaps"				};				break;			case 162:			case 164:				s2 = new String []{						"ats", "ber", "oe", "bgy", "bjl",						"bge", "avs", "bim", "bjk", "bjm",						"bij", "nm", "asu", "abv", "ue",						"ua", "bct", "acd", "avf", "aqw",						"yb", "yd", "atp", "anb", "aow",						"apv", "ns", "bgj", "awb", "bgi",						"lr", "atr", "bgi", "bfg", "bdf",						"bev", "aut", "bet", "beu", "na",						"oi", "uc", "bbl", "bgr", "bhg",						"wg", "auq", "bfn", "awd", "avh",						"aui", "aup", "bfb", "atq", "blx",						"apg", "zi", "yg", "on", "bbp",						"bcc", "asz", "og", "bcr", "acc",						"acd", "om", "nh", "sr", "ro",						"acp", "of", "ug", "wv", "rr",						"op", "bx", "biy", "", "atr",						"zo", "", "bcm", "bfo",						"BaseMod", "ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"MMM_IModelCaps"				};				break;			}		} else {			if (Modchu_Main.getMinecraftVersion() > 169) {				s2 = new String []{						"Minecraft", "AbstractClientPlayer", "EntityLivingBase", "RendererLivingEntity", "ResourceLocation",						"RenderEngine", "MapItemRenderer", "TextureUtil", "Resource", "ResourceManager",						"TextureManager", "Entity", "AxisAlignedBB", "World", "EntityPlayer",						"EntityVillager", "NetHandlerPlayClient", "EnumGameType", "FontRenderer", "Block",						"Item", "ItemStack", "KeyBinding", "BlockFlower", "BlockLeaves",						"BlockPumpkin", "EntityList", "Render", "GuiScreen", "RenderManager",						"MathHelper", "GLAllocation", "RenderManager", "ItemRenderer", "EntityClientPlayerMP",						"EntityOtherPlayerMP", "GuiChat", "MovementInputFromOptions", "EntityPlayerSP", "DamageSource",						"EnumCreatureAttribute", "InventoryPlayer", "ModelBase", "RenderBiped", "RenderPlayer",						"ItemArmor", "GuiButton", "Tessellator", "GuiSlot", "Gui",						"GameSettings", "Session", "EntityRenderer", "RenderHelper", "OpenGlHelper",						"BlockMushroom", "EnumAction", "ItemMap", "DataWatcher", "TexturedQuad",						"PositionTextureVertex", "Vec3", "EnumCreatureType", "ModelRenderer", "WorldSettings",						"WorldSettings.GameType", "EntityCreature", "Potion", "EntityItem", "EntityAnimal",						"BiomeGenBase", "EntityLiving", "EntityArrow", "CreativeTabs", "EntityHorse",						"EntityTameable", "NBTTagCompound", "TileEntitySkullRenderer", "IIcon", "GLAllocation",						"PotionHelper", "ItemBow", "ModelBox", "RenderBlocks",						"net.minecraft.src.BaseMod", "net.minecraft.src.ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"mmm.lib.multiModel.model.IModelCaps"				};			}			else if (Modchu_Main.getMinecraftVersion() < 170					&& Modchu_Main.getMinecraftVersion() > 159) {				s2 = new String []{						"Minecraft", "AbstractClientPlayer", "EntityLivingBase", "RendererLivingEntity", "ResourceLocation",						"RenderEngine", "MapItemRenderer", "TextureUtil", "Resource", "ResourceManager",						"TextureManager", "Entity", "AxisAlignedBB", "World", "EntityPlayer",						"EntityVillager", "NetClientHandler", "EnumGameType", "FontRenderer", "Block",						"Item", "ItemStack", "KeyBinding", "BlockFlower", "BlockLeaves",						"BlockPumpkin", "EntityList", "Render", "GuiScreen", "RenderManager",						"MathHelper", "GLAllocation", "RenderManager", "ItemRenderer", "EntityClientPlayerMP",						"EntityOtherPlayerMP", "GuiChat", "MovementInputFromOptions", "EntityPlayerSP", "DamageSource",						"EnumCreatureAttribute", "InventoryPlayer", "ModelBase", "RenderBiped", "RenderPlayer",						"ItemArmor", "GuiButton", "Tessellator", "GuiSlot", "Gui",						"GameSettings", "Session", "EntityRenderer", "RenderHelper", "OpenGlHelper",						"BlockMushroom", "EnumAction", "ItemMap", "DataWatcher", "TexturedQuad",						"PositionTextureVertex", "Vec3", "EnumCreatureType", "ModelRenderer", "WorldSettings",						"WorldSettings.GameType", "EntityCreature", "Potion", "EntityItem", "EntityAnimal",						"BiomeGenBase", "EntityLiving", "EntityArrow", "CreativeTabs", "EntityHorse",						"EntityTameable", "NBTTagCompound", "TileEntitySkullRenderer", "IIcon", "GLAllocation",						"PotionHelper", "ItemBow", "ModelBox", "RenderBlocks",						"net.minecraft.src.BaseMod", "net.minecraft.src.ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"MMM_IModelCaps"				};			}			else if (Modchu_Main.getMinecraftVersion() < 160) {				s2 = new String []{						"net.minecraft.client.Minecraft",  "EntityPlayer", "EntityLiving", "RenderLiving", "java.lang.String",						"RenderEngine", "MapItemRenderer", "", "", "",						"TextureManager", "Entity", "AxisAlignedBB", "World", "EntityPlayer",						"EntityVillager", "NetClientHandler", "EnumGameType", "FontRenderer", "Block",						"Item", "ItemStack", "KeyBinding", "BlockFlower", "BlockLeaves",						"BlockPumpkin", "EntityList", "Render", "GuiScreen", "RenderManager",						"MathHelper", "GLAllocation", "RenderManager", "ItemRenderer", "EntityClientPlayerMP",						"EntityOtherPlayerMP", "GuiChat", "MovementInputFromOptions", "EntityPlayerSP", "DamageSource",						"EnumCreatureAttribute", "InventoryPlayer", "ModelBase", "RenderBiped", "RenderPlayer",						"ItemArmor", "GuiButton", "Tessellator", "GuiSlot", "Gui",						"GameSettings", "Session", "EntityRenderer", "RenderHelper", "OpenGlHelper",						"BlockMushroom", "EnumAction", "ItemMap", "DataWatcher", "TexturedQuad",						"PositionTextureVertex", "Vec3", "EnumCreatureType", "ModelRenderer", "WorldSettings",						"WorldSettings.GameType", "EntityCreature", "Potion", "EntityItem", "EntityAnimal",						"BiomeGenBase", "EntityLiving", "EntityArrow", "CreativeTabs", "EntityHorse",						"EntityTameable", "NBTTagCompound", "TileEntitySkullRenderer", "IIcon", "GLAllocation",						"PotionHelper", "ItemBow", "ModelBox", "RenderBlocks",						"net.minecraft.src.BaseMod", "net.minecraft.src.ModLoader",						"net.minecraft.decoblock.DecoBlock", "net.minecraft.decoblock.base.BaseBlock", "net.minecraft.favstar.BlockFav",						"MMM_IModelCaps"				};			}		}		if (s1 != null				&& s2 != null) {			for(int i = 0; i < s1.length; i++) {				classNameMap.put(s1[i], s2[i]);			}		}		s1 = new String []{				"field_77110_j",				"func_82441_a",				"func_71061_d_", "func_70105_a", "field_75623_d",				"func_70301_a", "field_70462_a", "func_70301_a", "func_71052_bv", "field_70460_b",				"field_82424_k", "func_110143_aJ", "field_70760_ar", "field_70761_aq", "field_70758_at",				"field_70759_as", "field_70722_aY", "field_70721_aZ", "field_70754_ba", "func_70631_g_",				"func_78086_a", "func_382_a", "field_70737_aN", "field_70725_aQ", "func_77033_b",				"func_110309_l", "field_20047_bv", "field_622_aY", "func_76984_a", "func_82150_aj",				"func_82241_s", "func_77105_b", "func_77102_a", "field_71442_b", "field_71460_t",				"field_71439_g", "field_71441_e", "field_71415_G", "field_71474_y", "field_1064_b",				"field_4209_q", "field_6313_p", "field_6323_f", "func_71410_x", "func_110300_d",				"func_110304_a", "func_110306_p", "func_110309_l", "func_110557_a", "func_76976_a",				"func_71391_r", "func_71356_B", "func_110138_aP", "func_110536_a", "func_110442_L",				"func_110776_a", "func_110623_a", "func_130087_a", "func_110577_a", "func_110432_I",				"func_70073_O", "field_70120_cr", "func_78350_a", "func_110434_K", "field_71412_D",				"func_71373_a", "field_74320_O", "func_110987_a", "field_71446_o", "func_78351_a",				"func_77220_a", "func_130000_a", "field_70734_aK", "func_71386_F", "func_110527_b",				"func_110857_a", "func_77031_a", "field_70475_c", "func_71380_b", "func_76985_a",				"field_71462_r", "field_71456_v", "field_73886_k", "func_71354_a", "field_71451_h",				"func_78745_b", "func_78064_b", "func_607_d", "field_71466_p", "field_71456_v",				"func_94277_a", "func_110311_f", "field_110316_a", "field_78729_o", "func_73827_b",				"func_73765_a", "field_142025_a", "func_71376_c", "field_78779_k", "func_78746_a",				"func_78748_a", "func_41014_d", "field_71158_b", "func_78758_h", "func_6473_b",				"func_6420_o", "func_40117_c", "field_41031_b", "field_70173_aa", "field_70165_t",				"field_70163_u", "field_70161_v", "field_70121_D", "field_72337_e", "func_70093_af",				"func_72799_c", "field_70154_o", "field_70157_k", "field_70181_x", "field_70718_bc",				"func_70684_aJ", "field_70717_bb", "func_70693_a", "field_76988_d", "field_76990_c",				"field_71092_bJ", "field_71100_bB", "field_70703_bu", "field_76989_e", "field_76987_f",				"func_77043_a", "func_71868_h", "field_70134_J", "field_70701_bs", "field_70702_br",				"func_78342_b", "func_78713_a", "func_78443_a", "field_71443_c", "field_71440_d",				"field_71416_A", "func_77366_a", "field_73883_a", "func_73875_a", "func_71387_A",				"field_71437_Z", "func_71344_c", "field_73319_a", "field_74516_a", "field_74515_c",				"field_74512_d", "field_78516_c", "field_73438_a", "field_71973_m", "field_77756_aW",				"field_74513_e", "field_74511_f", "field_77993_c", "field_82512_cj", "field_77698_e",				"field_77747_aY", "field_77820_ah", "field_73815_a", "field_77798_ai", "field_77800_aj",				"field_77794_ak", "field_77744_bd", "func_77042_a", "field_77046_h", "func_76986_a",				"func_70678_g", "func_77041_b", "func_77039_a", "func_77973_b", "field_78727_a",				"func_70440_f", "field_77994_a", "func_77948_v", "func_76126_a", "func_76134_b",				"field_78783_a", "field_78782_b", "func_70608_bn", "field_70130_N", "field_70131_O",				"func_74527_f", "func_74526_a", "func_77960_j", "func_76129_c", "func_78715_a",				"field_71942_A", "field_71943_B", "field_78721_f", "func_72912_H", "func_73081_b",				"field_71093_bK", "func_70106_y", "field_71071_by", "field_74351_w", "field_74368_y",				"field_74370_x", "field_74366_z", "field_73388_b", "field_73389_c", "field_73387_d",				"func_70115_ae", "func_70107_b", "func_70047_e", "func_76128_c", "field_70129_M",				"func_72935_r", "func_70013_c", "func_72937_j", "func_70015_d", "func_70026_G",				"field_76366_f", "field_76367_g", "field_76368_d", "field_76369_e", "field_76370_b",				"field_76371_c", "field_76372_a", "field_76377_j", "field_76378_k", "field_76379_h",				"field_76380_i", "field_82727_n", "field_82728_o", "field_82729_p", "field_72995_K",				"func_70090_H", "field_72340_a", "field_72338_b", "field_72339_c", "field_72336_d",				"field_72337_e", "field_72334_f", "func_72887_b", "func_71024_bL", "func_77944_b",				"field_77880_c", "func_74519_b", "func_74518_a", "field_70177_z", "field_70127_C",				"field_70125_A", "func_70448_g", "func_77975_n", "func_70070_b", "field_70126_B",				"func_110310_o", "field_71091_bM", ".field_71096_bN", "field_71097_bO", "field_71094_bP",				"field_71095_bQ", "field_71085_bR", "field_70169_q", "field_70167_r", "field_70166_s",				"field_71107_bF", "field_71109_bG", "field_70141_P", "field_70140_Q", "func_78087_a",				"field_110798_h", "field_77476_b", "field_77478_a", "func_77473_a", "field_73887_h",				"field_73880_f", "field_73881_g", "func_78276_b", "func_78719_a", "field_73742_g",				"field_73741_f", "field_78398_a", "func_78382_b", "func_78374_a", "func_78381_a",				"field_73010_i", "func_73875_a", "func_73863_a", "func_73732_a", "func_74298_c",				"field_85185_A", "func_78374_a", "func_78384_a", "func_78600_a", "field_78724_e",				"func_73731_b", "field_146292_n", "func_147940_a", "field_146127_k", "field_146124_l",				"field_77045_g", "func_70096_w", "func_111145_d", "field_71449_j", "field_72770_i",				"field_71423_H", "field_73746_c", "field_73743_d", "field_73748_h", "field_73747_a",				"field_73745_b", "func_78236_a", "func_78240_a", "field_78243_a", "func_72444_a",				"func_72431_c", "func_72443_a", "func_78371_b", "func_78375_b", "field_78241_b",				"field_78242_c", "func_72432_b", "func_77211_a", "func_77219_a", "field_110153_bc",				"func_70647_i", "func_70599_aP", "field_70787_b", "field_70789_a", "func_70665_d",				"field_70718_bc", "func_70018_K", "field_70882_e", "field_70881_d", "field_78253_h",				"field_78254_i"/*				"func_78786_a", "field_78806_j", "field_78795_f", "field_78796_g", "field_78808_h",				"field_78800_c", "field_78797_d", "field_78798_e", "func_70694_bm", "func_78597_b",				"func_77662_d" */		};		s2 = null;		switch(Modchu_Main.getMinecraftVersion()) {		case 152:			s2 = new String []{					"h",					"a",					"aa", "a", "d",					"a", "a", "a", "bL", "b",					"l", "aM", "az", "ay", "aB",					"aA", "bh", "bi", "bj", "g_",					"a", "a", "aW", "aZ", "b",					"p", "bA", "bB", "a", "ai",					"r", "a", "a", "b", "u",					"g", "e", "H", "z", "b",					"t", "n", "fg", "x", "d",					"a", "r", "p", "a", "a",					"r", "C", "aS", "a", "K",					"a", "a", "a", "a", "H",					"N", "cv", "a", "J", "x",					"a", "aa", "a", "p", "a",					"a", "a", "aU", "G", "b",					"a", "a", "h", "b", "a",					"s", "w", "q", "a", "h",					"b", "b", "d", "q", "w",					"b", "", "", "q", "c",					"a", "a", "c", "k", "a",					"a", "d", "b", "h", "b",					"ab", "d", "bx", "ac", "u",					"v", "w", "E", "e", "ag",					"c", "o", "k", "y", "",					"", "", "", "a", "c",					"bS", "bN", "bG", "d", "e",					"a", "k", "K", "bE", "bD",					"b", "a", "a", "c", "d",					"B", "a", "a", "a", "B",					"ab", "an", "k", "a", "c",					"d", "c", "cp", "r", "aX",					"e", "f", "c", "bR", "f",					"aZ", "ai", "m", "aj", "ak",					"al", "be", "a", "j", "a",					"g", "a", "a", "b", "a",					"f", "c", "x", "a", "b",					"a", "b", "bz", "O", "P",					"f", "a", "j", "c", "a",					"F", "E", "f", "M", "q",					"ar", "w", "bK", "I", "K",					"J", "L", "x", "y", "z",					"af", "b", "e", "c", "N",					"v", "c", "l", "d", "F",					"f", "g", "d", "e", "b",					"c", "a", "j", "k", "h",					"i", "l", "m", "n", "I",					"G", "a", "b", "c", "d",					"e", "f", "c", "cn", "b",					"d", "b", "a", "C", "A",					"B", "h", "o", "b", "C",					"", "bU", "bV", "bW", "bX",					"bY", "bZ", "r", "s", "t",					"bQ", "bR", "Q", "R", "a",					"", "", "a", "a", "k",					"h", "i", "a", "a", "g",					"f", "a", "b", "a", "a",					"h", "a", "a", "b", "c",					"A", "a", "a", "a", "e",					"b", "k", "a", "f", "g",					"i", "u", "", "k", "p",					"I", "c", "d", "h", "a",					"b", "a", "a", "a", "a",					"e", "a", "b", "b", "b",					"c", "a", "a", "a", "bB",					"aY", "ba", "b", "a_", "d",					"bl", "J", "e", "d", "h",					"i"			};			break;		case 162:			s2 = new String []{					"h",					"b",					"aa", "a", "d",					"a", "a", "a", "bL", "b",					"l", "aM", "aO", "aN", "aQ",					"aP", "aF", "aG", "aH", "g_",					"a", "a", "ay", "aB", "b",					"p", "bA", "bB", "a", "ai",					"r", "a", "a", "c", "p",					"h", "f", "A", "u", "b",					"t", "n", "g", "w", "d",					"a", "r", "p", "a", "a",					"q", "B", "aS", "a", "K",					"a", "a", "a", "a", "H",					"N", "cv", "a", "J", "x",					"a", "aa", "a", "p", "a",					"a", "a", "aU", "F", "b",					"a", "a", "h", "b", "a",					"n", "r", "l", "a", "h",					"b", "b", "d", "l", "r",					"b", "f", "a", "q", "c",					"a", "a", "", "k", "a",					"a", "", "c", "h", "b",					"", "", "", "ac", "u",					"v", "w", "E", "e", "ag",					"c", "o", "k", "y", "aT",					"aB", "aS", "e", "b", "c",					"bu", "bq", "bd", "d", "e",					"a", "k", "K", "be", "bf",					"", "a", "a", "d", "e",					"v", "a", "a", "a", "A",					"Z", "c", "k", "a", "c",					"d", "c", "cv", "s", "aY",					"e", "f", "d", "bS", "g",					"ba", "aj", "o", "ak", "al",					"am", "bf", "a", "j", "a",					"k", "a", "a", "b", "a",					"f", "b", "y", "a", "b",					"a", "b", "bg", "O", "P",					"f", "a", "j", "c", "a",					"G", "F", "f", "N", "q",					"ar", "w", "bn", "I", "K",					"J", "L", "x", "y", "z",					"af", "b", "f", "c", "N",					"v", "d", "l", "d", "F",					"f", "g", "d", "e", "b",					"c", "a", "j", "k", "h",					"i", "l", "m", "n", "I",					"G", "a", "b", "c", "d",					"e", "f", "c", "bH", "b",					"d", "b", "a", "C", "A",					"B", "h", "o", "c", "C",					"q", "bw", "bx", "by", "bz",					"bA", "bB", "r", "s", "t",					"bs", "bt", "Q", "R", "a",					"a", "b", "a", "a", "i",					"g", "h", "a", "a", "h",					"g", "a", "b", "a", "a",					"h", "a", "a", "b", "c",					"A", "a", "a", "a", "e",					"b", "i", "a", "g", "h",					"i", "u", "d", "U", "N",					"B", "d", "e", "i", "b",					"c", "a", "a", "a", "a",					"e", "a", "b", "b", "b",					"c", "a", "a", "a", "bc",					"ba", "aZ", "bn", "j", "d",					"aT", "J", "bq", "bp", "h",					"i"			};			break;		}		if (s1 != null && s2 != null) {			//Modchu_Debug.mDebug("s1.length="+s1.length+" s2.length="+s2.length);			for (int i = 0; i < s1.length; i++) {				methodNameMap.put(s1[i], s2[i]);			}		}		s1 = new String[]{				"String",				"int",				"Integer",				"Byte",				"byte",				"Float",				"float",				"Double",				"double",				"Long",				"long",				"Short",				"short",				"Boolean",				"boolean",				"List",				"ArrayList",				"LinkedList",				"ConcurrentHashMap",				"HashMap",				"Map",				"Enum",				"File",				"InputStream",				"UUID"		};		Class[] c1 = new Class[]{				String.class,				int.class,				Integer.class,				Byte.class,				byte.class,				Float.class,				float.class,				Double.class,				double.class,				Long.class,				long.class,				Short.class,				short.class,				Boolean.class,				boolean.class,				List.class,				ArrayList.class,				LinkedList.class,				ConcurrentHashMap.class,				HashMap.class,				Map.class,				Enum.class,				File.class,				InputStream.class,				UUID.class		};		if (s1 != null && c1 != null) {			//Modchu_Debug.mDebug("s1.length="+s1.length+" c1.length="+c1.length);			for (int i = 0; i < s1.length; i++) {				javaDefaultClassMap.put(s1[i], c1[i]);			}		}	}	public static Class getTopSuperClass(Object o) {		Class c = null;		for (c = o.getClass(); c != Object.class; c = c.getSuperclass()) {		}		return c;	}	public static Map<String, Object> getAllFieldObject(Object o) {		return getAllFieldObject(o, true, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, int i) {		return getAllFieldObject(o, true, i);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b) {		return getAllFieldObject(o, b, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b, int i) {		Map map = new HashMap();		if (o != null) {			Class c = o.getClass();			while (c != null) {				Field[] f = null;				try {					f = c.getDeclaredFields();					for (Field f1 : f) {						if (f1 != null) f1.setAccessible(true);						String s = f1.getName();						Object o1 = f1.get(o);						map.put(s, o1);					}				} catch (Exception e2) {					if (debugDisplayDetail(i)) printStackTrace(e2);				}				if (b) c = c.getSuperclass();				else c = null;			};		}		return map;	}}