package modchu.lib;import java.io.BufferedReader;import java.io.File;import java.io.InputStream;import java.lang.reflect.Array;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.UUID;import java.util.concurrent.ConcurrentHashMap;public class Modchu_Reflect {	public static boolean debugReflectMessage = true;	static ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Class> javaDefaultClassMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Method> methodMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Field> fieldMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, List<String>> classNameMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, List<String>> fieldNameMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, List<String>> fieldNameObfuscationMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, List<String>> methodNameMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, List<String>> methodNameObfuscationMap = new ConcurrentHashMap();	private static ConcurrentHashMap<String, Class[]> acquisitionMethodClassMap = new ConcurrentHashMap();	private static List<String> ngClassList = new ArrayList();	private static List<String> ngMethodList = new ArrayList();	private static List<String> ngFieldList = new ArrayList();	private static List<String> unownReflectionMissingStringList;	public static void setDebugMessage(boolean b) {		debugReflectMessage = b;	}	public static boolean copyFields(Class var0, Object var1, Object var2) {		boolean b = false;		Field[] ff = var0.getDeclaredFields();		for (int var4 = 0; var4 < ff.length; ++var4) {			Field f = ff[var4];			int var6 = f.getModifiers();			if (!Modifier.isStatic(var6) && !Modifier.isFinal(var6)) {				f.setAccessible(true);				setFieldObject(f, var2, getFieldObject(f, var1));				b = true;			}		}		return b;	}	public static boolean setFieldObject(Field var0, Object var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Field var0, Object var1, Object var2, int i) {		return setFieldObject(var0, var1, var2, i, false);	}	public static boolean setFieldObject(Field var0, Object var1, Object var2, int i, boolean debugReflectMessageDetail) {		try {			if (var0 != null) {				var0.set(var1, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(String var0, String var1, Object var2, int i) {		return setFieldObject(var0, var1, var2, i, false);	}	public static boolean setFieldObject(String var0, String var1, Object var2, int i, boolean debugReflectMessageDetail) {		return setFieldObject(loadClass(var0), var1, var2, i, false);	}	public static boolean setFieldObject(Class var0, String var1, Object var2) {		return setFieldObject(var0, var1, var2, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, int i) {		return setFieldObject(var0, var1, var2, i, false);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getField(var0, var1, i, debugReflectMessageDetail);			if (f != null) {				f.set(null, var2);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3) {		return setFieldObject(var0, var1, null, var2, var3, 1);	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, int i) {		return setFieldObject(var0, var1, null, var2, var3, i, false);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3) {		return setFieldObject(var0, var1, var2, var3, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, int i) {		return setFieldObject(var0, var1, var2, var3, i, false);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, int i, boolean debugReflectMessageDetail) {		return setFieldObject(var0, var1, var2, null, var3, i, debugReflectMessageDetail);	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4) {		return setFieldObject(var0, var1, var2, var4, 1);	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4, int i) {		return setFieldObject(var0, var1, var2, var4, i, false);	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4, boolean debugReflectMessageDetail) {		return var2 instanceof String ? setFieldObject(var0, var1, (String) var2, var4, (Object) debugReflectMessageDetail) : setFieldObject(var0, var1, var2, var4, 1, debugReflectMessageDetail);	}	public static boolean setFieldObject(String var0, String var1, Object var2, Object var4, int i, boolean debugReflectMessageDetail) {		return setFieldObject(loadClass(var0), var1, var2, var4, i, debugReflectMessageDetail);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4) {		return setFieldObject(var0, var1, var2, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4, boolean debugReflectMessageDetail) {		return var2 instanceof String ? setFieldObject(var0, var1, (String) var2, var4, (Object)debugReflectMessageDetail) : setFieldObject(var0, var1, var2, var4, 1, debugReflectMessageDetail);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4, int i) {		return setFieldObject(var0, var1, var2, var4, i, false);	}	public static boolean setFieldObject(Class var0, String var1, Object var2, Object var4, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getField(var0, var1, i, debugReflectMessageDetail);			if (f != null) {				f.set(var2, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4) {		return setFieldObject(var0, var1, var2, var3, var4, 1);	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4, int i) {		return setFieldObject(var0, var1, var2, var3, var4, i, false);	}	public static boolean setFieldObject(String var0, String var1, String var2, Object var3, Object var4, int i, boolean debugReflectMessageDetail) {		return setFieldObject(loadClass(var0), var1, var2, var3, var4, i, debugReflectMessageDetail);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4) {		return setFieldObject(var0, var1, var2, var3, var4, 1);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4, int i) {		return setFieldObject(var0, var1, var2, var3, var4, i, false);	}	public static boolean setFieldObject(Class var0, String var1, String var2, Object var3, Object var4, int i, boolean debugReflectMessageDetail) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		try {			f = getField(var0, var1, i, debugReflectMessageDetail);			if (f != null) {				f.set(var3, var4);				return true;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return false;	}	public static Object getFieldObject(Field var0, Object var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Field var0, Object var1, int i) {		return getFieldObject(var0, var1, i, false);	}	public static Object getFieldObject(Field var0, Object var1, int i, boolean debugReflectMessageDetail) {		try {			if (var0 != null) return var0.get(var1);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(Class var0, String var1, int i) {		return getFieldObject(var0, var1, i, false);	}	public static Object getFieldObject(Class var0, String var1, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getField(var0, var1, i, debugReflectMessageDetail);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, int i) {		return getFieldObject(var0, var1, var2, i, false);	}	public static Object getFieldObject(Class var0, String var1, String var2, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getField(var0, var1, var2, i, debugReflectMessageDetail);			if (f != null) return f.get(null);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(Class var0, String var1, Object var2, int i) {		return getFieldObject(var0, var1, var2, i, false);	}	public static Object getFieldObject(Class var0, String var1, Object var2, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getField(var0, var1, i, debugReflectMessageDetail);			if (f != null) return f.get(var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3, int i) {		return getFieldObject(var0, var1, var2, var3, i, false);	}	public static Object getFieldObject(Class var0, String var1, String var2, Object var3, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getField(var0, var1, var2, i, debugReflectMessageDetail);			if (f != null) return f.get(var3);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getFieldObject(String var0, String var1, String var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, int i) {		return getFieldObject(var0, var1, var2, i, false);	}	public static Object getFieldObject(String var0, String var1, String var2, int i, boolean debugReflectMessageDetail) {		return getFieldObject(loadClass(var0), var1, var2, i, debugReflectMessageDetail);	}	public static Object getFieldObject(String var0, String var1, Object var2) {		return getFieldObject(var0, var1, var2, 1);	}	public static Object getFieldObject(String var0, String var1, Object var2, int i) {		return getFieldObject(var0, var1, var2, i, false);	}	public static Object getFieldObject(String var0, String var1, Object var2, int i, boolean debugReflectMessageDetail) {		return getFieldObject(loadClass(var0), var1, var2, i, debugReflectMessageDetail);	}	public static Object getFieldObject(String var0, String var1) {		return getFieldObject(var0, var1, 1);	}	public static Object getFieldObject(String var0, String var1, int i) {		return getFieldObject(var0, var1, i, false);	}	public static Object getFieldObject(String var0, String var1, int i, boolean debugReflectMessageDetail) {		return getFieldObject(loadClass(var0), var1, i, debugReflectMessageDetail);	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3) {		return getFieldObject(var0, var1, var2, var3, 1);	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3, int i) {		return getFieldObject(var0, var1, var2, var3, i, false);	}	public static Object getFieldObject(String var0, String var1, String var2, Object var3, int i, boolean debugReflectMessageDetail) {		return getFieldObject(loadClass(var0), var1, var2, var3, i, debugReflectMessageDetail);	}	public static Field getField(Class var0, String var1, String var2) {		return getField(var0, var1, var2, 1);	}	public static Field getField(Class var0, String var1, String var2, int i) {		return getField(var0, var1, var2, i, false);	}	public static Field getField(Class var0, String var1, String var2, int i, boolean debugReflectMessageDetail) {		var1 = reflectStringSetting(var1, var2);		Field f = getField(var0, var1, i, debugReflectMessageDetail);		return f;	}	public static Field getField(Class var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(Class var0, String var1, int i) {		return getField(var0, var1, i, false);	}	public static Field getField(Class var0, String var1, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getRawField(var0, var1, i, debugReflectMessageDetail);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	public static Field getField(String var0, String var1, String var2) {		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, 1);		if (f != null) return f;		f = getField(var0, var2, 1);		return f;	}	public static Field getField(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Field f = null;		Class c = loadClass(var0);		if (c != null) f = getField(c, var1, i);		return f;	}	public static Field getField(String var0, String var1) {		return getField(var0, var1, 1);	}	public static Field getField(String var0, String var1, int i) {		return getField(var0, var1, i, false);	}	public static Field getField(String var0, String var1, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = getRawField(loadClass(var0), var1, i, debugReflectMessageDetail);			if (f != null) f.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return f;	}	private static Field getRawField(Class var0, String var1) {		return getRawField(var0, var1, 1);	}	private static Field getRawField(Class var0, String var1, int i) {		return getRawField(var0, var1, i, false);	}	private static Field getRawField(Class var0, String var1, int i, boolean debugReflectMessageDetail) {		String s = var0.getName() + "," + var1;		if (fieldMap.containsKey(s)) return fieldMap.get(s);		boolean flag = debugDisplay(i) | debugReflectMessageDetail;		if (ngFieldList.contains(s)				&& i > -2) {			if (i > -1) {				String s1 = "getRawField ngFieldList.contains s="+s;				//Modchu_Main.setRuntimeException(s1);				if (Modchu_Main.getMinecraftVersion() < 164) {					Modchu_Debug.lDebug(s1);				} else {					Modchu_Debug.mDebug(s1);				}			}			return null;		}		Field f = null;		LinkedList<Exception> e = flag ? new LinkedList() : null;		if (var1 != null				&& var0 != null) {			List list = getFieldName(var1);			if (list != null					&& !list.isEmpty()) {				for (Object o1 : list) {					if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField Exception getDeclaredField Class=" + var0 + " s1=" + o1);					if (o1 instanceof String) {						f = getRawField_r(var0, (String) o1, e, debugReflectMessageDetail);						if (f != null) {							if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 1 ok. var0="+var0+" o1="+o1);							f.setAccessible(true);							fieldMap.put(s, f);							return f;						}					} else if (o1 instanceof List) {						for (Object o2 : (List) o1) {							if (o2 instanceof String) {								f = getRawField_r(var0, (String) o2, e, debugReflectMessageDetail);								if (f != null) {									if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 2 ok. var0="+var0+" o1="+o1);									f.setAccessible(true);									fieldMap.put(s, f);									return f;								}							}						}					}				}			}			try {				f = var0.getDeclaredField(var1);				if (f != null) {					if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 3 ok. var0=" + var0 + " var1="+var1);					f.setAccessible(true);					fieldMap.put(s, f);					return f;				}			} catch (Exception e1) {				if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField Exception 2 Class="+var0+" var1="+var1);				if (flag) e.add(e1);			}			//if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField Exception getDeclaredField Class=" + var0 + " String=" + var1);			try {				f = var0.getField(var1);				if (f != null) {					if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 4 ok. var0=" + var0 + " var1="+var1);					f.setAccessible(true);					fieldMap.put(s, f);					return f;				}			} catch (Exception e3) {			}			if (list != null					&& !list.isEmpty()) {				for (Object o1 : list) {					if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField getField Class="+var0+" o1="+o1);					if (o1 instanceof String) {						f = getRawSuperField(var0, (String)o1, e, i, debugReflectMessageDetail);						if (f != null) {							if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 5 ok. var0=" + var0 + " o1="+o1);							f.setAccessible(true);							fieldMap.put(s, f);							return f;						}					} else if (o1 instanceof List) {						for (Object o2 : (List) o1) {							if (o2 instanceof String) {								f = getRawSuperField(var0, (String)o2, e, i, debugReflectMessageDetail);								if (f != null) {									if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 6 ok. var0=" + var0 + " o2="+o2);									f.setAccessible(true);									fieldMap.put(s, f);									return f;								}							}						}					}				}			}			f = getRawSuperField(var0, var1, e, i, debugReflectMessageDetail);			if (f != null) {				if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField 7 ok. var0=" + var0 + " var1="+var1);				f.setAccessible(true);				fieldMap.put(s, f);				return f;			}			if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField getField 8 f="+f);		} else {			if (debugReflectMessageDetail) {				if (var0 != null); else Modchu_Debug.lDebug("getRawField getField var0 == null !!");				if (var1 != null); else Modchu_Debug.lDebug("getRawField getField var1 == null !!");			}		}		if (flag) {			if (e != null					&& !e.isEmpty()) {				for (Exception e1 : e) {					printStackTrace(e1);				}			}		}		ngFieldList.add(s);		if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField ngFieldList.add s="+s);		return f;	}	private static Field getRawField_r(Class var0, String s, LinkedList<Exception> e, boolean debugReflectMessageDetail) {		Field f = null;		try {			f = var0.getDeclaredField(s);			if (f != null) {				if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField_r 1 ok. var0="+var0+" s="+s);				f.setAccessible(true);				fieldMap.put(s, f);				return f;			}		} catch (Exception e2) {			if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField_r Exception var0="+var0+" s="+s);			if (e != null) e.add(e2);		}		try {			f = var0.getField(s);			if (f != null) {				if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawField_r 2 ok. var0="+var0+" s="+s);				f.setAccessible(true);				fieldMap.put(s, f);				return f;			}		} catch (Exception e3) {		}		return null;	}	private static Field getRawSuperField(Class c, String s1, List<Exception> e, int i, boolean debugReflectMessageDetail) {		Field f = null;		if (debugReflectMessageDetail) {			Modchu_Debug.lDebug("getRawSuperField 1 c="+c+" s1="+s1);			Modchu_Debug.lDebug("getRawSuperField 2 c.getSuperclass()="+c.getSuperclass());		}		for (Class c1 = c; c1 != null && c1 != Object.class; c1 = c1.getSuperclass()) {			if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawSuperField c1="+c1);			if (c1 != null) {				try {					f = c1.getDeclaredField(s1);					if (f != null); else f = c1.getField(s1);					if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawSuperField f="+f);					if (f != null) {						f.setAccessible(true);						return f;					}				} catch (Exception e4) {					if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawSuperField Exception 4 c="+c+" s1="+s1);					if (e != null) e.add(e4);				}			}		}		return f;	}	public static Method getMethod(Class var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, 1);		return method;	}	public static Method getMethod(Class var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(Class var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(Class var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(Class var0, String var1, Object[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(Class var0, String var1, Object[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(Class var0, String var1, Object[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(Class var0, String var1, Object[] var2, int i) {		StringBuilder sd = new StringBuilder();		for (Object o1 : var2) {			sd.append(o1.getClass());		}		String key = sd.toString();		Class[] c = null;		if (acquisitionMethodClassMap.containsKey(key)) c = acquisitionMethodClassMap.get(key);		if (c != null) return getRawMethod(var0, var1, c, i);		c = new Class[var2.length];		for (int i1 = 0; i1 < var2.length; i1++) {			c[i1] = var2[i1].getClass();		}		return getRawMethod(var0, var1, c, i);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2, boolean debugReflectMessageDetail) {		return getRawMethod(var0, var1, var2, 1, debugReflectMessageDetail);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2, int i) {		return getRawMethod(var0, var1, var2, i, false);	}	private static Method getRawMethod(Class var0, String var1, Class[] var2, int i, boolean debugReflectMessageDetail) {		if (var0 != null				&& var1 != null); else return null;		String s = new StringBuilder().append(var0.getName()).append(",").append(var1).toString();		if (var2 != null				&& var2.length > 0) {			StringBuilder sd = new StringBuilder().append(s);			int i1 = 0;			for (Class c : var2) {				String name = c != null ? c.getName() : null;				if (name != null						&& !name.isEmpty()) sd.append(",").append(name);				else {					Modchu_Debug.lDebug1("getRawMethod Class[] null error !! var0="+var0+" var1="+var1);					return null;				}				i1++;			}			s = sd.toString();			sd = null;		}		boolean debug = false;		//if (debug) Modchu_Debug.mDebug("getRawMethod s="+s);		if (methodMap.containsKey(s)) return (Method) methodMap.get(s);		if (ngMethodList.contains(s)) {			if (i > -1) {				String s1 = "getRawMethod ngMethodList.contains s="+s;				if (Modchu_Main.getMinecraftVersion() < 164) {					Modchu_Debug.lDebug(s1);				} else {					Modchu_Debug.mDebug(s1);				}			}			return null;		}		//Modchu_Debug.lDebug("getRawMethod s="+s);		Method method = null;		boolean flag = debugDisplay(i) | debugReflectMessageDetail;		LinkedList<Exception> e = flag ? new LinkedList() : null;		List list = getMethodName(var1);		if (list != null				&& !list.isEmpty()); else {			if (i > -3) {				if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod ngMethodList.add s="+s);				ngMethodList.add(var1);			}			return null;		}		for (Object o1 : list) {			if (debug) Modchu_Debug.lDebug("getRawMethod o1="+o1);			if (o1 instanceof String) {				method = getRawMethodDeclaredMethod(var0, (String) o1, var2, s, e, i, debugReflectMessageDetail);				if (method != null) {					if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 1 method ok return.");					return method;				}			} else if (o1 instanceof List) {				for (Object o2 : (List) o1) {					if (o2 instanceof String) {						method = getRawMethodDeclaredMethod(var0, (String) o2, var2, s, e, i, debugReflectMessageDetail);						if (method != null) {							if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 2 method ok return.");							return method;						}					}				}			}		}		method = getRawMethodDeclaredMethod(var0, var1, var2, s, e, i, debugReflectMessageDetail);		if (method != null) {			if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 3 method ok return.");			return method;		}		for (Object o1 : list) {			if (o1 instanceof String) {				if (debug) Modchu_Debug.lDebug("getRawMethod superclass o1="+o1);				method = getRawMethodDeclaredMethodSuper(var0, (String) o1, var2, s, e, i, debugReflectMessageDetail);				if (method != null) {					if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 4 method ok return.");					return method;				}			} else if (o1 instanceof List) {				for (Object o2 : (List) o1) {					if (o2 instanceof String) {						if (debug) Modchu_Debug.lDebug("getRawMethod superclass o2="+o2);						method = getRawMethodDeclaredMethodSuper(var0, (String) o2, var2, s, e, i, debugReflectMessageDetail);						if (method != null) {							if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 5 method ok return.");							return method;						}					}				}			}		}		method = getRawMethodDeclaredMethodSuper(var0, var1, var2, s, e, i, debugReflectMessageDetail);		if (method != null) {			if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 6 method ok return.");			return method;		}/*		Class[] tempClasss = null;		boolean flag = acquisitionMethodClassMap.containsKey(s);		if (flag) {			tempClasss = acquisitionMethodClassMap.get(s);			for (Class c = var0; c != null && c != Object.class; c = c.getSuperclass()) {				for (int i2 = 0; i2 < tempClasss.length; i2++) {					method = getRawMethodDeclaredMethod(c, var1, tempClasss, var3, s, e, i);					if (method != null) return method;				}			}		}		HashMap<Integer, Class[]> tempClasssArrayMap = new HashMap();		HashMap<Integer, Integer> tempClasssArrayLengthMap = new HashMap();		int i3 = 0;		LinkedList<Class> list = new LinkedList();		if (var2 != null				&& var2.length > 0) {			if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod s="+s);			for (Class c : var2) {				list.add(c);				for (Class c1 : c.getClasses()) {					list.add(c1);				}				Class[] c3 = new Class[list.size()];				int i2 = 0;				for (Class c2 : list) {					c3[i2] = c2;					i2++;				}				tempClasssArrayMap.put(i3, c3);				tempClasssArrayLengthMap.put(i3, c3.length);				if (debug) {					Modchu_Debug.lDebug("Modchu_Reflect getRawMethod tempClasssArrayMap.put "+i3+"---------s");					for (Class c2 : c3) {						Modchu_Debug.lDebug("Modchu_Reflect getRawMethod tempClasssArrayMap.put "+c2);					}					Modchu_Debug.lDebug("Modchu_Reflect getRawMethod tempClasssArrayMap.put "+i3+"---------e");				}				i3++;				list.clear();			}		}		int[] count = null;		for (Class c = var0; c != null && c != Object.class; c = c.getSuperclass()) {			if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod c="+c);			count = var2 != null					&& var2.length > 0 ? new int[var2.length] : null;			if (count != null) Arrays.fill(count, 0);			tempClasss = var2;			while(true) {				if (var2 != null						&& var2.length > 0) {					for (int i2 = 0; i2 < tempClasss.length; i2++) {						for (int i1 = 0; i1 < tempClasss.length; i1++) {							Class[] c1 = tempClasssArrayMap.get(i1);							if (c1 != null									&& count != null									&& count.length > i1									&& c1.length > count[i1]) {								tempClasss[i1] = c1[count[i1]];								if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod tempClasssArrayMap.get tempClasss["+i1+"]="+tempClasss[i1]);							} else {								Modchu_Debug.lDebug("Modchu_Reflect getRawMethod tempClasssArrayMap.get null error !! c1="+c1+" count="+count);							}						}						method = getRawMethodDeclaredMethod(c, var1, tempClasss, var3, s, e, i);						if (method != null) {							acquisitionMethodClassMap.put(s, tempClasss);							if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod method ok 1 return.");							return method;						}					}					count = getRawMethodAddCount(count, tempClasssArrayLengthMap);					if (count != null); else {						break;					}				} else {					method = getRawMethodDeclaredMethod(c, var1, tempClasss, var3, s, e, i);					if (method != null) {						if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod method ok 2 return.");						return method;					}					break;				}			}		}*/		if (i > -1) {			if (var0 != null				&& var0.getName().indexOf("Minecraft") == -1) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod miss var0=" + var0 + " var1=" + var1 + " var2=" + (var2 != null ? var2.toString() : null));			if (e != null					&& !e.isEmpty()) {				for (Exception e1 : e) {					printStackTrace(e1);				}			}		}		if (i > -3) {			if (debug) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod ngMethodList.add s="+s);			ngMethodList.add(s);		}		return method;	}	private static Method getRawMethodDeclaredMethodSuper(Class c, String s, Class[] var2, String s1, LinkedList<Exception> e, int i, boolean debugReflectMessageDetail) {		Method method = null;		if (debugReflectMessageDetail) {			Modchu_Debug.lDebug("getRawMethod superclass c="+c);			Modchu_Debug.lDebug("getRawMethod superclass c.getSuperclass()="+c.getSuperclass());		}		for (Class c1 = c; c1 != null && c1 != Object.class; c1 = c1.getSuperclass()) {			if (debugReflectMessageDetail) Modchu_Debug.lDebug("getRawMethod superclass c1="+c1);			method = getRawMethodDeclaredMethod(c1, s, var2, s1, e, i, debugReflectMessageDetail);			if (method != null) {				if (debugReflectMessageDetail) Modchu_Debug.lDebug("Modchu_Reflect getRawMethod 2 method ok return.");				return method;			}		}		return null;	}	private static int[] getRawMethodAddCount(int[] count, HashMap<Integer, Integer> tempClasssArrayLengthMap) {		if (count != null				&& count.length > 0); else return null;		for (int i = 0; i < count.length; i++) {			count[i]++;			int ck = tempClasssArrayLengthMap.get(i);			if (count[i] >= ck) {				count[i] = 0;			} else {				return count;			}		}		return null;	}	private static Method getRawMethodDeclaredMethod(Class var0, String var1, Class[] var2, String s, LinkedList e, int i, boolean debugReflectMessageDetail) {		Method method = null;		boolean flag = debugDisplay(i)				| debugReflectMessageDetail;		try {			if (var0 != null) method = var0.getDeclaredMethod(var1, var2);			if (method != null) {				method.setAccessible(true);				methodMap.put(s, method);				return method;			}		} catch (Error e1) {			if (flag					&& e != null					&& var0 != Object.class) e.add(e1);		} catch (Exception e1) {			if (flag					&& e != null					&& var0 != Object.class) e.add(e1);		}		return null;	}	public static Method getMethod(String var0, String var1, String var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, (Class[]) null, i);		return method;	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3) {		return getMethod(var0, var1, var2, var3, 1);	}	public static Method getMethod(String var0, String var1, String var2, Class[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = getMethod(var0, var1, var3, i);		return method;	}	public static Method getMethod(String var0, String var1) {		return getMethod(var0, var1, 1);	}	public static Method getMethod(String var0, String var1, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, null, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	public static Method getMethod(String var0, String var1, Class[] var2) {		return getMethod(var0, var1, var2, 1);	}	public static Method getMethod(String var0, String var1, Class[] var2, int i) {		Method method = null;		try {			method = getRawMethod(var0, var1, var2, i);			if (method != null) method.setAccessible(true);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return method;	}	private static Method getRawMethod(String var0, String var1, Class[] var2) {		return getRawMethod(var0, var1, var2, 1);	}	private static Method getRawMethod(String var0, String var1, Class[] var2, int i) {		return getRawMethod(loadClass(var0), var1, var2, i);	}	public static Object invoke(Method var0) {		return invoke(var0, 1);	}	public static Object invoke(Method var0, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1) {		return invoke(var0, var1, 1);	}	public static Object invoke(Method var0, Object var1, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object var2, int i) {		try {			if (var0 != null) {				Object o = var0.invoke(var1, var2);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invoke(Method var0, Object var1, Object... var2) {		return invoke(var0, var1, var2, 1);	}	public static Object invoke(Method var0, Object var1, Object[] var2, int i) {		try {			if (var0 != null) return var0.invoke(var1, (Object[]) var2);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(Class var0, String var1, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}/*	public static Object invokeMethod(Class var0, String var1, String var2, Object[] var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Object[] var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(null, var3);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}*/	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object[] var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Object var3, Object[] var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var4, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(Class var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		try {			method = getMethod(var0, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(Class var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		try {			method = getMethod(var0, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			Class c = var0.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1) {		return invokeMethod(var0, var1, 1);	}	public static Object invokeMethod(String var0, String var1, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2) {		return invokeMethod(var0, var1, var2, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(null);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3) {		return invokeMethod(var0, var1, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3) {		return invokeMethod(var0, var1, var2, var3, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Object var3, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4) {		return invokeMethod(var0, var1, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, (Class[]) null, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object... var3) {		return invokeMethod(var0, var1, var2, null, var3, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object[] var3, int i) {		return invokeMethod(var0, var1, var2, null, var3, i);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, var4, 1);	}	public static Object invokeMethod(String var0, String var1, Class[] var2, Object var3, Object[] var4, int i) {		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var2, i);			if (method != null) {				Object o = method.invoke(var3, var4);				return o;			}		} catch (IllegalArgumentException e) {			if (debugDisplay(i)) printStackTrace(e);			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object... var4) {		return invokeMethod(var0, var1, var2, var3, null, (Object[]) var4, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object... var5) {		return invokeMethod(var0, var1, var2, var3, var4, var5, 1);	}	public static Object invokeMethod(String var0, String var1, String var2, Class[] var3, Object var4, Object[] var5, int i) {		var1 = reflectStringSetting(var1, var2);		Method method = null;		Class c = null;		try {			c = loadClass(var0);			if (c != null) method = getMethod(c, var1, var3, i);			if (method != null) {				Object o = method.invoke(var4, var5);				return o;			}		} catch (IllegalArgumentException e) {			c = c.getSuperclass();			if (c != null) invokeMethod(c, var1, var2, var3, var4, var5, i);		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Class loadClass(String var0) {		return loadClass(var0, 1);	}	public static Class loadClass(String var0, int i) {		return loadClass(var0, i, false);	}	public static Class loadClass(String var0, int i, boolean debugReflectMessageDetail) {		if (var0 != null				&& !var0.isEmpty()); else {			String s = "Modchu_Reflect loadClass load missing class var0 null !!";			Modchu_Debug.mDebug(s);			Modchu_Main.setRuntimeException(s);			return null;		}		if (javaDefaultClassMap.containsKey(var0)) return javaDefaultClassMap.get(var0);		Class c = null;		var0 = var0.replace("\\", ".").replace("/", ".");		if (classMap.containsKey(var0)) return classMap.get(var0);		if (ngClassList.contains(var0)) return null;		List<String> list = getClassName(var0);		if (list != null				&& !list.isEmpty()); else {			Modchu_Debug.mDebug("Modchu_Reflect loadClass getClassName load missing class s0 null !!");			return null;		}		for (String s1 : list) {			try {				c = Class.forName(s1);				if (c != null) {					break;				}			} catch(Error e) {				if (debugReflectMessageDetail) {					if (e instanceof NoClassDefFoundError) {						Throwable e1 = ((NoClassDefFoundError) e).getCause();						printStackTraceThrowable(e1);					} else {						printStackTraceError(e);					}				}			} catch(Exception e) {				if (debugReflectMessageDetail) {					if (e instanceof ClassNotFoundException) {						Throwable e1 = ((ClassNotFoundException) e).getException();						printStackTraceThrowable(e1);					} else {						printStackTrace(e);					}				}			} catch (Throwable e) {				if (debugReflectMessageDetail) e.printStackTrace();			}			try {				String s = ""+s1;				s = s.replaceAll("net.minecraft.src.", "");				s = s.indexOf(".") > -1 ? Modchu_Main.lastIndexProcessing(s, ".") : s;				s = (!Modchu_Main.isRelease() ? "net.minecraft.src." : "") + s;				c = Class.forName(s);				if (c != null) {					break;				}			} catch (Error e1) {				if (debugReflectMessageDetail) printStackTraceError(e1);			} catch (ClassNotFoundException e1) {				if (debugReflectMessageDetail) printStackTrace(e1);			} catch (Exception e1) {				if (debugReflectMessageDetail) printStackTrace(e1);			}			try {				String s = s1;				while(true) {					int i1 = s.indexOf(".");					if (i1 < 0) break;					s = s.substring(i1 + 1);					try {						c = Class.forName(s);						if (c != null) {							break;						}					} catch (Error e) {						if (debugReflectMessageDetail) printStackTraceError(e);					} catch (ClassNotFoundException e) {						if (debugReflectMessageDetail) printStackTrace(e);					} catch (Exception e) {						if (debugReflectMessageDetail) printStackTrace(e);					}				}			} catch (Error e1) {				if (debugReflectMessageDetail) printStackTraceError(e1);			} catch (Exception e1) {				if (debugReflectMessageDetail) printStackTrace(e1);			}		}		if (c != null) {			classMap.put(var0, c);			return c;		}		ngClassList.add(var0);		if (i > -1) {			String s = "Modchu_Reflect loadClass [ERROR] load missing class=" + var0;			Modchu_Debug.lDebug(s);			Modchu_Main.setRuntimeException(s);		}		else if (i == -1) Modchu_Debug.mDebug("Modchu_Reflect loadClass [INFO] load missing class=" + var0);		return null;	}	public static Class loadClassArray(String var0) {		return loadClassArray(var0, 2);	}	public static Class loadClassArray(Class var0) {		return loadClassArray(var0, 2);	}	public static Class loadClassArray(String var0, int i) {		return loadClassArray(loadClass(var0), i);	}	public static Class loadClassArray(Class var0, int i) {		Object[] o = (Object[]) Array.newInstance(var0, i);		return o.getClass();	}	public static Object newInstance(String var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(Class var1) {		return newInstance(var1, null, null, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(String var1, Class[] var2, Object[] var3, int i) {		return newInstance(loadClass(var1, i), var2, var3, i);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3) {		return newInstance(var1, var2, var3, 1);	}	public static Object newInstance(Class var1, Class[] var2, Object[] var3, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) {				constructor.setAccessible(true);				return constructor.newInstance(var3);			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object[] newInstanceArray(String var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(String var1, int i, int i2) {		return newInstanceArray(loadClass(var1, i), i, i2);	}	public static Object[] newInstanceArray(Class var1, int i) {		return newInstanceArray(var1, i, 1);	}	public static Object[] newInstanceArray(Class var1, int i, int i2) {		Constructor constructor = null;		try {			if (var1 != null) return (Object[]) Array.newInstance(var1, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Object newInstanceArray(String var1, int[] i) {		return newInstanceArray(loadClass(var1, 1), i, 1);	}	public static Object newInstanceArray(String var1, int[] i, int i2) {		return newInstanceArray(loadClass(var1, i2), i, i2);	}	public static Object newInstanceArray(Class var1, int[] i) {		return newInstanceArray(var1, i, 1);	}	public static Object newInstanceArray(Class var1, int[] i, int i2) {		Constructor constructor = null;		try {			if (var1 != null) return Array.newInstance(var1, i);		} catch (Exception e) {			if (debugDisplay(i2)) printStackTrace(e);		}		return null;	}	public static Constructor getConstructor(String var1, Class[] var2) {		return getConstructor(loadClass(var1, 1), var2, 1);	}	public static Constructor getConstructor(String var1, Class[] var2, int i) {		return getConstructor(loadClass(var1, i), var2, i);	}	public static Constructor getConstructor(Class var1, Class[] var2) {		return getConstructor(var1, var2, 1);	}	public static Constructor getConstructor(Class var1, Class[] var2, int i) {		Class c = var1;		Constructor constructor = null;		try {			try {				if (c != null) constructor = c.getConstructor(var2);			} catch (Exception e) {				try {					if (c != null) constructor = c.getDeclaredConstructor(var2);				} catch (Exception e1) {					if (debugDisplay(i)) printStackTrace(e1);				}			}			if (constructor != null) return constructor;		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, 1);		return null;	}	public static Object getPrivateValue(String var0, Object var1, int var2, int i) {		Class c = loadClass(var0);		if (c != null) return getPrivateValue(c, var1, var2, i);		return null;	}	public static Object getPrivateValue(Class var0, Object var1, int var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, int var2, int i) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception var4) {			if (debugDisplay(i)) var4.printStackTrace();		}		return null;	}	public static Object getPrivateValue(Class var0, Object var1, String var2) {		return getPrivateValue(var0, var1, var2, 1);	}	public static Object getPrivateValue(Class var0, Object var1, String var2, boolean debugReflectMessageDetail) {		return getPrivateValue(var0, var1, var2, 1, debugReflectMessageDetail);	}	public static Object getPrivateValue(Class var0, Object var1, String var2, int i) {		return getPrivateValue(var0, var1, var2, i, false);	}	public static Object getPrivateValue(Class var0, Object var1, String var2, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				return f.get(var1);			}		} catch (Exception e) {			if (debugReflectMessageDetail) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					return f.get(var1);				}			} catch (Exception e2) {				if (debugReflectMessageDetail) printStackTrace(e2);			}		}		return null;	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3, boolean debugReflectMessageDetail) {		setPrivateValue(var0, var1, var2, var3, 1, debugReflectMessageDetail);	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3, int i) {		setPrivateValue(var0, var1, var2, var3, i, false);	}	public static void setPrivateValue(Class var0, Object var1, int var2, Object var3, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredFields()[var2];			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugReflectMessageDetail) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredFields()[var2];				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugReflectMessageDetail) printStackTrace(e2);			}		}	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3) {		setPrivateValue(var0, var1, var2, var3, 1);	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3, boolean debugReflectMessageDetail) {		setPrivateValue(var0, var1, var2, var3, 1, debugReflectMessageDetail);	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3, int i) {		setPrivateValue(var0, var1, var2, var3, i, false);	}	public static void setPrivateValue(Class var0, Object var1, String var2, Object var3, int i, boolean debugReflectMessageDetail) {		Field f = null;		try {			if (var0 != null) f = var0.getDeclaredField(var2);			if (f != null) {				f.setAccessible(true);				f.set(var1, var3);			}		} catch (Exception e) {			if (debugReflectMessageDetail) printStackTrace(e);		}		for (Class c = var0; c != Object.class; c = c.getSuperclass()) {			try {				f = c.getDeclaredField(var2);				if (f != null) {					f.setAccessible(true);					f.set(var1, var3);				}			} catch (Exception e2) {				if (debugReflectMessageDetail) printStackTrace(e2);			}		}	}	public static Enum getEnum(String var0, String var1) {		return getEnum(loadClass(var0), var1, 1);	}	public static Enum getEnum(String var0, String var1, int i) {		return getEnum(loadClass(var0), var1, i);	}	public static Enum getEnum(Class c, String var1) {		return getEnum(c, var1, 1);	}	public static Enum getEnum(Class c, String var1, int i) {		Enum en = null;		Object[] o = null;		try {			if (c != null) o = c.getEnumConstants();			if (o != null) {				for (int i1 = 0; i1 < o.length; i1++) {					if (((Enum)o[i1]).name().equalsIgnoreCase(var1)) {						en = (Enum) o[i1];						break;					}				}				return en;			}		} catch (Exception e) {			if (debugDisplay(i)) printStackTrace(e);		}		return null;	}	public static Enum getEnum(String var0,  int i, int i1) {		return getEnum(loadClass(var0), i, i1);	}	public static Enum getEnum(Class c, int i, int i1) {		Enum en = null;		Object[] o = null;		try {			if (c != null) o = c.getEnumConstants();			if (o != null) {				if (o.length > i) {					en = (Enum) o[i];					return en;				}			}		} catch (Exception e) {			if (debugDisplay(i1)) printStackTrace(e);		}		return null;	}	private static boolean debugDisplay(int i) {		switch (i) {		case -1:			return false;		case 0:			return true;		case 1:		case 2:			return debugReflectMessage;		}		return false;	}	private static String reflectStringSetting(String var1, String var2) {		return Modchu_Main.isRelease() ? var1 : var2;	}	public static List getFieldName(String s) {		boolean debug = false;		if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName 1 s="+s);		List list = new ArrayList();		boolean flag = false;		if (fieldNameMap != null				&& fieldNameMap.containsKey(s)) {			List<String> list1 = fieldNameMap.get(s);			if (debug) {				Modchu_Debug.lDebug("Modchu_Reflect getFieldName list1="+list1);				Modchu_Debug.lDebug("Modchu_Reflect getFieldName fieldNameObfuscationMap="+fieldNameObfuscationMap);			}			if (Modchu_Main.getMinecraftVersion() < 164					&& fieldNameObfuscationMap != null) {				if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName list1.size()="+list1.size());				for (int i = 0; i < list1.size(); i++) {					Object o = list1.get(i);					if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName o="+o);					if (fieldNameObfuscationMap.containsKey(o)) {						if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName fieldNameObfuscationMap.containsKey");						list.add(fieldNameObfuscationMap.get(o));						flag = true;						if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName 2 list.get("+i+")="+list.get(i));					} else {						if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName fieldNameObfuscationMap else");						list.add(o);					}				}			} else {				list = list1;			}		} else {			if (fieldNameObfuscationMap.containsKey(s)) {				list.add(fieldNameObfuscationMap.get(s));				if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName 3 fieldNameObfuscationMap.get(s)="+fieldNameObfuscationMap.get(s));				flag = true;			} else {				if (debug) {					Modchu_Debug.lDebug("Modchu_Reflect getFieldName 4 fieldNameMap="+fieldNameMap);					if (fieldNameMap != null) Modchu_Debug.lDebug("Modchu_Reflect getFieldName 5 fieldNameMap.containsKey(s)="+fieldNameMap.containsKey(s));				}				list.add(s);			}		}		if (!flag) {			if (s.startsWith("field")					&& !Modchu_Main.isForge) Modchu_Debug.lDebug("getFieldName check out s=" + s);		}		if (debug) Modchu_Debug.lDebug("Modchu_Reflect getFieldName return list="+Modchu_Main.listToString(list));		return list;	}	public static List getMethodName(String s) {		boolean debug = false;		if (debug) Modchu_Debug.lDebug("Modchu_Reflect getMethodName 1 s="+s);		List list = new ArrayList();		boolean flag = false;		if (methodNameMap != null				&& methodNameMap.containsKey(s)) {			List<String> list1 = methodNameMap.get(s);			if (debug) Modchu_Debug.lDebug("Modchu_Reflect getMethodName 2 list1="+list1);			if (Modchu_Main.getMinecraftVersion() < 164					&& methodNameObfuscationMap != null) {				for (int i = 0; i < list1.size(); i++) {					Object o = list1.get(i);					if (methodNameObfuscationMap.containsKey(o)) {						list.add(methodNameObfuscationMap.get(o));						flag = true;						if (debug) Modchu_Debug.lDebug("Modchu_Reflect getMethodName 3 list.get("+i+")="+list.get(i));					} else {						list.add(o);					}				}			} else {				list = list1;			}		} else {			if (methodNameObfuscationMap.containsKey(s)) {				list.add(methodNameObfuscationMap.get(s));				flag = true;				if (debug) Modchu_Debug.lDebug("Modchu_Reflect getMethodName 4 methodNameObfuscationMap.get(s)="+methodNameObfuscationMap.get(s));			} else {				list.add(s);				if (debug) Modchu_Debug.lDebug("Modchu_Reflect getMethodName 5 s="+s);			}		}		if (!flag) {			if (s.startsWith("func")					&& !Modchu_Main.isForge) Modchu_Debug.lDebug("getMethodName check out s=" + s);		}		if (debug) Modchu_Debug.lDebug("Modchu_Reflect getMethodName 4 return list="+Modchu_Main.listToString(list));		return list;	}	public static List<String> getClassName(String s) {		List<String> list = null;		int i1 = s.lastIndexOf("[]");		boolean flag = i1 > -1;		if (flag) s = s.substring(0, i1);		if (classNameMap != null				&& classNameMap.containsKey(s)) {			list = classNameMap.get(s);			//Modchu_Debug.lDebug("getClassName s1="+s1);		} else {			//Modchu_Debug.lDebug("getClassName else s="+s);			list = new ArrayList();			list.add(s);		}		if (flag) {			for (int i = 0; i < list.size(); i++) {				list.set(i, list.get(i) + "[]");			}		}		return list;	}	private static void printStackTraceError(Error e) {		if (e != null); else return;		e.printStackTrace();		Modchu_Debug.lDebug("Modchu_Reflect printStackTraceError", 2, e);	}	private static void printStackTrace(Exception e) {		if (e != null); else return;		e.printStackTrace();		Modchu_Debug.lDebug("Modchu_Reflect printStackTrace", 2, e);	}	private static void printStackTraceThrowable(Throwable e) {		if (e != null); else return;		e.printStackTrace();		Modchu_Debug.lDebug("Modchu_Reflect printStackTraceThrowable", 2, e);	}	public static void initNameMap() {		Modchu_Debug.lDebug("Modchu_Reflect initNameMap");		int version = Modchu_Main.getMinecraftVersion();		String s = null;		if (Modchu_Main.isForge				| Modchu_Main.isRelease()) {			s = "assets/modchulib/data/mc"+version+"/class.csv";			classNameMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 2, classNameMap, false);		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap classNameMap.size()="+classNameMap.size());		if (Modchu_Main.isForge) {			s = "assets/modchulib/data/mc"+version+"/class1.csv";			classNameMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, classNameMap, false);		} else {			if (!Modchu_Main.isRelease()) {				s = "assets/modchulib/data/mc"+version+"/class3.csv";				classNameMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, classNameMap, true);			}		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap classNameMap.size()="+classNameMap.size());		s = "assets/modchulib/data/mc"+version+"/class2.csv";		classNameMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, classNameMap, false);		Modchu_Debug.lDebug("Modchu_Reflect initNameMap classNameMap.size()="+classNameMap.size());		if (Modchu_Main.isRelease()) {			s = "assets/modchulib/data/mc"+version+("/methods.csv");			methodNameMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, methodNameMap, false);			Modchu_Debug.lDebug("Modchu_Reflect initNameMap methodNameMap.size()="+methodNameMap.size());			if (!Modchu_Main.isForge) {				s = "assets/modchulib/data/mc"+version+("/methods1.csv");				methodNameObfuscationMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, methodNameObfuscationMap, false);				Modchu_Debug.lDebug("Modchu_Reflect initNameMap methodNameObfuscationMap.size()="+methodNameObfuscationMap.size());			}			s = "assets/modchulib/data/mc"+version+("/fields.csv");			fieldNameMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, fieldNameMap, false);			Modchu_Debug.lDebug("Modchu_Reflect initNameMap fieldNameMap.size()="+fieldNameMap.size());			if (!Modchu_Main.isForge) {				s = "assets/modchulib/data/mc"+version+("/fields1.csv");				fieldNameObfuscationMap = (ConcurrentHashMap<String, List<String>>) initNameMapAddMap(s, 1, fieldNameObfuscationMap, false);				Modchu_Debug.lDebug("Modchu_Reflect initNameMap fieldNameObfuscationMap.size()="+fieldNameObfuscationMap.size());			}		}		if (classNameMap.size() < 1				| methodNameMap.size() < 1				| fieldNameMap.size() < 1) {			StringBuilder sb = new StringBuilder().append("Modchu_Reflect initNameMap ");			if (classNameMap.size() < 1) sb.append("classNameMap.size() < 1 ");			if (methodNameMap.size() < 1) sb.append("methodNameMap.size() < 1 ");			if (fieldNameMap.size() < 1) sb.append("fieldNameMap.size() < 1 ");			String ss = sb.append("error !!").toString();			Modchu_Main.setRuntimeException(ss);			return;		}		Object[] o1 = new Object[]{				"Class", Class.class,				"String", String.class,				"int", int.class,				"Integer", Integer.class,				"Byte", Byte.class,				"byte", byte.class,				"Float", Float.class,				"float", float.class,				"Double", Double.class,				"double", double.class,				"Long", Long.class,				"long", long.class,				"Short", Short.class,				"short", short.class,				"Boolean", Boolean.class,				"boolean", boolean.class,				"List", List.class,				"ArrayList", ArrayList.class,				"LinkedList", LinkedList.class,				"ConcurrentHashMap", ConcurrentHashMap.class,				"HashMap", HashMap.class,				"Map", Map.class,				"Enum", Enum.class,				"File", File.class,				"InputStream", InputStream.class,				"UUID", UUID.class		};		if (o1 != null) {			Modchu_Debug.lDebug("Modchu_Reflect initNameMap 3 o1.length="+o1.length);			for (int i = 0; i < o1.length - 1; i += 2) {				javaDefaultClassMap.put(o1[i].toString(), (Class) o1[i + 1]);			}		}		Modchu_Debug.lDebug("Modchu_Reflect initNameMap end. o1.length="+o1.length);	}	private static Map<String, List<String>> initNameMapAddMap(String s, int type, Map<String, List<String>> map, boolean errorOkFlag) {		int version = Modchu_Main.getMinecraftVersion();		Modchu_Debug.lDebug("initNameMapAddMap s="+s);		LinkedList<String> list = initLoadNameMapFile(s);		if (list != null				&& !list.isEmpty()); else {			if (!errorOkFlag) {				String errorString = "Modchu_Reflect initNameMapAddMap data read error !! fileName="+s;				Modchu_Main.setRuntimeException(errorString);			}			return map;		}		for (String s1 : list) {			if (s1.indexOf(",") < 0) continue;			String[] s0 = s1.split(",");			if (s0 != null); else continue;			switch(type) {			case 0:				if (s0.length > 1						&& s0[0] != null) {					String s2 = s0[0].replaceAll(" ", "").replaceAll("	", "");					String s3 = s0[1] != null ? s0[1].replaceAll(" ", "").replaceAll("	", "") : null;					initNameMapAddMapMapPut(map, s2, s3);				}				break;			case 1:				if (s0.length > 1						&& s0[1] != null) {					String s2 = s0[1].replaceAll(" ", "").replaceAll("	", "");					String s3 = s0[0] != null ? s0[0].replaceAll(" ", "").replaceAll("	", "") : null;					//Modchu_Debug.lDebug("initNameMapAddMap add s2="+s2+" s3="+s3);					initNameMapAddMapMapPut(map, s2, s3);				}				break;			case 2:				if (s0.length < 0) break;				if (!Modchu_Main.isForge) initNameMapAddMapMapPut(map, s0[1], s0[0]);				String s2 = Modchu_Main.lastIndexProcessing(s0[1], ".").replaceAll(" ", "").replaceAll("	", "");				if (s2 != null) {					String s3 = s0[Modchu_Main.isForge ? 1 : 0];					s3 = s3 != null ? s3.replaceAll(" ", "").replaceAll("	", "") : null;					//Modchu_Debug.lDebug("initNameMapAddMap add s2="+s2+" s3="+s3);					initNameMapAddMapMapPut(map, s2, s3);				}				break;			}		}		return map;	}	private static void initNameMapAddMapMapPut(Map<String, List<String>> map, String s, String s1) {		if (map != null); else return;		//System.out.println("Modchu_Reflect initNameMapAddMapMapPut s="+s+" s1="+s1);		List<String> list = map.containsKey(s) ? map.get(s) : new ArrayList();		if (!list.contains(s1)) list.add(s1);		map.put(s, list);	}	private static LinkedList<String> initLoadNameMapFile(String s) {		int version = Modchu_Main.getMinecraftVersion();		BufferedReader bufferedReader = Modchu_FileManager.getResourceBufferedReader(s);		if (bufferedReader != null); else {			Modchu_Debug.lDebug("initLoadNameMapFile fileName="+s+" bufferedReader == null error !!");			return null;		}		//Modchu_Debug.lDebug("initLoadNameMapFile bufferedReader="+bufferedReader);		return Modchu_FileManager.bufferedReaderToLinkedList(bufferedReader);	}	public static Class getTopSuperClass(Object o) {		Class c = null;		for (c = o.getClass(); c != Object.class; c = c.getSuperclass()) {		}		return c;	}	public static Map<String, Object> getAllFieldObject(Object o) {		return getAllFieldObject(o, true, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, int i) {		return getAllFieldObject(o, true, i);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b) {		return getAllFieldObject(o, b, 0);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b, boolean debugReflectMessageDetail) {		return getAllFieldObject(o, b, 0, debugReflectMessageDetail);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b, int i) {		return getAllFieldObject(o, b, i);	}	public static Map<String, Object> getAllFieldObject(Object o, boolean b, int i, boolean debugReflectMessageDetail) {		Map map = new HashMap();		if (o != null) {			Class c = o.getClass();			while (c != null) {				Field[] f = null;				try {					f = c.getDeclaredFields();					for (Field f1 : f) {						if (f1 != null) f1.setAccessible(true);						String s = f1.getName();						Object o1 = f1.get(o);						map.put(s, o1);					}				} catch (Exception e2) {					if (debugReflectMessageDetail) printStackTrace(e2);				}				if (b) c = c.getSuperclass();				else c = null;			};		}		return map;	}	public static String getJavaDefaultClassName(Object o) {		if (o != null); else return "Object";		Class c = o.getClass();		//Modchu_Debug.Debug("Modchu_Reflect getJavaDefaultClassName 1 c="+c);		boolean isArray = c.isArray();		//if (isArray) Modchu_Debug.mDebug1("getJavaDefaultClassName isArray o="+o);		for (Entry<String, Class> en : javaDefaultClassMap.entrySet()) {			Class c1 = en.getValue();			String s = en.getKey();			if (!isArray					&& c1 == c) {				//Modchu_Debug.Debug("Modchu_Reflect getJavaDefaultClassName 2 return s="+s);				return s;			} else {				//Modchu_Debug.Debug("Modchu_Reflect getJavaDefaultClassName 2 else s="+s+" c1="+c1);			}			if (isArray) {				String s1 = getTypeName(c).toLowerCase();				s = s.toLowerCase();				//Modchu_Debug.Debug("Modchu_Reflect getJavaDefaultClassName 3 isArray s1="+s1+" s="+s);				if (s1.startsWith(s)) {					//Modchu_Debug.Debug("Modchu_Reflect getJavaDefaultClassName 3 isArray return s1="+s1);					return s1;				}			}		}		String s = "Object";		if (isArray) {			int i = getTypeLength(c);			if (i > 0) {				for (int i1 = 0; i1 < i; i1++) {					s += "[]";				}			}		}		//Modchu_Debug.Debug("Modchu_Reflect getJavaDefaultClassName end. return s="+s);		return s;	}	private static String getTypeName(Class c) {		return getTypeName(c, 0);	}	private static String getTypeName(Class c, int i) {		if (!c.isArray()) {			String s = c.getName();			if (i > 0) {				for (int i1 = 0; i1 < i; i1++) {					s += "[]";				}			}			//Modchu_Debug.mDebug("getTypeName s="+s +" i="+i);			return s;		}		i++;		return getTypeName(c.getComponentType(), i);	}	private static int getTypeLength(Class c) {		return getTypeLength(c, 0);	}	private static int getTypeLength(Class c, int i) {		if (!c.isArray()) return i;		i++;		return getTypeLength(c.getComponentType(), i);	}	public static Object getUnownReflection(String s, String s1, Class[] c, Object[] pArg) {		return getUnownReflection(s, s1, null, c, pArg, 1);	}	public static Object getUnownReflection(String s, String s1, Class[] c, Object[] pArg, int i) {		return getUnownReflection(s, s1, null, c, pArg, i);	}	public static Object getUnownReflection(String s, String s1, Class[] c, Object o, Object[] pArg) {		return getUnownReflection(s, s1, c, o, pArg, 1);	}	public static Object getUnownReflection(String s, String s1, Class[] c, Object o, Object[] pArg, int i) {		Field field = getField(s, s1, i);		if (field != null) {			//Modchu_Debug.lDebug("getUnownReflection getField ok. s="+s+" s1="+s1+" o="+o+" c="+c+" pArg="+pArg);			return getFieldObject(field, o, i);		}		Enum en = getEnum(s, s1, i);		if (en != null) return en;		Method method = getMethod(s, s1, c, i);		if (method != null) return invoke(method, o, pArg, i);		//Modchu_Debug.mDebug("getUnownReflection null ? method="+method);		if (i < -1) return null;		StringBuilder sb = new StringBuilder();		sb.append("getUnownReflection missing s=").append(s).append(" s1=").append(s1);		String debas = sb.toString();		if (unownReflectionMissingStringList != null); else unownReflectionMissingStringList = new ArrayList();		if (unownReflectionMissingStringList.contains(debas)) {			return null;		}		unownReflectionMissingStringList.add(debas);		Class c1 = loadClass(s);		List<String> classNameList = getClassName(s);		List fieldNameList = getFieldName(s1);		List methodNameList = getMethodName(s1);		sb.append(" o=").append(o).append(" c=").append(c).append(" pArg=").append(pArg)			.append("\nclass=").append(c1)			.append("\nclassNames=").append(Modchu_Main.listToString(classNameList))			.append("\nfieldName=").append(Modchu_Main.listToString(fieldNameList))			.append("\nmethodName=").append(Modchu_Main.listToString(methodNameList))			.append("\n");		String s2 = sb.toString();		if (i > -2) Modchu_Main.setRuntimeException(s2);		else Modchu_Debug.Debug(s2);		return null;	}	public static boolean setUnownReflection(String s, String s1, Class[] c, Object[] pArg) {		return setUnownReflection(s, s1, null, c, pArg, 1);	}	public static boolean setUnownReflection(String s, String s1, Class[] c, Object[] pArg, int i) {		return setUnownReflection(s, s1, null, c, pArg, i);	}	public static boolean setUnownReflection(String s, String s1, Class[] c, Object o, Object[] pArg) {		return setUnownReflection(s, s1, c, o, pArg, 1);	}	public static boolean setUnownReflection(String s, String s1, Class[] c, Object o, Object[] pArg, int i) {		Field field = getField(s, s1, i);		if (field != null) {/*			if (s1.equals("inventoryArmor")) {				Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection inventoryArmor o="+o);				Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection inventoryArmor pArg="+pArg);				Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection inventoryArmor pArg[0]="+pArg[0]);				Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection inventoryArmor set ="+(pArg != null						&& pArg.length > 0 ? pArg[0] : null));			}*/			Object o1 = pArg != null					&& pArg.length > 0 ? pArg[0] : null;			boolean b = setFieldObject(field, o, o1, i, s1.equals("inventoryArmor"));			if (b) {				Object o2 = getFieldObject(field, o, i);				if (!o2.equals(o1)) {					Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection get check error !! field="+field+" o="+o);					Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection get check error !! s="+s+" s1="+s1+" set="+o1+" get="+o2);				}// else {					//if (s1.equals("dataWatcher")) Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection get check ok. get="+o2);				//}			} else {				//if (s1.equals("inventoryArmor")) Modchu_Debug.mDebug("Modchu_Reflect setUnownReflection inventoryArmor false !! o="+o+" o1="+o1);			}			return b;			//return setFieldObject(field, o, pArg != null				//&& pArg.length > 0 ? pArg[0] : null, i);		}		Method method = getMethod(s, s1, c, i);		if (method != null) {			invoke(method, o, pArg, i);			return true;		}		String debas = "setUnownReflection missing s="+s+" s1="+s1+" o.getClass()="+(o != null ? o.getClass() : null)+" c="+debugClassArrayToString(c);		//Modchu_Debug.lDebug1(debas);		Modchu_Main.setRuntimeException(debas);		return false;	}	private static String debugClassArrayToString(Class[] c) {		if (c != null				&& c.length > 0); else return null;		StringBuilder sb = new StringBuilder();		for (int i = 0; i < c.length; i++) {			Class c1 = c[i];			if (c1 != null) sb.append(c1.getName());			if (i + 1 < c.length) sb.append(",");		}		return sb.toString();	}}