package modchu.lib;

import java.io.File;
import java.io.InputStream;
import java.nio.IntBuffer;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public interface Modchu_IASMaster {
	public float[] convertGlColor(int i);
	public Object abstractClientPlayerGetTextureCape(Object entity);
	public Object abstractClientPlayerGetTextureSkin(Object entity);
	public Object abstractClientPlayerLocationSkin(Object entity);
	public void setAbstractClientPlayerLocationSkin(Object entity, Object o);
	public void abstractClientPlayerLocationCape(Object entity, Object o);
	public String abstractClientPlayerGetSkinType(Object abstractClientPlayer);
	public void allModelInit(Object render, Object entity, boolean b);
	public double attributeModifierGetAmount(Object attributeModifier);
	public Object getBipedArmor(Object entityPlayer, Object itemStack, int i, int i2, String s);
	public Object[] blockBlockList();
	public Object blockGetBlockFromItem(Object item);
	public Object blockGetStateFromMeta(Object block, int i);
	public float blockPosGetX(Object blockPos);
	public float blockPosGetY(Object blockPos);
	public float blockPosGetZ(Object blockPos);
	public void blockSetLightOpacity(Object block, int lightOpacity);
	public int blockGetRenderType(Object block);
	public int blockGetMetaFromState(Object block, Object iBlockState);
	public int blockColorMultiplier(Object block, Object iBlockAccess, Object blockPos, int i);
	public Object blockGetDefaultState(Object block);
	public void blockModelRendererRenderModelBrightness(Object blockModelRenderer, Object iBakedModel, Object iBlockState, float f, boolean b);
	public void blockRendererDispatcherRenderBlockBrightness(Object blockRendererDispatcher, Object iBlockState, float f);
	public Object blockRendererDispatcherGetBakedModel(Object blockRendererDispatcher, Object iBlockState, Object blockPos);
	public Object blockRendererDispatcherGetBlockModelRenderer(Object blockRendererDispatcher);
	public Object blockDoublePlantVARIANT();
	public Object blockDoublePlantHALF();
	public Object axisAlignedBBGetBoundingBox(double d, double d1, double d2, double d3, double d4, double d5);
	public Object axisAlignedBBExpand(Object axisAlignedBB, double d, double d1, double d2);
	public Object axisAlignedBBCalculateIntercept(Object axisAlignedBB, Object vec3, Object vec3_2);
	public boolean axisAlignedBBIsVecInside(Object axisAlignedBB, Object vec3);
	public Object damageSourceAnvil();
	public Object damageSourceCactus();
	public Object damageSourceDrown();
	public Object damageSourceFall();
	public Object damageSourceFallingBlock();
	public Object damageSourceGeneric();
	public Object damageSourceInFire();
	public Object damageSourceInWall();
	public Object damageSourceLava();
	public Object damageSourceMagic();
	public Object damageSourceOnFire();
	public Object damageSourceOutOfWorld();
	public Object damageSourceStarve();
	public Object damageSourceWither();
	public Object damageSourceGetEntity(Object damageSource);
	public boolean damageSourceIsFireDamage(Object damageSource);
	public Object damageSourceCauseMobDamage(Object entityLivingBase);
	public Object potionMoveSpeed();
	public Object potionMoveSlowdown();
	public Object potionDigSpeed();
	public Object potionDigSlowdown();
	public Object potionDamageBoost();
	public Object potionHeal();
	public Object potionHarm();
	public Object potionJump();
	public Object potionConfusion();
	public Object potionRegeneration();
	public Object potionResistance();
	public Object potionFireResistance();
	public Object potionWaterBreathing();
	public Object potionInvisibility();
	public Object potionBlindness();
	public Object potionNightVision();
	public Object potionHunger();
	public Object potionWeakness();
	public Object potionPoison();
	public Object potionWither();
	public Object potionHealthBoost();
	public Object potionAbsorption();
	public Object potionSaturation();
	public Object entityLivingCurrentTarget();
	public Object entityLivingCurrentTarget(Object entityLivingBase);
	public Object entityAnimalInLove(Object entityLivingBase);
	public void setEntityAnimalInLove(Object entityLivingBase, int i);
	public Object entityLivingBaseGetEquipmentInSlot(Object entityLivingBase, int i);
	public Object entityArrowShootingEntity(Object entityArrow);
	public boolean entityAttackEntityFrom(Object entity, Object damageSource, float f);
	public int entityLivingBaseEntityAge(Object entity);
	public Object entityLivingBaseGetLook(Object entityLivingBase, float f);
	public void setEntityLivingBaseEntityAge(Object entity, int i);
	public Object entityBoundingBox(Object entity);
	public double entityBoundingBoxMaxX(Object entityOrBoundingBox);
	public double entityBoundingBoxMaxY(Object entityOrBoundingBox);
	public double entityBoundingBoxMaxZ(Object entityOrBoundingBox);
	public double entityBoundingBoxMinX(Object entity);
	public double entityBoundingBoxMinY(Object entity);
	public double entityBoundingBoxMinZ(Object entity);
	public String entityCloakUrl(Object entity);
	public int entityDimension(Object entity);
	public void setEntityDimension(Object entity, int i);
	public float entityDistanceWalkedModified(Object entity);
	public int entityEntityID(Object entity);
	public float entityGetBrightness(Object entity, float f);
	public int entityGetBrightnessForRender(Object entity, float f);
	public Object entityGetDataWatcher(Object dataWatcherOrEntity);
	public void entitySetCustomNameTag(Object entity, String s);
	public Object dataWatcherGetWatchedObject(Object dataWatcherOrEntity, int i);
	public void dataWatcherAddObject(Object dataWatcherOrEntity, int i, Object o);
	public Object dataWatcherGetWatchableObjectItemStack(Object dataWatcherOrEntity, int i);
	public String dataWatcherGetWatchableObjectString(Object dataWatcherOrEntity, int i);
	public byte dataWatcherGetWatchableObjectByte(Object dataWatcherOrEntity, int i);
	public void dataWatcherUpdateObject(Object dataWatcherOrEntity, int i, Object o);
	public void entityAITasksAddTask(Object entityAITasks, int i, Object entityAIBase);
	public float entityGetEyeHeight(Object entityplayer);
	public float entityHeight(Object entity);
	public boolean entityIsInvisible(Object entity);
	public boolean entityIsInWater(Object entity);
	public boolean entityIsRiding(Object entity);
	public boolean entityIsSneaking(Object entity);
	public boolean entityIsWet(Object entity);
	public void entityOnUpdate(Object entity);
	public void entityMountEntity(Object entity);
	public void entityMountEntity(Object entity, Object entity2);
	public Object entityLivingTasks(Object entityLiving);
	public void entityLivingBaseSetPositionAndUpdate(Object entity, double x, double y, double z);
	public Map entityListStringToClassMapping();
	public Map entityListClassToStringMapping();
	public Map entityListIDtoClassMapping();
	public Map entityListClassToIDMapping();
	public void entitySetLocationAndAngles(Object entity, double x, double y, double z, float f, float f1);
	public void entitySetPositionAndRotation(Object entity, double x, double y, double z, float f, float f1);
	public int entityAnimalBreeding(Object entityAnimal);
	public void setEntityAnimalBreeding(Object entityAnimal, int i);
	public boolean entityCreatureHasAttacked(Object entity);
	public void setEntityCreatureHasAttacked(Object entity, boolean b);
	public float entityGetDistanceToEntity(Object entity, Object entity2);
	public boolean entityIsEntityAlive(Object entity);
	public Object entityCreatureEntityToAttack(Object entity);
	public int entityLivingNumTicksToChaseTarget(Object entityLiving);
	public void setEntityLivingNumTicksToChaseTarget(Object entityLiving, int i);
	public Object entityCreatureGetEntityToAttack(Object entity);
	public void setEntityCreatureEntityToAttack(Object entity, Object entity2);
	public void entityClientPlayerMPFunc_142020_c(Object entityClientPlayerMP, String s);
	public String entityClientPlayerMPFunc_142021_k(Object entityClientPlayerMP);
	public void entityCreatureSetPathToEntity(Object entityCreature, Object entityPath);
	public float entityLivingBaseGetSoundVolume(Object entityLivingBase);
	public float entityLivingBaseGetSoundPitch(Object entityLivingBase);
	public float entityLastDamage(Object entityLivingBase);
	public int entityLivingBaseRecentlyHit(Object entityLivingBase);
	public void setEntityLivingBaseRecentlyHit(Object entityLivingBase, int i);
	public int entityLivingBaseAttackingPlayer(Object entityLivingBase);
	public void setEntityLivingBaseAttackingPlayer(Object entityLivingBase, Object entityLivingBase2);
	public int entityLivingBaseDeathTime(Object entityLivingBase);
	public int entityLivingBaseMaxHurtResistantTime(Object entityLivingBase);
	public void setEntityLivingBaseMaxHurtResistantTime(Object entityLivingBase, int i);
	public int entityHurtResistantTime(Object entity);
	public void setEntityHurtResistantTime(Object entity, int i);
	public UUID entityGetUniqueID(Object entity);
	public Object entityLivingBaseGetHeldItem(Object entityLivingBase);
	public float entityLivingBaseGetHealth(Object entity);
	public float entityLivingBaseGetMaxHealth(Object entity);
	public void entityLivingBaseDamageEntity(Object entity, Object damageSource, float f);
	public void entityLivingBaseHeal(Object entityLivingBase, float f);
	public void entityLivingBaseSetRevengeTarget(Object entity, Object entity2);
	public float entityLivingBaseGetSwingProgress(Object entity, float f);
	public float entityLivingBaseHealth(Object entity);
	public boolean entityLivingBaseIsJumping(Object entity);
	public float entityLivingBaseLimbSwing(Object entity);
	public void setEntityLivingBaseLimbSwing(Object entity, float f);
	public float entityLivingBaseLimbSwingAmount(Object entity);
	public void setEntityLivingBaseLimbSwingAmount(Object entity, float f);
	public float entityLivingBaseMoveForward(Object entityplayer);
	public void setEntityLivingBaseMoveForward(Object entityplayer, float f);
	public float entityLivingBaseMoveStrafing(Object entityplayer);
	public void setEntityLivingBaseMoveStrafing(Object entityplayer, float f);
	public float entityLivingBasePrevLimbSwingAmount(Object entity);
	public void setEntityLivingBasePrevLimbSwingAmount(Object entity, float f);
	public float entityLivingBasePrevRenderYawOffset(Object entity);
	public void setEntityLivingBasePrevRenderYawOffset(Object entity, float f);
	public float entityLivingBasePrevRotationYawHead(Object entity);
	public void setEntityLivingBasePrevRotationYawHead(Object entity, float f);
	public float entityLivingBaseRenderYawOffset(Object entity);
	public void setEntityLivingBaseRenderYawOffset(Object entity, float f);
	public float entityLivingBaseRotationYawHead(Object entity);
	public void setEntityLivingBaseRotationYawHead(Object entity, float f);
	public void entityLivingBaseSetHealth(Object entity, float f);
	public int entityLivingGetHealth(Object entity);
	public int entityLivingGetMaxHealth(Object entity);
	public Object entityTameableAiSit(Object entityTameable);
	public String entityTameableGetOwnerName(Object entityTameable);
	public void entityTameableSetOwner(Object entityTameable);
	public void entityTameableSetOwner(Object entityTameable, String s);
	public void entityLivingSetHealth(Object entity, int i);
	public double entityMotionX(Object entity);
	public double entityMotionY(Object entity);
	public double entityMotionZ(Object entity);
	public Object[] entityPlayerArmorInventory(Object entityplayerORInventory);
	public float entityPlayerCameraYaw(Object entity);
	public float entityPlayerCurrentXP(Object entityplayer);
	public double entityPlayerField_71085_bR(Object entityplayer);
	public double entityPlayerField_71091_bM(Object entityplayer);
	public double entityPlayerField_71094_bP(Object entityplayer);
	public double entityPlayerField_71095_bQ(Object entityplayer);
	public double entityPlayerField_71096_bN(Object entityplayer);
	public double entityPlayerField_71097_bO(Object entityplayer);
	public Object entityPlayerFoodStats(Object entityplayer);
	public Object entityplayerGetCurrentEquippedItem(Object entityplayer);
	public Object entityPlayerGetFoodStats(Object entityplayer);
	public boolean entityPlayerGetHideCape(Object entityplayer);
	public int entityPlayerGetItemInUseCount(Object entityplayer);
	public Object entityPlayerInventory(Object entityplayer);
	public Object entityPlayerInventoryGetCurrentItem(Object entityplayer);
	public int entityPlayerInventoryCurrentItem(Object entityplayer);
	public Object entityPlayerInventoryGetStackInSlot(Object entityplayer, int i);
	public Object entityPlayerInventoryPlayerArmorItemInSlot(Object entityplayerORInventory, int i);
	public void entityPlayerInventorySetInventorySlotContents(Object entityplayer, int i, Object itemstack);
	public boolean entityPlayerIsPlayerSleeping(Object entityplayer);
	public boolean entityPlayerCapabilitiesIsCreativeMode(Object entityplayer);
	public Object[] entityPlayerMainInventory(Object entityplayerORInventory);
	public void entityPlayerPreparePlayerToSpawn(Object entityplayer);
	public Object entityClientPlayerMPSendQueue(Object entityClientPlayerMP);
	public void entityLivingBaseSwingItem(Object entityLivingBase);
	public int entityPlayerPlayerLevel(Object entityplayer);
	public float entityPlayerPrevCameraYaw(Object entity);
	public int entityPlayerScore(Object entityplayer);
	public void entityPlayerSPFunc_6420_o(Object entityplayer);
	public int entityPlayerTotalXP(Object entityplayer);
	public void entityPlayerSetItemInUse(Object entityplayer, Object itemstack, int i);
	public void entityPlayerDestroyCurrentEquippedItem(Object entityplayer);
	public boolean entityPlayerCanPlayerEdit(Object entityplayer, int x, int y, int z, int i, Object itemStack);
	public Object entityPlayerMPPlayerNetServerHandler(Object entityplayerMP);
	public void setEntityPlayerMPPlayerNetServerHandler(Object entityplayerMP, Object netServerHandler);
	public Object entityPlayerFishEntity(Object entityplayer);
	public void setEntityPlayerFishEntity(Object entityplayer, Object entityFishHook);
	public boolean entityZombieIsVillager(Object entityZombie);
	public void entityZombieSetVillager(Object entityZombie, boolean b);
	public double entityPosX(Object entity);
	public double entityPosY(Object entity);
	public double entityPosZ(Object entity);
	public float entityPrevDistanceWalkedModified(Object entity);
	public double entityPrevPosX(Object entity);
	public double entityPrevPosY(Object entity);
	public double entityPrevPosZ(Object entity);
	public float entityPrevRotationPitch(Object entity);
	public void setEntityPrevRotationPitch(Object entity, float f);
	public float entityPrevRotationYaw(Object entity);
	public void setEntityPrevRotationYaw(Object entity, float f);
	public Object entityRidingEntity(Object entity);
	public Object entityGetBoundingBox(Object entity);
	public boolean entityCanBeCollidedWith(Object entity);
	public float entityGetCollisionBorderSize(Object entity);
	public void setEntityRidingEntity(Object entity, Object entity2);
	public Object entityRiddenByEntity(Object entity);
	public void setEntityRiddenByEntity(Object entity, Object entity2);
	public boolean entityIsDead(Object entity);
	public boolean entityTameableIsTamed(Object entityTameable);
	public boolean entityHorseIsTame(Object entityHorse);
	public boolean isTamed(Object entity);
	public void setEntityIsDead(Object entity, boolean b);
	public float entityRotationPitch(Object entity);
	public void setEntityRotationPitch(Object entity, float f);
	public float entityRotationYaw(Object entity);
	public void setEntityRotationYaw(Object entity, float f);
	public void entitySetDead(Object entity);
	public void entitySetFire(Object entity, int i);
	public void entitySetPosition(Object entity, double x, double y, double z);
	public void entitySetSize(Object entity, float f1, float f2);
	public void entityPlaySound(Object entity, String s, float f1, float f2);
	public int entityTicksExisted(Object entity);
	public void setEntityTicksExisted(Object entity, int i);
	public Object entityLivingGetNavigator(Object entityLivingOrPathNavigate);
	public void entityLivingNavigatorClearPathEntity(Object entityLivingOrPathNavigate);
	public Object entityLivingGetCurrentArmor(Object entityLiving, int i);
	public boolean entityLivingBaseIsPotionActive(Object entityLivingBase, Object potionOrPotionId);
	public boolean entityOnGround(Object entity);
	public void entityLivingBaseSetBeenAttacked(Object entityLivingBase);
	public void entityLivingBaseOnDeath(Object entityLivingBase, Object damageSource);
	public int entityAgeableGetGrowingAge(Object entityLivingBase);
	public int entityLivingBaseHurtTime(Object entityLivingBase);
	public void setEntityLivingBaseHurtTime(Object entityLivingBase, int i);
	public int entityLivingBaseMaxHurtTime(Object entityLivingBase);
	public void setEntityLivingBaseMaxHurtTime(Object entityLivingBase, int i);
	public float entityLivingBaseAttackedAtYaw(Object entityLivingBase);
	public void setEntityLivingBaseAttackedAtYaw(Object entityLivingBase, float f);
	public float entityLivingBasePrevHealth(Object entityLivingBase);
	public void setEntityLivingBasePrevHealth(Object entityLivingBase, float f);
	public boolean entityLivingBaseIsChild(Object entityLivingBase);
	public void entityLivingBaseKnockBack(Object entityLivingBase, Object entityLivingBase2, float f, double d, double d1);
	public Object entityLivingBaseGetAITarget(Object entityLivingBase);
	public void entityBatSetIsBatHanging(Object entityBat, boolean b);
	public void entitySetEating(Object entity, boolean b);
	public float entityWidth(Object entity);
	public Object entityWorldObj(Object worldOrEntity);
	public float entityYOffset(Object entity);
	public Enum enumActionBlock();
	public Enum enumActionBow();
	public Enum enumActionDrink();
	public Enum enumActionEat();
	public Enum enumActionNone();
	public Enum enumCreatureAttributeARTHROPOD();
	public Enum enumCreatureAttributeUNDEAD();
	public Enum enumCreatureAttributeUNDEFINED();
	public Enum enumCreatureTypeMonster();
	public Enum enumCreatureTypeCreature();
	public Enum enumCreatureTypeAmbient();
	public Enum enumCreatureTypeWaterCreature();
	public Enum enumFacingUP();
	public Enum enumFacingDOWN();
	public Enum enumFacingEAST();
	public Enum enumFacingNORTH();
	public Enum enumFacingSOUTH();
	public Enum enumFacingWEST();
	public boolean gameSettingsAnaglyph(Object gameSettings);
	public Object biomeGenBaseOcean();
	public Object biomeGenBasePlains();
	public Object biomeGenBaseDesert();
	public Object biomeGenBaseExtremeHills();
	public Object biomeGenBaseForest();
	public Object biomeGenBaseTaiga();
	public Object biomeGenBaseSwampland();
	public Object biomeGenBaseRiver();
	public Object biomeGenBaseHell();
	public Object biomeGenBaseSky();
	public Object biomeGenBaseFrozenOcean();
	public Object biomeGenBaseFrozenRiver();
	public Object biomeGenBaseIcePlains();
	public Object biomeGenBaseIceMountains();
	public Object biomeGenBaseMushroomIsland();
	public Object biomeGenBaseMushroomIslandShore();
	public Object biomeGenBaseBeach();
	public Object biomeGenBaseDesertHills();
	public Object biomeGenBaseForestHills();
	public Object biomeGenBaseTaigaHills();
	public Object biomeGenBaseExtremeHillsEdge();
	public Object biomeGenBaseJungle();
	public Object biomeGenBaseJungleHills();
	public Object biomeGenBaseJungleEdge();
	public Object biomeGenBaseDeepOcean();
	public Object biomeGenBaseStoneBeach();
	public Object biomeGenBaseStoneColdBeach();
	public Object biomeGenBaseBirchForest();
	public Object biomeGenBaseBirchForestHills();
	public Object biomeGenBaseRoofedForest();
	public Object biomeGenBaseColdTaiga();
	public Object biomeGenBaseColdTaigaHills();
	public Object biomeGenBaseMegaTaiga();
	public Object biomeGenBaseMegaTaigaHills();
	public Object biomeGenBaseExtremeHillsPlus();
	public Object biomeGenBaseSavanna();
	public Object biomeGenBaseSavannaPlateau();
	public Object biomeGenBaseMesa();
	public Object biomeGenBaseMesaPlateau_F();
	public Object biomeGenBaseMesaPlateau();
	public Object creativeTabsTabBlock();
	public Object creativeTabsTabDecorations();
	public Object creativeTabsTabRedstone();
	public Object creativeTabsTabTransport();
	public Object creativeTabsTabMisc();
	public Object creativeTabsTabAllSearch();
	public Object creativeTabsTabFood();
	public Object creativeTabsTabTools();
	public Object creativeTabsTabCombat();
	public Object creativeTabsTabBrewing();
	public Object creativeTabsTabMaterials();
	public Object creativeTabsTabInventory();
	public Object containerInventorySlots(Object container);
	public Object containerInventoryItemStacks(Object container);
	public Object containerGetSlot(Object container, int i);
	public Object FMLCommonHandlerInstance();
	public Object FMLCommonHandlerInstanceGetMinecraftServerInstance();
	public Object[] FMLCommonHandlerInstanceGetMinecraftServerInstanceWorldServers();
	public void fontRendererDrawString(Object fontRenderer, String s, int i, int j, int k);
	public int[] facingOffsetsXForSide();
	public int[] facingOffsetsYForSide();
	public int[] facingOffsetsZForSide();
	public String gameSettingsGetKeyDisplayString(int i);
	public Object gameSettingsKeyBindBack();
	public Object gameSettingsKeyBindForward();
	public Object gameSettingsKeyBindLeft();
	public Object gameSettingsKeyBindRight();
	public Object getBlock(Object itemStackOrItemOrBlock);
	public Object getBlockItemStack(Object itemstack);
	public Object getItem(String s);
	public Object getBlock(String s);
	public Object getResource(Class c, String s);
	public Object getResource(String s);
	public String getUserName(Object entityplayer);
	public int getVacancyGlobalEntityID();
	public IntBuffer gLAllocationCreateDirectIntBuffer(int i);
	public int gLAllocationGenerateDisplayLists(int i);
	public boolean guiButtonEnabled(Object guiButton);
	public int guiButtonHeight(Object guiButton);
	public int guiButtonID(Object guiButton);
	public boolean guiButtonVisible(Object guiButton);
	public int guiButtonWidth(Object guiButton);
	public int guiButtonXPosition(Object guiButton);
	public int guiButtonYPosition(Object guiButton);
	public void guiDrawCenteredString(Object gui, Object fontRenderer, String s, int i, int i2, int i3);
	public void guiIngameDrawString(String s, int i, int j, int k);
	public Object guiOptionsBackground();
	public void guiScreenActionPerformed(Object guiScreen, Object guiButton);
	public List guiScreenButtonList(Object guiScreen);
	public void guiScreenDrawScreen(Object guiScreen, int i, int i2, float f);
	public Object guiScreenFontRenderer(Object guiScreen);
	public int guiScreenHeight(Object guiScreen);
	public int guiScreenWidth(Object guiScreen);
	public void guiSlotActionPerformed(Object guiSlot, Object guiButton);
	public void guiSlotDrawScreen(Object guiSlot, int i, int i2, float f);
	public void guiSlotRegisterScrollButtons(Object guiSlot, List list, int i, int i2);
	public void guiScreenFunc_175273_b(Object guiScreen, int i, int i1);
	public void guiScreenFunc_175273_b(Object guiScreen, Object minecraft, int i, int i2);
	public Object iBlockStateGetBlock(Object iBlockState);
	public Object inventoryPlayerArmorItemInSlot(Object inventory, int i);
	public Object inventoryPlayerGetStackInSlot(Object inventory, int i);
	public boolean isCamouflage(Object itemStackOrItemOrBlock);
	public boolean isCamouflageCheck(Object block);
	public boolean isPumpkin(Object itemStackOrItemOrBlock);
	public boolean isCtrlKeyDown();
	public boolean isIntegratedServerRunning();
	public boolean isLANWorld();
	public Object getIntegratedServer();
	public boolean isMac();
	public boolean isMuiti();
	public boolean isPlanter(Object itemStackOrItemOrBlock);
	public boolean isPlanterCheck(Object itemStackOrBlock);
	public boolean isShiftKeyDown();
	public boolean isSkull(Object itemStackOrItem);
	public int itemArmorRenderIndex(Object itemArmor);
	public int itemArmorGetColor(Object itemArmor, Object itemstack);
	public Object itemArmorGetArmorMaterial(Object itemArmor);
	public String itemArmorArmorMaterialGetName(Object armorMaterial);
	public Object itemSetPotionEffect(Object item, String s);
	public int itemItemID(Object item);
	public Object itemItemRegistry();
	public int itemGetMetadata(Object item, int i);
	public String potionHelperSugarEffect();
	public String potionHelperGhastTearEffect();
	public String potionHelperSpiderEyeEffect();
	public String potionHelperFermentedSpiderEyeEffect();
	public String potionHelperSpeckledMelonEffect();
	public String potionHelperBlazePowderEffect();
	public String potionHelperMagmaCreamEffect();
	public String potionHelperRedstoneEffect();
	public String potionHelperGlowstoneEffect();
	public String potionHelperGunpowderEffect();
	public String potionHelperGoldenCarrotEffect();
	public Map registrySimpleRegistryObjects();
	public Map registrySimpleRegistryObjects(Object registrySimple);
	public Object iBlockStateWithProperty(Object blockOrIBlockState, Object iProperty, Comparable comparable);
	public boolean itemIsFull3D(Object item);
	public boolean itemItemInteractionForEntity(Object item, Object itemstack, Object entityplayer, Object entityLivingBase);
	public void itemModelMesherRegister(Object itemModelMesher, Object item, int i, Object modelResourceLocation);
	public List itemPotionGetEffects(Object itemPotion, Object itemStack);
	public Object[] itemItemsList();
	public Object itemSetTextureName(Object item, String s);
	public Object itemSetUnlocalizedName(Object item, String s);
	public Object itemSetCreativeTab(Object item, Object creativeTabs);
	public String itemIconString(Object item);
	public void setItemIconString(Object item, String s);
	public Object itemItemIcon(Object item);
	public void setItemItemIcon(Object item, Object icon);
	public void itemOnItemRightClick(Object item, Object itemStack, Object world, Object entityplayer);
	public Object iIconRegisterRegisterIcon(Object iIconRegister, String s);
	public Object itemStackCopyItemStack(Object itemStack);
	public Object itemStackGetItem(Object itemstack);
	public int itemStackGetItemDamage(Object itemstack);
	public int itemStackGetMaxDamage(Object itemstack);
	public Object itemStackGetItemUseAction(Object itemstack);
	public boolean itemStackIsItemEnchanted(Object itemstack);
	public boolean itemStackHasDisplayName(Object itemstack);
	public boolean itemShouldRotateAroundWhenRendering(Object item);
	public boolean itemStackHasTagCompound(Object itemStack);
	public Object itemStackGetTagCompound(Object nBTTagCompoundOrItemStack);
	public Object itemStackGetAttributeModifiers(Object itemStack);
	public int itemStackGetMetadata(Object itemStack);
	public Enum itemCameraTransformsTransformTypeNONE();
	public Enum itemCameraTransformsTransformTypeTHIRD_PERSON();
	public Enum itemCameraTransformsTransformTypeFIRST_PERSON();
	public Enum itemCameraTransformsTransformTypeHEAD();
	public Enum itemCameraTransformsTransformTypeGUI();
	public boolean nbtTagCompoundHasKey(Object nBTTagCompoundOrItemStack, String s);
	public boolean nbtTagCompoundHasKey(Object nBTTagCompoundOrItemStack, String s, int i);
	public String nbtTagCompoundGetString(Object nBTTagCompoundOrItemStack, String s);
	public void nbtTagCompoundSetTag(Object nBTTagCompound, String s, Object nbtBase);
	public Object nbtTagCompoundGetCompoundTag(Object nBTTagCompoundOrItemStack, String s);
	public Object nbtUtilReadGameProfileFromNBT(Object nBTTagCompound);
	public Object nBTUtilWriteGameProfile(Object nBTTagCompound, Object gameprofile);
	public Object tileEntitySkullRendererSkullRenderer();
	public Object tileEntitySkullUpdateGameprofile(Object gameprofile);
	public void tileEntitySkullRendererRenderSkull(float f, float f1, float f2, int i, float f3, int i2, Object gameProfile);
	public void tileEntitySkullRendererRenderSkull(float f, float f1, float f2, Enum en, float f3, int i, Object gameProfile, int i2);
	public void tileEntitySkullRendererRenderSkull(Object skullRenderer, float f, float f1, float f2, Enum en, float f3, int i, Object gameProfile, int i2);
	public int itemStackItemID(Object itemstack);
	public int itemStackStackSize(Object itemstack);
	public void setItemStackStackSize(Object itemstack, int i);
	public String itemStackGetDisplayName(Object itemstack);
	public void itemStackDamageItem(Object itemstack, int i, Object entityLivingBase);
	public boolean itemRequiresMultipleRenderPasses(Object item);
	public int itemGetColorFromItemStack(Object item, Object itemstack, int i);
	public int blockDoublePlantGetMixedBrightnessForBlock(Object blockDoublePlant, int x, int y, int z);
	public int blockDoublePlantGetMixedBrightnessForBlock(Object blockDoublePlant, Object iBlockAccess, int x, int y, int z);
	public int blockDoublePlantColorMultiplier(Object blockDoublePlant, int x, int y, int z);
	public int blockDoublePlantColorMultiplier(Object blockDoublePlant, Object world, int x, int y, int z);
	public int biomeGenBaseGetBiomeGrassColor(Object biomeGenBase);
	public int biomeGenBaseGetBiomeGrassColor(Object biomeGenBase, int x, int y, int z);
	public boolean blockDoublePlantFunc_149887_c(int i);
	public int blockDoublePlantFunc_149890_d(int i);
	public Object blockDoublePlantFunc_149888_a(Object blockDoublePlant, boolean b, int i);
	public Object[] blockDoublePlantSunflowerIcons(Object blockDoublePlant);
	public double iIconGetMinU(Object iIcon);
	public double iIconGetMinV(Object iIcon);
	public double iIconGetMaxU(Object iIcon);
	public double iIconGetMaxV(Object iIcon);
	public String iAttributeGetAttributeUnlocalizedName(Object iAttribute);
	public boolean keyBindingGetIsKeyPressed(Object keyBinding);
	public List keybindArray();
	public boolean entityRendererAnaglyphEnable();
	public boolean keyBindingIsPressed(Object keyBinding);
	public String keyBindingKeyCategory(Object keyBinding);
	public int keyBindingKeyCode(Object keyBinding);
	public String keyBindingKeyDescription(Object keyBinding);
	public boolean keyBindingPressed(Object keyBinding);
	public int keyBindingPressTime(Object keyBinding);
	public boolean keyBindingSetPressed(Object keyBinding, boolean b);
	public void loadingScreenDisplayLoadingString(String s);
	public void loadingScreenDisplayLoadingString(Object loadingScreenRenderer, String s);
	public void loadingScreenResetProgressAndMessage(String s);
	public void loadingScreenResetProgressAndMessage(Object loadingScreenRenderer, String s);
	public void loadingScreenSetLoadingProgress(int i);
	public void loadingScreenSetLoadingProgress(Object loadingScreenRenderer, int i);
	public float mathHelperCos(float f);
	public int mathHelperFloor_double(double d);
	public float mathHelperFloor_float(float f);
	public float mathHelperWrapAngleTo180_float(float f);
	public long mathHelperFloor_double_long(double d);
	public float mathHelperAbs(float f);
	public double mathHelperAbs_max(double d, double d1);
	public int mathHelperBucketInt(int i, int j);
	public boolean mathHelperStringNullOrLengthZero(String s);
	public float mathHelperSin(float f);
	public float mathHelperSqrt_float(float f);
	public double mathHelperSqrt_double(double d);
	public Object minecraftCurrentScreen();
	public Object minecraftMyNetworkManager();
	public void setMinecraftMyNetworkManager(Object iNetworkManager);
	public int minecraftDisplayHeight();
	public int minecraftDisplayWidth();
	public Object minecraftEntityRenderer();
	public Object minecraftEntityRendererItemRenderer();
	public Object minecraftFontRenderer();
	public void minecraftFontRenderer(Object fontRenderer);
	public Object minecraftGameSettings();
	public void minecraftGameSettingsSetThirdPersonView(int i);
	public int minecraftGameSettingsThirdPersonView();
	public boolean minecraftGameSettingsTouchscreen(Object gameSettings);
	public Object minecraftGatSession();
	public Object minecraftGetMinecraft();
	public Object minecraftGetRenderItem();
	public Object minecraftGetResourceManager();
	public long minecraftGetSystemTime();
	public Object minecraftGetTextureManager();
	public boolean minecraftInGameHasFocus();
	public File minecraftMcDataDir();
	public Object minecraftGetBlockRendererDispatcher();
	public Object minecraftLoadingScreen();
	public void setMinecraftLoadingScreen(Object loadingScreenRenderer);
	public Object minecraftPlayerController();
	public Object minecraftSession();
	public void minecraftSetDimensionAndSpawnPlayer();
	public void minecraftSetDimensionAndSpawnPlayer(int i);
	public long minecraftSystemTime();
	public Object minecraftTextureManager();
	public Object minecraftThePlayer();
	public Object minecraftTheWorld();
	public Object minecraftDisplayGuiScreen();
	public Object minecraftGetIntegratedServer();
	public Object minecraftServerGetServer();
	public Object[] minecraftServerGetServerWorldServers();
	public File minecraftServerGetFile(String s);
	public Object minecraftServerGetConfigurationManager(Object minecraftServer);
	public String minecraftLaunchedVersion();
	public String minecraftLaunchedVersion(Object minecraft);
	public void minecraftUpdateFramebufferSize();
	public void minecraftUpdateFramebufferSize(Object minecraft);
	public Object modelRightArm(Object model);
	public Object modelBipedBipedRightArm(Object modelBiped);
	public void setModelBipedBipedRightArm(Object modelBiped, Object modelRenderer);
	public Object modelWolfWolfLeg1(Object modelWolf);
	public void setModelWolfWolfLeg1(Object modelWolf, Object modelRenderer);
	public Object modelSnowManRightHand(Object modelSnowMan);
	public void setModelSnowManRightHand(Object modelSnowMan, Object modelRenderer);
	public Object modelSpiderSpiderLeg1(Object modelSpider);
	public void setModelSpiderSpiderLeg1(Object modelSpider, Object modelRenderer);
	public Object modelOcelotOcelotFrontRightLeg(Object modelOcelot);
	public void setModelOcelotOcelotFrontRightLeg(Object modelOcelot, Object modelRenderer);
	public Object modelIronGolemIronGolemRightArm(Object modelIronGolem);
	public void setModelIronGolemIronGolemRightArm(Object modelIronGolem, Object modelRenderer);
	public Object modelQuadrupedLeg1(Object modelQuadruped);
	public void setModelQuadrupedLeg1(Object modelQuadruped, Object modelRenderer);
	public Object modelCreeperLeg1(Object modelCreeper);
	public void setModelCreeperLeg1(Object modelCreeper, Object modelRenderer);
	public Object modelHorseFrontRightLeg(Object modelHorse);
	public void setModelHorseFrontRightLeg(Object modelHorse, Object modelRenderer);
	public Object modelBatBatRightWing(Object modelBat);
	public void setModelBatBatRightWing(Object modelBat, Object modelRenderer);
	public Object[] modelSquidSquidTentacles(Object modelSquid);
	public void setModelSquidSquidTentacles(Object modelSquid, Object[] modelRenderer);
	public Object[] modelBlazeBlazeSticks(Object modelBlaze);
	public void setModelBlazeBlazeSticks(Object modelBlaze, Object[] modelRenderer);
	public Object[] modelGhastTentacles(Object modelGhast);
	public void setModelGhastTentacles(Object modelBlaze, Object[] modelRenderer);
	public Object modelChickenRightWing(Object modelChicken);
	public void setModelChickenRightWing(Object modelChicken, Object modelRenderer);
	public boolean modelBaseIsChild(Object modelBase);
	public void setModelBaseIsChild(Object modelBase, boolean b);
	public List modelBaseBoxList(Object modelBase);
	public void setModelBaseBoxList(Object modelBase, List list);
	public int modelBaseTextureWidth(Object modelBase);
	public void setModelBaseTextureWidth(Object modelBase, int i);
	public int modelBaseTextureHeight(Object modelBase);
	public void setModelBaseTextureHeight(Object modelBase, int i);
	public Object modelBaseRender(Object model, Object entity, float f, float f2, float f3, float f4, float f5, float f6);
	public void modelBaseSetLivingAnimations(Object model, Object entity, float f, float f1, float f2);
	public void modelBaseSetRotationAngles(Object model, float f, float f1, float f2, float f3, float f4, float f5, Object entity);
	public ConcurrentHashMap modelRendererGetTextureOffsetMap(Object modelRenderer);
	public int movingObjectPositionBlockPosGetX(Object movingObjectPosition);
	public int movingObjectPositionBlockPosGetY(Object movingObjectPosition);
	public int movingObjectPositionBlockPosGetZ(Object movingObjectPosition);
	public int movingObjectPositionSideHit(Object movingObjectPosition);
	public Enum movingObjectPositionTypeOfHit(Object movingObjectPosition);
	public Enum movingObjectPositionMovingObjectTypeMISS(Object movingObjectPosition);
	public Enum movingObjectPositionMovingObjectTypeBLOCK(Object movingObjectPosition);
	public Enum movingObjectPositionMovingObjectTypeENTITY(Object movingObjectPosition);
	public Object movingObjectPositionHitVec(Object movingObjectPosition);
	public Object newInstanceKeyBinding(String s, int i, String s2);
	public Object newModelRenderer(Object[] pArg);
	public Object modelRendererAddBox(Object[] pArg);
	public void modelRendererSetRotationPoint(Object modelRenderer, float f, float f1, float f2);
	public boolean modelRendererShowModel(Object modelRenderer);
	public void setModelRendererShowModel(Object modelRenderer, boolean b);
	public float modelRendererRotateAngleX(Object modelRenderer);
	public void setModelRendererRotateAngleX(Object modelRenderer, float f);
	public float modelRendererRotateAngleY(Object modelRenderer);
	public void setModelRendererRotateAngleY(Object modelRenderer, float f);
	public float modelRendererRotateAngleZ(Object modelRenderer);
	public void setModelRendererRotateAngleZ(Object modelRenderer, float f);
	public float modelRendererRotationPointX(Object modelRenderer);
	public void setModelRendererRotationPointX(Object modelRenderer, float f);
	public float modelRendererRotationPointY(Object modelRenderer);
	public void setModelRendererRotationPointY(Object modelRenderer, float f);
	public float modelRendererRotationPointZ(Object modelRenderer);
	public void setModelRendererRotationPointZ(Object modelRenderer, float f);
	public void modelRendererRender(Object modelRenderer, float f);
	public void modelRendererPostRender(Object modelRenderer, float f);
	public void modelRendererRenderWithRotation(Object modelRenderer, float f);
	public Object[] modelBoxVertexPositions(Object modelBox);
	public void setModelBoxVertexPositions(Object modelBox, Object vertexPositions);
	public Object[] modelBoxQuadList(Object modelBox);
	public void setModelBoxQuadList(Object modelBox, Object quadList);
	public boolean nbttagcompoundGetBoolean(Object nbttagcompound, String s);
	public void nbttagcompoundSetBoolean(Object nbttagcompound, String s, boolean b);
	public String nbttagcompoundGetString(Object nbttagcompound, String s);
	public void nbttagcompoundSetString(Object nbttagcompound, String s, String s1);
	public int nbttagcompoundGetInteger(Object nbttagcompound, String s);
	public void nbttagcompoundSetInteger(Object nbttagcompound, String s, int i);
	public float nbttagcompoundGetFloat(Object nbttagcompound, String s);
	public void nbttagcompoundSetFloat(Object nbttagcompound, String s, float f);
	public double nbttagcompoundGetDouble(Object nbttagcompound, String s);
	public void nbttagcompoundSetDouble(Object nbttagcompound, String s, double d);
	public short nbttagcompoundGetShort(Object nbttagcompound, String s);
	public void nbttagcompoundSetShort(Object nbttagcompound, String s, short sh);
	public long nbttagcompoundGetLong(Object nbttagcompound, String s);
	public void nbttagcompoundSetLong(Object nbttagcompound, String s, long l);
	public byte nbttagcompoundGetByte(Object nbttagcompound, String s);
	public void nbttagcompoundSetByte(Object nbttagcompound, String s, byte by);
	public byte[] nbttagcompoundGetByteArray(Object nbttagcompound, String s);
	public void nbttagcompoundSetByteArray(Object nbttagcompound, String s, byte[] by);
	public int[] nbttagcompoundGetIntArray(Object nbttagcompound, String s);
	public void nbttagcompoundSetIntArray(Object nbttagcompound, String s, int[] in);
	public Object netClientHandlerGetNetManager(Object netClientHandler);
	public void netClientHandlerHandleClientCommand(Object netClientHandler, Object packet205ClientCommand);
	public Object oldVersionItem(String s);
	public Object oldVersionBlock(String s);
	public int openGlHelperDefaultTexUnit();
	public int openGlHelperLightmapTexUnit();
	public void openGlHelperGlBlendFunc(int i, int i1, int i2, int i3);
	public void openGlHelperSetActiveTexture(int i);
	public Object pathNavigateTryMoveToXYZ(Object pathNavigate, int x, int y, int z, float f);
	public void pathNavigateGroundFunc_179690_a(Object pathNavigateGround, boolean b);
	public void playerControllerMPSetPlayerCapabilities();
	public void playerControllerMPSetPlayerCapabilities(Object playerController, Object entityplayer);
	public void playerControllerFunc_6473_b();
	public void playerControllerFunc_6473_b(Object playerController, Object entityplayer);
	public Object playerControllerMPCreatePlayer();
	public Object playerControllerMPCreatePlayer(Object playerController);
	public void playerControllerMPFlipPlayer();
	public void playerControllerMPFlipPlayer(Object playerController, Object entityplayer);
	public void playerControllerSetGameType(Object enumGameType);
	public Object positionTextureVertexSetTexturePosition(Object positionTextureVertex, float f, float f1);
	public float positionTextureVertexTexturePositionX(Object positionTextureVertex);
	public float positionTextureVertexTexturePositionY(Object positionTextureVertex);
	public Object positionTextureVertexVector3D(Object positionTextureVertex);
	public void printChatMessage(String s);
	public Object render(Object model);
	public void renderBindTexture(Object render, Object resourceLocation);
	public String[] renderBipedBipedArmorFilenamePrefix();
	public void renderBlocksRenderBlockAllFaces(Object renderBlocks, Object block, int i, int i2, int i3);
	public void renderBlocksDrawCrossedSquares(Object renderBlocks, Object iIcon, double d, double d2, double d3, float f);
	public void renderBlocksRenderBlockAsItem(Object renderBlocks, Object block, int i, float f);
	public boolean renderBlocksRenderItemIn3d(Object renderBlocks, int i);
	public Object renderEngine();
	public void renderEngineBindTexture(Object o);
	public void renderEngineSetupTexture(Object bufferedimage, int i);
	public void renderEngineDeleteTexture(Object resourceLocation);
	public void renderEngineDeleteTexture(Object renderEngine, Object resourceLocation);
	public Object renderItemGetItemModelMesher(Object renderItem);
	public Object rendererLivingEntityRES_ITEM_GLINT(Object render);
	public void rendererLivingEntityPassSpecialRender(Object rendererLivingEntity, Object entity, double d, double d1, double d2);
	public void rendererLivingEntitySetRenderPassModel(Object rendererLivingEntity, Object modelBase);
	public void renderFirstPersonArm(Object render, Object entityplayer);
	public boolean renderPlayerSmallArms(Object renderPlayer);
	public void renderHelperDisableStandardItemLighting();
	public void renderHelperEnableStandardItemLighting();
	public void renderItems(Object model, Object entity, Object render);
	public Object renderLoadDownloadableImageTexture(Object render, String s, String s1);
	public Object renderMainModel(Object render);
	public void renderLivingFunc_110827_b(Object renderLiving, Object entityLiving, double d, double d2, double d3, float f, float f1);
	public boolean renderLivingFunc_110813_b(Object renderLiving, Object entityLiving);
	public Map renderManagerEntityRenderMap();
	public Map renderManagerSkinMap();
	public Object renderManagerGetEntityClassRenderObject(Class c);
	public Object renderManagerGetEntityRenderObject(Object entity);
	public Object renderManagerInstance();
	public Object renderManagerItemRenderer();
	public void renderManagerItemRendererRenderItem(Object entity, Object itemstack, Object o);
	public void renderManagerItemRendererRenderItem(Object itemRenderer, Object entity, Object itemstack, Object o);
	public boolean renderManagerRenderEntityWithPosYaw(Object entity, double d, double d2, double d3, float f, float f2);
	public Object renderRenderBlocks(Object pRender);
	public Object renderRenderManager(Object render);
	public Object renderRenderManagerRenderEngine(Object render);
	public void renderSetRenderManager(Object render);
	public InputStream resourceGetInputStream(Object resource);
	public Object resourceManagerGetResource(Object o);
	public Object resourceManagerGetResource(Object resourceManager, Object o);
	public InputStream resourceManagerInputStream(Object o);
	public String resourceLocationGetResourceDomain(Object resourceLocation);
	public String resourceLocationGetResourcePath(Object resourceLocation);
	public void setArmorRendering(Object model, boolean b);
	public void setEntityEntityID(Object entity, int i);
	public void setEntityFoodStats(Object entityplayer, Object entityGetFoodStats);
	public void setEntityLivingBaseDeathTime(Object entityLivingBase, int i);
	public void setEntityLivingBaseHealth(Object entity, float f);
	public void setEntityMotionX(Object entity, double d);
	public void setEntityMotionY(Object entity, double d);
	public void setEntityMotionZ(Object entity, double d);
	public void setEntityPlayerArmorInventory(Object entityplayer, Object armorInventory);
	public void setEntityPlayerCurrentXP(Object entityplayer, float f);
	public void setEntityPlayerInventory(Object entityplayer, Object inventory);
	public void setEntityPlayerMainInventory(Object entityplayer, Object mainInventory);
	public void setEntityPlayerPlayerLevel(Object entityplayer, int i);
	public void setEntityPlayerScore(Object entityplayer, int i);
	public void setEntityPlayerSPMovementInput(Object entityplayer, Object movementInput);
	public void setEntityPlayerTotalXP(Object entityplayer, int i);
	public void setEntityPosX(Object entity, double d);
	public void setEntityPosY(Object entity, double d);
	public void setEntityPosZ(Object entity, double d);
	public void setEntityRendererItemRenderer(Object itemRenderer);
	public void setEntityYOffset(Object entity, float f);
	public void setGameSettingsKeyBindBack(Object keyBinding);
	public void setGameSettingsKeyBindForward(Object keyBinding);
	public void setGameSettingsKeyBindLeft(Object keyBinding);
	public void setGameSettingsKeyBindRight(Object keyBinding);
	public void setGuiButtonEnabled(Object guiButton, boolean b);
	public void setGuiButtonID(Object guiButton, int i);
	public void setGuiButtonVisible(Object guiButton, boolean b);
	public void setGuiButtonXPosition(Object guiButton, int i);
	public void setGuiButtonYPosition(Object guiButton, int i);
	public void setGuiScreenButtonList(Object guiScreen, List list);
	public void setGuiScreenFontRenderer(Object guiScreen, Object fontRenderer);
	public void setGuiScreenHeight(Object guiScreen, int i);
	public void setGuiScreenWidth(Object guiScreen, int i);
	public void setMinecraftDisplayGuiScreen(Object guiScreen);
	public void setMinecraftPlayerController(Object playerController);
	public void setMinecraftRenderViewEntity(Object entity);
	public void setMinecraftThePlayer(Object entityPlayer);
	public void setRender(Object model, Object render);
	public void setRenderMainModel(Object render, Object model);
	public void setRenderManagerItemRenderer(Object itemRenderer);
	public boolean stringUtilsIsNullOrEmpty(String s);
	public Object serverConfigurationManagerRespawnPlayer(Object serverConfigurationManager, Object entityPlayerMP, int i, boolean b);
	public int scaledresolutionGetScaleFactor(Object scaledresolution);
	public int scaledresolutionGetScaledWidth(Object scaledresolution);
	public int scaledresolutionGetScaledHeight(Object scaledresolution);
	public Object slotGetStack(Object slot);
	public Object sharedMonsterAttributesAttackDamage();
	public void framebufferBindFramebuffer(Object framebuffer, boolean b);
	public void framebufferUnbindFramebuffer(Object framebuffer);
	public void framebufferFramebufferRender(Object framebuffer, int i, int i1);
	public void tessellatorAddVertex(Object tessellator, double d, double d2, double d3);
	public void tessellatorAddVertexWithUV(Object tessellator, double d, double d2, double d3, double d4, double d5);
	public void tessellatorDraw(Object tessellator);
	public Object tessellatorInstance();
	public void tessellatorSetColorOpaque_I(int i);
	public void tessellatorSetColorOpaque_I(Object tessellator, int i);
	public void tessellatorSetColorOpaque_F(float f, float f1, float f2);
	public void tessellatorSetColorOpaque_F(Object tessellator, float f, float f1, float f2);
	public void tessellatorSetBrightness(Object tessellator, int i);
	public void tessellatorSetColorRGBA_I(int i, int i2);
	public void tessellatorSetColorRGBA_I(Object tessellator, int i, int i2);
	public void tessellatorSetNormal(Object tessellator, float f, float f2, float f3);
	public void tessellatorStartDrawing(Object tessellator, byte by);
	public void tessellatorStartDrawingQuads();
	public void tessellatorStartDrawingQuads(Object tessellator);
	public void texturedQuadDraw(Object texturedQuad, Object tessellator, float f);
	public void textureManagerBindTexture(Object o);
	public void textureManagerBindTexture(Object textureManager, Object o);
	public Object textureManagerGetResourceLocation(int i);
	public Object textureManagerGetResourceLocation(Object textureManager, int i);
	public Object textureManagerGetTexture(Object o);
	public Object textureManagerGetTexture(Object textureManager, Object o);
	public Object textureMapLocationBlocksTexture();
	public int textureOffsetTextureOffsetX(Object textureOffset);
	public int textureOffsetTextureOffsetY(Object textureOffset);
	public void textureUtilBindTexture(int i);
	public int textureUtilUploadTextureImage(int i, Object bufferedimage);
	public int textureUtilAnaglyphColor(int i);
	public boolean threadDownloadImageDataIsTextureUploaded(Object threadDownloadImageData);
	public int threadDownloadImageDataGetGlTextureId(Object threadDownloadImageData);
	public Object vec3CreateVectorHelper(double d, double d2, double d3);
	public Object vec3CrossProduct(Object vec3, Object vec3_2);
	public Object vec3Normalize(Object vec3);
	public Object vec3Subtract(Object vec3, Object vec3_2);
	public double vec3XCoord(Object vec3);
	public double vec3YCoord(Object vec3);
	public double vec3ZCoord(Object vec3);
	public double vec3SquareDistanceTo(Object vec3, Object vec3_2);
	public Object vec3AddVector(Object vec3, double d, double d2, double d3);
	public boolean worldCanBlockSeeTheSky(double d, double d2, double d3);
	public boolean worldCanBlockSeeTheSky(int i, int i2, int i3);
	public boolean worldCanBlockSeeTheSky(Object worldOrEntity, double d, double d2, double d3);
	public boolean worldCanBlockSeeTheSky(Object worldOrEntity, int i, int i2, int i3);
	public List worldGetEntitiesWithinAABBExcludingEntity(Object entity, Object axisAlignedBB);
	public List worldGetEntitiesWithinAABBExcludingEntity(Object worldOrEntity, Object entity, Object axisAlignedBB);
	public Object worldGetWorldInfo();
	public void worldRemoveEntity(Object world, Object entity);
	public Object worldGetBlock(int i, int i2, int i3);
	public Object worldGetBlock(Object world, int i, int i2, int i3);
	public Enum worldGetWorldInfoGetGameType();
	public Enum worldSettingsGameTypeNOT_SET();
	public Enum worldSettingsGameTypeSURVIVAL();
	public Enum worldSettingsGameTypeCREATIVE();
	public Enum worldSettingsGameTypeADVENTURE();
	public boolean worldIsAirBlock(Object worldOrEntity, int i, int j, int k);
	public boolean worldIsBlockNormalCubeDefault(Object worldOrEntity, int i, int j, int k, boolean b);
	public boolean worldIsDaytime(Object worldOrEntity);
	public boolean worldIsRemote(Object worldOrEntity);
	public List playerEntities(Object worldOrEntity);
	public List worldPlayerEntities(Object worldOrEntity);
	public List worldWeatherEffects(Object worldOrEntity);
	public void worldSetEntityDead(Object worldOrEntity, Object entity);
	public void worldSpawnPlayerWithLoadedChunks(Object entity);
	public Object worldRand(Object worldOrEntity);
	public void worldSpawnPlayerWithLoadedChunks(Object worldOrEntity, Object entity);
	public void worldSpawnParticle(String s, double d, double d1, double d2, double d3, double d4, double d5);
	public void worldSpawnParticle(Object worldOrEntity, Object stingOrEnumParticleTypes, double d, double d1, double d2, double d3, double d4, double d5);
	public void worldPlaySoundAtEntity(Object worldOrEntity, Object entity, String s, float f, float f1);
	public boolean worldIsBlockModifiable(Object worldOrEntity, Object entityPlayer, int x, int y, int z);
	public void worldSetEntityState(Object worldOrEntity, Object entity, byte by);
	public Object worldGetPathEntityToEntity(Object worldOrEntity, Object entity, Object entity2, float f, boolean b, boolean b1, boolean b2, boolean b3);
	public List worldGetEntitiesWithinAABB(Object worldOrEntity, Class c, Object axisAlignedBB);
	public List worldLoadedEntityList(Object worldOrEntity);
	public Object worldGetClosestPlayerToEntity(Object worldOrEntity, Object entity, double d);
	public Object worldGetPlayerEntityByName(Object worldOrEntity, String s);
	public Object worldGetBiomeGenForCoords(Object worldOrInt, Object blockPosOrInt);
	public Object worldGetBiomeGenForCoords(Object worldOrEntity, int i, int i1);
	public boolean worldSpawnEntityInWorld(Object worldOrEntity, Object entity);
	public void worldClientAddEntityToWorld(Object worldClient, int i, Object entity);
	public int worldGetBlockStateGetBlockMetadata(Object worldOrEntity, int x, int y, int z);
	public int worldGetBlockLightValue(Object worldOrEntity, int x, int y, int z);
	public int worldGetStrongPower(Object worldOrEntity, int x, int y, int z);
	public int tileEntityXCoord(Object tileEntity);
	public int tileEntityYCoord(Object tileEntity);
	public int tileEntityZCoord(Object tileEntity);
	public Object newBlockPos(Object x, Object y, Object z);
	public Object newModelResourceLocation(String s, String s1);
	public Object worldGetBlockState(Object worldOrEntity, Object blockPos);
	public Object worldGetEntityByID(Object worldOrEntity, int i);
	public List modelRendererCubeList(Object modelRenderer);
	public void setModelRendererCubeList(Object modelRenderer, List list);
	public List modelRendererChildModels(Object modelRenderer);
	public void setModelRendererChildModels(Object modelRenderer, List list);
	public float modelRendererTextureWidth(Object modelRenderer);
	public void setModelRendererTextureWidth(Object modelRenderer, float f);
	public float modelRendererTextureHeight(Object modelRenderer);
	public void setModelRendererTextureHeight(Object modelRenderer, float f);
	public boolean entityLivingBaseIsSwingInProgress(Object entityLivingBase);
	public void setEntityLivingBaseIsSwingInProgress(Object entityLivingBase, boolean b);
	public boolean entityIsBurning(Object entity);
	public boolean entityIsSprinting(Object entity);
	public boolean entityLivingGetLeashed(Object entityLiving);
	public String entityListGetEntityString(Object entity);
	public long worldInfoGetWorldTotalTime(Object entityOrWorldOrWorldInfo);
	public long worldInfoGetWorldTime(Object entityOrWorldOrWorldInfo);
	public int worldGetMoonPhase(Object entityOrWorld);
	public void entityLivingSetCurrentItemOrArmor(Object entityLiving, int i, Object itemStack);
	public void entitySetVelocity(Object entity, double d, double d1, double d2);
	public void entitySetSneaking(Object entity, boolean b);
	public void openGlHelperSetLightmapTextureCoords(int i, float f, float f1);
	public void entityTameableSetTamed(Object entityTameable, boolean b);
	public void entityAgeableSetGrowingAge(Object entityTameable, int i);
	public String chatAllowedCharactersFilterAllowedCharacters(String s);
	public String itemGetUnlocalizedName(Object item);
	public int entityLivingBaseAttackTime(Object entity);
	public void setEntityLivingBaseAttackTime(Object entityLivingBase, int i);

}
