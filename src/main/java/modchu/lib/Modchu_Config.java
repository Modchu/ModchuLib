package modchu.lib;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.util.ArrayList;import java.util.ConcurrentModificationException;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.concurrent.ConcurrentHashMap;public class Modchu_Config{	public static HashMap<Object, List<String>> cfgData = new HashMap();	protected static ArrayList<String> failureShowModelList = new ArrayList<String>();	public static void writerConfig(File file, String[] s) {		//設定ファイル書き込み		try {			BufferedWriter bwriter = new BufferedWriter(new FileWriter(file));			List list = new ArrayList();			for (String s0 : s) {				if (s0 != null); else continue;				list.add(s0);				bwriter.write(s0);				bwriter.newLine();			}			cfgData.put(file, list);			bwriter.close();			Modchu_Debug.lDebug("Modchu_Config String[] "+ file.toString() +" new file create.");		} catch (Exception e) {			Modchu_Debug.systemLogDebug("Modchu_Config writerConfig String[] file="+ file.toString() +" file writer fail.", 2, e);			e.printStackTrace();		}	}	public static void writerConfig(File file, List<String> list1) {		//設定ファイル書き込み		if (file != null				&& list1 != null				&& !list1.isEmpty()) ;else {			//if (file == null) Modchu_Debug.Debug("Modchu_Config List writerConfig error ! file == null !!");			if (list1.isEmpty()) Modchu_Debug.lDebug("Modchu_Config List "+ file.toString() +" writerConfig error ! list1.isEmpty()");			return;		}		BufferedWriter bwriter = null;		try {			if (!list1.isEmpty()					&& (file.exists()							| file.createNewFile())					&& file.canWrite()) {				bwriter = new BufferedWriter(new FileWriter(file));				List list = new ArrayList();				for (String s1 : list1) {					if (s1 != null); else continue;					list.add(s1);					bwriter.write(s1);					bwriter.newLine();				}				cfgData.put(file, list);				//Modchu_Debug.mDebug("Modchu_Config List "+ file.toString() +" writerConfig.");			} else {				if (file.exists()						| file.createNewFile()) ;else Modchu_Debug.lDebug("Modchu_Config List "+ file.toString() +" writerConfig error ! !(file.exists() | file.createNewFile())");				if (!file.canWrite()) Modchu_Debug.lDebug("Modchu_Config List "+ file.toString() +" writerConfig error ! !file.canWrite()");			}		} catch (ConcurrentModificationException e) {		} catch (Exception e) {			Modchu_Debug.systemLogDebug("Modchu_Config writerConfig List file="+ file.toString() +" file writer fail.", 2, e);			e.printStackTrace();		 } finally {			 try {				 if (bwriter != null) bwriter.close();			 } catch (Exception e) {			 }		 }	}	public static void writerConfig(File file, Map map) {		//設定ファイル書き込み		BufferedWriter bwriter = null;		try {			if (!map.isEmpty()					&& (file.exists()							| file.createNewFile())					&& file.canWrite()) {				bwriter = new BufferedWriter(new FileWriter(file));				List list = new ArrayList();				for (Entry<Object, Object> en : ((Map<Object, Object>) map).entrySet()) {					Object key = en.getKey();					Object value = en.getValue();					String s1 = key.toString() + "=" + value.toString();					list.add(s1);					bwriter.write(s1);					bwriter.newLine();				}				cfgData.put(file, list);				Modchu_Debug.lDebug("Modchu_Config Map "+ file.toString() +" writerConfig.");			} else {				Modchu_Debug.lDebug("Modchu_Config Map "+ file.toString() +" writerConfig. error map="+map+" file="+file);			}		} catch (Exception e) {			Modchu_Debug.systemLogDebug("Modchu_Config writerConfig Map file="+ file.toString() +" file writer fail.", 2, e);			e.printStackTrace();		 } finally {			 try {				 if (bwriter != null) bwriter.close();			 } catch (Exception e) {			 }		 }	}	public static void loadConfig(List configList, File file) {		// cfg設定項目読み込み showModel読み込み		List list = (ArrayList) cfgData.get(file);		int i1;		if (list == null) {			list = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				while ((rl = breader.readLine()) != null) {					list.add(rl);					if (rl.startsWith("#")							| rl.startsWith("/")) {						if (!failureShowModelList.contains(rl)) failureShowModelList.add(rl);						continue;					}					if (rl.indexOf("showModel[]") != -1) {						configList.add(rl);						Modchu_Debug.mDebug("Modchu_Config loadConfig "+ file.toString() +" load " + rl);					}				}				cfgData.put(file, list);				//Modchu_Debug.mDebug("Modchu_Config loadConfig o = "+o.toString());			} catch (Exception e) {				Modchu_Debug.systemLogDebug("Modchu_Config loadConfig "+ file.toString() +" load fail.", 2, e);				e.printStackTrace();			} finally {				try {					if (breader != null) breader.close();				} catch (Exception e) {				}			}		} else {			String s2;			for (int i = 0; i < list.size() ; i++) {				s2 = (String) list.get(i);				if (s2.startsWith("#")						| s2.startsWith("/")) {					if (!failureShowModelList.contains(s2)) failureShowModelList.add(s2);					continue;				}				if (s2.indexOf("showModel[]") != -1) {					configList.add(s2);					//Modchu_Debug.mDebug("Modchu_Config loadConfig 2 "+ file.toString() +" load " + s2);				}			}		}	}	public static Object loadConfig(File file, String s, Object o) {		// cfg設定項目読み込み		List list = new ArrayList();		list = (ArrayList) cfgData.get(file);		if (list == null) {			list = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;								while ((rl = breader.readLine()) != null) {					int i1;					list.add(rl);					if (rl.startsWith("#")							| rl.startsWith("/")) continue;					if (rl.startsWith(s)) {						i1 = rl.indexOf('=');						if (i1 > -1) {							if (s.length() == i1) {								o = rl.substring(i1 + 1);								//Modchu_Debug.mDebug("cfg "+ file.toString() +" load ok s.length()="+s.length()+" i1="+i1+" rl="+rl);							} else {								//Modchu_Debug.mDebug("cfg "+ file.toString() +" load s.length()="+s.length()+" i1="+i1+" rl="+rl);							}						}					}				}				cfgData.put(file, list);				//Modchu_Debug.mDebug("Modchu_Config loadConfig1 o = "+o.toString());			} catch (Exception e) {				Modchu_Debug.systemLogDebug("Modchu_Config loadConfig "+ file.toString() +" load fail.", 2, e);				e.printStackTrace();			 } finally {				 try {					 if (breader != null) breader.close();				 } catch (Exception e) {				 }			 }		} else {			String s2;			for (int i = 0; i < list.size() ; i++) {				s2 = (String) list.get(i);				if (s2.startsWith("#")						| s2.startsWith("/")) continue;				if (s2.startsWith(s)) {					int i1 = s2.indexOf('=');					//if (s.equalsIgnoreCase("shortcutKeysTextureName[6]")) Modchu_Debug.mDebug("Modchu_Config loadConfig2 s2 = "+s2+" s="+s+" s.length()="+s.length()+" i1="+i1);					if (i1 > -1							&& s.length() == i1) {						o = s2.substring(i1 + 1);						break;					}				}			}			//Modchu_Debug.mDebug("Modchu_Config loadConfig2 o = "+o.toString());		}		return o;	}	public static void writerSupplementConfig(File file, Map map) {		//設定ファイルにない項目追加書き込み		if (file.exists()				&& file.canRead()				&& file.canWrite()) {			List<String> lines = new LinkedList();			List<String> templist = new LinkedList();			BufferedReader breader = null;			Map tempMap = Modchu_Main.mapDeepCopy(map);			//Modchu_Debug.mDebug("writerSupplementConfig tempMap.size()="+tempMap.size());			try {				breader = new BufferedReader(new FileReader(file));				String rl;				String s;				String s1;				while ((rl = breader.readLine()) != null) {					lines.add(rl);					String[] s0 = rl.split("=");					if (s0 != null							&& s0.length > 1) {						templist.add(s0[0]);					}				}				for (Entry<Object, Object> en : ((Map<Object, Object>) map).entrySet()) {					Object key = en.getKey();					s = key.toString();					for (String s3 : templist) {						//Modchu_Debug.mDebug("writerSupplementConfig s="+s+" s3="+s3);						if (s.equals(s3)) {							//Modchu_Debug.mDebug("writerSupplementConfig remove");							tempMap.remove(s3);							break;						}					}				}				for (Entry<Object, Object> en : ((Map<Object, Object>) tempMap).entrySet()) {					Object key = en.getKey();					Object value = en.getValue();					s = key.toString();					s1 = value.toString();					lines.add(s+"="+s1);					//Modchu_Debug.mDebug("writerSupplementConfig lines.add "+s+"="+s1);				}			} catch (Exception er) {				Modchu_Debug.systemLogDebug("Modchu_Config saveParamater", 2, er);				er.printStackTrace();			} finally {				try {					if (breader != null) breader.close();				} catch (Exception e) {				}			}			writerConfig(file, lines);		}	}	public static void writerSupplementConfig(File file, String[] k, String[] k1) {		//設定ファイルにない項目追加書き込み		if (file.exists()				&& file.canRead()				&& file.canWrite()) {			List lines = new LinkedList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				String s;				String s1;				boolean[] e = new boolean[k.length];				boolean ee = false;				StringBuilder sb = new StringBuilder();				while ((rl = breader.readLine()) != null) {					for (int i = 0; i < k.length ; i++) {						s = k[i];						if(!e[i]) {							if (rl.startsWith(s)) {								int i1 = rl.indexOf('=');								if (i1 > -1) {									if (s.length() == i1) {										sb.delete(0, sb.length());										sb.append(s).append("=")										.append(k1[i]);										lines.add(sb.toString());										e[i] = true;										//Modchu_Debug.mDebug("saveParamater true rl=" + rl);										break;									}								}							}						}					}				}				// 読み込めない項目があったかチェック、読み込めない項目があると作成しなおし				Boolean e1 = false;				for (int i = 0; i < k.length; i++) {					if (e[i] == false) {						e1 = true;						continue;					}				}				if (e1) {					sb.delete(0, sb.length());					//Modchu_Debug.mDebug("cfg file save. e=" + l.toString());					for(int i = 0; i < k.length ; i++) {						if (!e[i]) {							s = k[i];							sb.append(s).append("=");							sb.append(k1[i]);							lines.add(sb.toString());							sb.delete(0, sb.length());							//Modchu_Debug.mDebug("saveParamater save. k["+i+"]=" + k[i]+" k1["+i+"]=" + k1[i]);						}					}				}			} catch (Exception er) {				Modchu_Debug.systemLogDebug("Modchu_Config saveParamater", 2, er);				er.printStackTrace();			} finally {				try {					if (breader != null) breader.close();				} catch (Exception e) {				}			}			writerConfig(file, lines);		}	}	public static void writerSupplementConfig(File file, List<String> list, List<String> list1) {		//設定ファイルにない項目追加書き込み		if (file.exists()				&& file.canRead()				&& file.canWrite()) {			List lines = new LinkedList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				String s;				String s1;				boolean[] e = new boolean[list.size()];				boolean ee = false;				StringBuilder sb = new StringBuilder();				while ((rl = breader.readLine()) != null) {					for (int i = 0; i < list.size() ; i++) {						s = list.get(i);						if(!e[i]) {							if (rl.startsWith(s)) {								int i1 = rl.indexOf('=');								if (i1 > -1) {									if (s.length() == i1) {										sb.delete(0, sb.length());										sb.append(s).append("=")										.append(list1.get(i));										lines.add(sb.toString());										e[i] = true;										//Modchu_Debug.mDebug("saveParamater true rl=" + rl);										break;									}								}							}						}					}				}				// 読み込めない項目があったかチェック、読み込めない項目があると作成しなおし				Boolean e1 = false;				for (int i = 0; i < list.size(); i++) {					if (e[i] == false) {						e1 = true;						continue;					}				}				if (e1) {					sb.delete(0, sb.length());					//Modchu_Debug.mDebug("cfg file save. e=" + l.toString());					for(int i = 0; i < list.size() ; i++) {						if (!e[i]) {							s = list.get(i);							sb.append(s).append("=");							sb.append(list1.get(i));							lines.add(sb.toString());							sb.delete(0, sb.length());							//Modchu_Debug.mDebug("saveParamater save. k["+i+"]=" + k[i]+" k1["+i+"]=" + k1[i]);						}					}				}			} catch (Exception er) {				Modchu_Debug.systemLogDebug("Modchu_Config saveParamater", 2, er);				er.printStackTrace();			} finally {				try {					if (breader != null) breader.close();				} catch (Exception e) {				}			}			writerConfig(file, lines);		}	}	public static ConcurrentHashMap<String, String> loadAllConfig(File file) {		ConcurrentHashMap<String, String> map = new ConcurrentHashMap();		// cfg設定項目すべて読み込みMapで返す		List<String> list = (ArrayList) cfgData.get(file);		int i1;		if (list == null) {			list = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				while ((rl = breader.readLine()) != null) {					list.add(rl);				}				cfgData.put(file, list);				//Modchu_Debug.mDebug("Modchu_Config loadConfig o = "+o.toString());			} catch (Exception e) {				Modchu_Debug.systemLogDebug("Modchu_Config loadConfig "+ file.toString() +" load fail.", 2, e);				e.printStackTrace();			} finally {				try {					if (breader != null) breader.close();				} catch (Exception e) {				}			}		}		if (list != null				&& !list.isEmpty()) ;else return null;		for (String rl : list) {			if (rl.startsWith("#")					| rl.startsWith("/")) {				continue;			}			i1 = rl.indexOf("=");			if (i1 > -1) {				String s = rl.substring(0, i1);				String s1 = rl.substring(i1 + 1);				map.put(s, s1);			}		}		return map;	}}