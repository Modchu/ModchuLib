package modchu.lib;import java.awt.image.BufferedImage;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.Set;import javax.imageio.ImageIO;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_IResourcePackMasterBasis;import modchu.lib.Modchu_Main;public class Modchu_ModResourcePackMaster extends Modchu_IResourcePackMasterBasis {	protected final Class modClass;	public Modchu_ModResourcePackMaster(HashMap<String, Object> map) {		super(map);		modClass = (Class) map.get("Class");	}	@Override	public InputStream getInputStream(Object resourceLocation) {		return modClass.getResourceAsStream("" + Modchu_AS.getString(Modchu_AS.resourceLocationGetResourcePath, resourceLocation));	}	@Override	public boolean resourceExists(Object resourceLocation) {		return this.getInputStream(resourceLocation) != null;	}	@Override	public Set getResourceDomains() {		return (Set) Modchu_AS.get("DefaultResourcePack", "defaultResourceDomains");	}	@Override	public Object getPackMetadata(Object metadataSerializer, String s) {		return Modchu_AS.get(Modchu_Main.getMinecraftVersion() > 169 ? "IMetadataSerializer" : "MetadataSerializer", "parseMetadataSection", new Class[]{ String.class, Modchu_Reflect.loadClass("com.google.gson.JsonObject") }, metadataSerializer, new Object[]{ s, Modchu_Reflect.newInstance("com.google.gson.JsonObject") });	}	@Override	public BufferedImage getPackImage() {		try {			return ImageIO.read(modClass.getResourceAsStream(					"/" + (Modchu_AS.get(Modchu_AS.resourceLocationGetResourcePath, Modchu_Main.newResourceLocation("pack.png")))));		} catch (IOException e) {			e.printStackTrace();		}		return null;	}	@Override	public String getPackName() {		return this.modClass.getSimpleName();	}}