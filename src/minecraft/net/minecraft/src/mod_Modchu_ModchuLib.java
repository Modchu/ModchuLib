package net.minecraft.src;import java.io.File;import java.lang.reflect.Field;import java.security.cert.Certificate;import java.util.EnumSet;import java.util.List;import java.util.Map;import java.util.Set;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Packet;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_Version;import modchu.lib.forgeonly.characteristic.Modchu_ForgeEVENTHandler;import modchu.lib.forgeonly.characteristic.Modchu_ModMetadata;import modchu.lib.forgeonly.characteristic.Modchu_ThreadInit;import net.minecraft.network.INetworkManager;import net.minecraft.network.NetLoginHandler;import net.minecraft.network.packet.NetHandler;import net.minecraft.network.packet.Packet1Login;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.server.MinecraftServer;import net.minecraftforge.common.MinecraftForge;import com.google.common.eventbus.EventBus;import cpw.mods.fml.common.ITickHandler;import cpw.mods.fml.common.LoadController;import cpw.mods.fml.common.MetadataCollection;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.ModContainer;import cpw.mods.fml.common.ModMetadata;import cpw.mods.fml.common.TickType;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;import cpw.mods.fml.common.network.IConnectionHandler;import cpw.mods.fml.common.network.IPacketHandler;import cpw.mods.fml.common.network.NetworkMod;import cpw.mods.fml.common.network.Player;import cpw.mods.fml.common.registry.TickRegistry;import cpw.mods.fml.common.versioning.ArtifactVersion;import cpw.mods.fml.common.versioning.VersionRange;import cpw.mods.fml.relauncher.Side;@Mod(modid="mod_Modchu_ModchuLib", name="mod_Modchu_ModchuLib", version=Modchu_Main.versionString)@NetworkMod(		clientSideRequired = true,		serverSideRequired = true,		channels = {"Modchu"},		packetHandler = mod_Modchu_ModchuLib.class,		connectionHandler = mod_Modchu_ModchuLib.class		)public class mod_Modchu_ModchuLib implements ModContainer, IPacketHandler, IConnectionHandler, ITickHandler {	public Modchu_ThreadInit loadCheckThread;	static {		Modchu_Main.init();	}	public mod_Modchu_ModchuLib() {		if (Modchu_Main.isServer) return;	}	public String getName() {		return Modchu_Main.modName;	}	public String getVersion() {		return Modchu_Main.versionString;	}	@Mod.EventHandler	public void load(FMLInitializationEvent event) {		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib load()");		MinecraftForge.EVENT_BUS.register(new Modchu_ForgeEVENTHandler());		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib load() end.");	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib preInit()");		Modchu_Main.load(this);		if (!Modchu_Main.isServer) {			TickRegistry.registerTickHandler(this, Side.CLIENT);		} else {			TickRegistry.registerTickHandler(this, Side.SERVER);		}		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib preInit() end.");	}	@EventHandler	public void init(FMLInitializationEvent event) {	//public void modsLoaded() {		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib init");		if (Modchu_Main.isServer) return;		loadCheckThread = new Modchu_ThreadInit();		loadCheckThread.start();		loadCheckThread.register(Modchu_Reflect.getMethod(getClass(), "initModsLoaded"));		Modchu_Debug.systemLogDebug("mod_Modchu_ModchuLib init end.");	}	public boolean onTickInGame(float f, Object minecraft) {		return Modchu_Main.onTickInGame(null, f, (Object) minecraft, (byte)0);	}	public void modsLoaded() {	}	public static void initModsLoaded() {		Modchu_Main.initModsLoadedStating = true;	}	public void keyboardEvent(Object keybinding) {		Modchu_Main.keyboardEvent(keybinding);	}	public void load() {	}	@Override	public void tickStart(EnumSet<TickType> type, Object... tickData) {	}	@Override	public void tickEnd(EnumSet<TickType> type, Object... tickData) {		if (Modchu_Main.isServer) return;		byte by = type.equals(EnumSet.of(TickType.RENDER)) ? (byte)2 : type.equals(EnumSet.of(TickType.PLAYER)) ? (byte)1 : (byte)0;		Modchu_Main.onTickInGame(null, 0.0F, null, by, tickData);	}	@Override	public EnumSet<TickType> ticks() {		return EnumSet.of(TickType.RENDER, TickType.PLAYER, TickType.CLIENT);	}	@Override	public String getLabel() {		return "ModchuLib";	}	@Override	public void playerLoggedIn(Player player, NetHandler netHandler, INetworkManager manager) {	}	@Override	public String connectionReceived(NetLoginHandler netHandler, INetworkManager manager) {		return null;	}	@Override	public void connectionOpened(NetHandler netClientHandler, String server, int port, INetworkManager manager) {			}	@Override	public void connectionOpened(NetHandler netClientHandler, MinecraftServer server, INetworkManager manager) {			}	@Override	public void connectionClosed(INetworkManager manager) {			}	@Override	public void clientLoggedIn(NetHandler clientHandler, INetworkManager manager, Packet1Login login) {		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), "clientConnectedToServer", "clientConnectedToServer", new Class[]{ Object.class }, new Object[]{ new Object[]{ clientHandler, manager, login } });	}	@Override	public void onPacketData(INetworkManager manager, Packet250CustomPayload packet, Player player) {		Modchu_Packet.onPacketData(manager, packet,  player);	}	@Override	public String getModId() {		return "mod_Modchu_ModchuLib";	}	@Override	public File getSource() {		return null;	}	@Override	public ModMetadata getMetadata() {		return Modchu_ModMetadata.instance;	}	@Override	public void bindMetadata(MetadataCollection mc) {	}	@Override	public void setEnabledState(boolean enabled) {	}	@Override	public Set<ArtifactVersion> getRequirements() {		return null;	}	@Override	public List<ArtifactVersion> getDependencies() {		return null;	}	@Override	public List<ArtifactVersion> getDependants() {		return null;	}	@Override	public String getSortingRules() {		return null;	}	@Override	public boolean registerBus(EventBus bus, LoadController controller) {		return false;	}	@Override	public boolean matches(Object mod) {		return false;	}	@Override	public Object getMod() {		return Modchu_Main.baseModInstance;	}	@Override	public ArtifactVersion getProcessedVersion() {		return null;	}	@Override	public boolean isImmutable() {		return false;	}	@Override	public boolean isNetworkMod() {		return true;	}	@Override	public String getDisplayVersion() {		return getVersion();	}	@Override	public VersionRange acceptableMinecraftVersionRange() {		return null;	}	@Override	public Certificate getSigningCertificate() {		return null;	}	@Override	public Map<String, String> getCustomModProperties() {		return null;	}	@Override	public Class<?> getCustomResourcePackClass() {		return null;	}	@Override	public Map<String, String> getSharedModDescriptor() {		return null;	}	public String getMcVersion() {		if (Modchu_Main.isServer) return Modchu_Version.getMinecraftVersionString();		String s = null;		s = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject("ModLoader", "VERSION", -1));		if (s != null) {			if (s.indexOf(" ") > 0){				return Modchu_Main.lastIndexProcessing(s, " ");			}			return s;		}		String s1 = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("net.minecraftforge.common.ForgeVersion", "getMinorVersion", -1));		if (s1 != null) {			String s2 = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("net.minecraftforge.common.ForgeVersion", "getBuildVersion", -1));			s = Modchu_Main.getForgeVersionBuildVersionToMcVersion(s1, s2);		}		if (s != null) return s;		Field f = Modchu_Reflect.getField(net.minecraft.client.Minecraft.class, "field_110447_Z", "launchedVersion");		if (f != null) {			try {				s = (String) f.get(net.minecraft.client.Minecraft.getMinecraft());			} catch (Exception e) {			}		}		return s;	}}