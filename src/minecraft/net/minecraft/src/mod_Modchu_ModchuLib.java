package net.minecraft.src;import java.util.EnumSet;import java.util.Random;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.fmlonly.Modchu_ThreadInit;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.inventory.IInventory;import net.minecraft.item.ItemStack;import net.minecraft.network.INetworkManager;import net.minecraft.network.NetServerHandler;import net.minecraft.network.packet.NetHandler;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.world.World;import cpw.mods.fml.common.ITickHandler;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.TickType;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;import cpw.mods.fml.common.network.NetworkMod;import cpw.mods.fml.common.registry.TickRegistry;import cpw.mods.fml.relauncher.Side;@Mod(modid="mod_Modchu_ModchuLib", name="mod_Modchu_ModchuLib")public class mod_Modchu_ModchuLib implements ITickHandler {	public Modchu_ThreadInit loadCheckThread;	static {		Object o = Modchu_Reflect.invokeMethod("cpw.mods.fml.common.FMLCommonHandler", "instance");		if (o != null) {			o = Modchu_Reflect.invokeMethod(o.getClass(), "getSide", o);			if (o != null) {				if ((Boolean) Modchu_Reflect.invokeMethod(o.getClass(), "isServer", o)) Modchu_Main.isServer = true;			} else {				//Modchu_Debug.Debug("static 2 o == null !!");			}		} else {			Modchu_Main.isServer = Modchu_Reflect.getFieldObject("ModLoader", "getMinecraftInstance") != null;			//Modchu_Debug.Debug("static o == null !!");		}		//Modchu_Debug.Debug("static isServer="+isServer);	}	public mod_Modchu_ModchuLib()	{		if (Modchu_Main.isServer) return;	}	public String getName() {		return Modchu_Main.modName;	}	public String getVersion() {		return Modchu_Main.versionString;	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {	//public void load() {		if (Modchu_Main.isServer) return;		Modchu_Debug.lDebug("mod_Modchu_ModchuLib modchu_Main preInit");		//if (isServer) {			//Modchu_Debug.systemDebug("mod_Modchu_ModchuLib isServer return.", 999);			//Modchu_Debug.lDebug("mod_Modchu_ModchuLib isServer return.");			//return;		//}		Modchu_Main.mod_Modchu_ModchuLib = this;		Modchu_Main modchu_Main = new Modchu_Main();		modchu_Main.load();		//if (!isServer) {		TickRegistry.registerTickHandler(this, Side.CLIENT);		//} else {			//TickRegistry.registerTickHandler(this, Side.SERVER);		//}		//ModLoader.setInGameHook(this, true, true);	}	@EventHandler	public void init(FMLInitializationEvent event) {	//public void modsLoaded() {		Modchu_Debug.lDebug("mod_Modchu_ModchuLib init");		if (Modchu_Main.isServer) return;		loadCheckThread = new Modchu_ThreadInit();		loadCheckThread.start();		loadCheckThread.register(Modchu_Reflect.getMethod("modchu.lib.Modchu_Main", "modsLoaded"));		Modchu_Debug.lDebug("mod_Modchu_ModchuLib init loadCheckThread.start end.");	}	public boolean onTickInGame(float f, Object minecraft)	{		if (Modchu_Main.isServer) return false;		return Modchu_Main.onTickInGame(f, (Object) minecraft, (byte)0);	}	public void modsLoaded() {	}	public void load() {	}	public String getPriorities() {		return null;	}	public boolean doTickInGUI(TickType type, boolean end, Object... tickData) {		return false;	}	public boolean doTickInGame(TickType type, boolean end, Object... tickData) {		return false;		//if (isServer) return false;		//return Modchu_Main.onTickInGame(0.0F, null);	}	public void generateSurface(World w, Random random, int i, int j) {	}	public void generateNether(World w, Random random, int i, int j) {	}	public int addFuel(int itemId, int damage) {		return 0;	}	public void takenFromCrafting(EntityPlayer player, ItemStack item, IInventory craftMatrix) {	}	public void takenFromFurnace(EntityPlayer player, ItemStack item) {	}	public void onClientLogout(INetworkManager manager) {	}	public void onClientLogin(EntityPlayer player) {	}	public void serverDisconnect() {	}	public void serverConnect(NetHandler handler) {	}	public void receiveCustomPacket(Packet250CustomPayload packet) {	}	public void clientChat(String text) {	}	public void onItemPickup(EntityPlayer player, ItemStack item) {	}	public void serverCustomPayload(NetServerHandler handler, Packet250CustomPayload packet) {	}	public void serverChat(NetServerHandler source, String message) {	}	@Override	public void tickStart(EnumSet<TickType> type, Object... tickData) {		if (Modchu_Main.isServer) return;	}	@Override	public void tickEnd(EnumSet<TickType> type, Object... tickData) {		if (Modchu_Main.isServer) return;		byte by = type.equals(EnumSet.of(TickType.RENDER)) ? (byte)2 : (byte)1;		Modchu_Main.onTickInGame(0.0F, null, by, tickData);	}	@Override	public EnumSet<TickType> ticks() {		return EnumSet.of(TickType.RENDER, TickType.CLIENT);	}	@Override	public String getLabel() {		return null;	}}