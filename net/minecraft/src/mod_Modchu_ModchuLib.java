package net.minecraft.src;import java.lang.reflect.Field;import java.util.Map;import java.util.Random;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_Version;public class mod_Modchu_ModchuLib extends BaseMod {	public Object loadCheckThread;	static {		Modchu_Main.init();	}	public mod_Modchu_ModchuLib() {		if (Modchu_Main.isServer) return;	}	@Override	public String getName() {		return Modchu_Main.modName;	}	@Override	public String getVersion() {		return Modchu_Main.versionString;	}	@Override	public void load() {		Modchu_Debug.systemLogDebug("2 - (1 / 2) mod_Modchu_ModchuLib load()");		Modchu_Main.load(this);		ModLoader.setInGameHook(this, true, true);		ModLoader.setInGUIHook(this, true, false);		Modchu_Debug.systemLogDebug("2 - (2 / 2) mod_Modchu_ModchuLib load() end.");	}	@Override	public void modsLoaded() {		if (Modchu_Main.isForge) {			Object EVENT_BUS = Modchu_Reflect.getFieldObject("net.minecraftforge.common.MinecraftForge", "EVENT_BUS");			Object handler = Modchu_Reflect.newInstance("modchu.lib.forgeonly.characteristic.Modchu_ForgeEVENTHandler");			if (EVENT_BUS != null) Modchu_Reflect.invokeMethod(EVENT_BUS.getClass(), "register", new Class[]{ Object.class }, EVENT_BUS, new Object[]{ handler });		}		Modchu_Main.modsLoaded();	}	@Override	public void addRenderer(Map map) {		String s = "addRenderer";		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ map });		Modchu_Main.addRenderer(map);	}	@Override	public boolean onTickInGame(float f, Minecraft minecraft) {		return Modchu_Main.onTickInGame(null, f, minecraft, (byte)0);	}	@Override	public boolean onTickInGUI(float f, Minecraft minecraft, GuiScreen guiscreen) {		String s = "onTickInGUI";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return false;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ f, minecraft, guiscreen } });		return true;	}	@Override	public void keyboardEvent(KeyBinding keybinding) {		Modchu_Main.keyboardEvent(keybinding);	}	@Override	public int addFuel(int i, int j) {		String s = "addFuel";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return 0;		Object[] o = Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ i, j } });		int i1 = 0;		for (int i2 = 0; i1 == 0				&& i2 < o.length; i2++) {			if (o[i2] != null) i1 = Modchu_CastHelper.Int(o[i2]);		}		return i1;	}	@Override	public void generateNether(World world, Random random, int i, int j) {		String s = "generateNether";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ world, random, i, j } });	}	@Override	public void generateSurface(World world, Random random, int i, int j) {		String s = "generateSurface";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ world, random, i, j } });	}	@Override	public String getPriorities() {		return null;	}	@Override	public void onItemPickup(EntityPlayer entityplayer, ItemStack itemstack) {		String s = "onItemPickup";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ entityplayer, itemstack } });	}	@Override	public void clientChat(String s1) {		String s = "clientChat";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ s1 } });		super.clientChat(s1);	}	@Override	public void serverChat(NetServerHandler netserverhandler, String s1) {		String s = "serverChat";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ netserverhandler, s1 } });	}	@Override	public void clientCustomPayload(NetClientHandler clientHandler, Packet250CustomPayload packet250custompayload) {		String s = "clientCustomPayload";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ clientHandler, packet250custompayload } });	}	@Override	public void serverCustomPayload(NetServerHandler serverHandler, Packet250CustomPayload packet250custompayload) {		String s = "serverCustomPayload";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ serverHandler, packet250custompayload } });	}	@Override	public void registerAnimation(Minecraft minecraft) {		String s = "registerAnimation";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ minecraft } });	}	@Override	public void renderInvBlock(RenderBlocks renderblocks, Block block, int i, int j) {		String s = "renderInvBlock";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ renderblocks, block, i, j } });	}	@Override	public boolean renderWorldBlock(RenderBlocks renderblocks, IBlockAccess iblockaccess, int i, int j, int k, Block block, int l) {		String s = "renderWorldBlock";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return false;		Object[] o = Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ renderblocks, iblockaccess, i, j, k, block, l } });		boolean b = false;		for (Object o1 : o) {			b |= o1 != null ? Modchu_CastHelper.Boolean(o1) : false;		}		return b;	}	@Override	public void clientConnect(NetClientHandler netclienthandler) {		String s = "clientConnect";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ netclienthandler } });	}	@Override	public void clientDisconnect(NetClientHandler clientHandler) {		String s = "clientDisconnect";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ clientHandler } });	}	@Override	public void takenFromCrafting(EntityPlayer entityplayer, ItemStack itemstack, IInventory iinventory) {		String s = "takenFromCrafting";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ entityplayer, itemstack, iinventory } });	}	@Override	public void takenFromFurnace(EntityPlayer entityplayer, ItemStack itemstack) {		String s = "takenFromFurnace";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return;		Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ entityplayer, itemstack } });	}	@Override	public GuiContainer getContainerGUI(EntityClientPlayerMP player, int inventoryType, int x, int y, int z) {		String s = "getContainerGUI";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return null;		Object[] o = Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ player, inventoryType, x, y, z } });		for (Object o1 : o) {			if (o1 != null) return (GuiContainer) o1;		}		return null;	}	@Override	public Entity spawnEntity(int id, World world, double x, double y, double z) {		String s = "spawnEntity";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return null;		Object[] o = Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ id, world, x, y, z } });		for (Object o1 : o) {			if (o1 != null) return (Entity) o1;		}		return null;	}	@Override	public Packet23VehicleSpawn getSpawnPacket(Entity entity, int id) {		String s = "getSpawnPacket";		if (Modchu_Main.getEventObjectLoadCheckList().contains(s)) return null;		Object[] o = Modchu_Main.eventObjectLoad(Modchu_Main.getEventObjectList(), Modchu_Main.getEventObjectLoadCheckList(), s, s, new Class[]{ Object.class }, new Object[]{ new Object[]{ entity, id } });		for (Object o1 : o) {			if (o1 != null) return (Packet23VehicleSpawn) o1;		}		return null;	}	public String getLabel() {		return "ModchuLib";	}	public String getMcVersion() {		if (Modchu_Main.isServer) return Modchu_Version.getMinecraftVersionString();		String s = null;		s = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject("ModLoader", "VERSION", -1));		if (s != null) {			if (s.indexOf(" ") > 0){				return Modchu_Main.lastIndexProcessing(s, " ");			}			return s;		}		String s1 = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("net.minecraftforge.common.ForgeVersion", "getMinorVersion", -1));		if (s1 != null) {			String s2 = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("net.minecraftforge.common.ForgeVersion", "getBuildVersion", -1));			s = Modchu_Main.getForgeVersionBuildVersionToMcVersion(s1, s2);		}		if (s != null) return s;		Field f = Modchu_Reflect.getField(Minecraft.class, "field_110447_Z", "launchedVersion");		if (f != null) {			try {				s = (String) f.get(Minecraft.getMinecraft());			} catch (Exception e) {			}		}		return s;	}}