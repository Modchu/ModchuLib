package net.minecraft.src;import java.util.EnumSet;import java.util.Random;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import net.minecraft.client.Minecraft;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.inventory.IInventory;import net.minecraft.item.ItemStack;import net.minecraft.network.INetworkManager;import net.minecraft.network.NetServerHandler;import net.minecraft.network.packet.NetHandler;import net.minecraft.network.packet.Packet250CustomPayload;import net.minecraft.world.World;import cpw.mods.fml.common.ITickHandler;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.TickType;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;import cpw.mods.fml.common.modloader.BaseModProxy;import cpw.mods.fml.common.registry.TickRegistry;import cpw.mods.fml.relauncher.Side;@Mod(modid="mod_Modchu_ModchuLib", name="mod_Modchu_ModchuLib")public class mod_Modchu_ModchuLib implements BaseModProxy, ITickHandler {	public static mod_Modchu_ModchuLib mod_Modchu_ModchuLib;	public static Modchu_Main modchu_Main;	public static boolean isServer = false;	static {		isServer = ModLoader.getMinecraftInstance() == null;		//Modchu_Debug.Debug("static isServer="+isServer);	}	public mod_Modchu_ModchuLib()	{		if (isServer) return;		modchu_Main = new Modchu_Main();	}	@Override	public String getName() {		return Modchu_Main.modName;	}	@Override	public String getVersion() {		return Modchu_Main.versionString;	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {	//public void load() {		Modchu_Debug.init(null);		if (isServer) {			Modchu_Debug.lDebug("mod_Modchu_ModchuLib isServer return.");			return;		}		mod_Modchu_ModchuLib = this;		Modchu_Debug.lDebug("mod_Modchu_ModchuLib modchu_Main.load");		modchu_Main.load();		if (!isServer) {			TickRegistry.registerTickHandler(this, Side.CLIENT);		} else {			TickRegistry.registerTickHandler(this, Side.SERVER);		}		//ModLoader.setInGameHook(this, true, true);	}	@EventHandler	public void init(FMLInitializationEvent event) {	//public void modsLoaded() {		if (isServer) return;		modchu_Main.modsLoaded();	}	public boolean onTickInGame(float f, Minecraft minecraft)	{		if (isServer) return false;		return modchu_Main.onTickInGame(f, (Object) minecraft);	}	@Override	public void modsLoaded() {	}	@Override	public void load() {	}	@Override	public String getPriorities() {		return null;	}	public boolean doTickInGUI(TickType type, boolean end, Object... tickData) {		return false;	}	public boolean doTickInGame(TickType type, boolean end, Object... tickData) {		return false;		//if (isServer) return false;		//return modchu_Main.onTickInGame(0.0F, null);	}	public void generateSurface(World w, Random random, int i, int j) {	}	public void generateNether(World w, Random random, int i, int j) {	}	public int addFuel(int itemId, int damage) {		return 0;	}	public void takenFromCrafting(EntityPlayer player, ItemStack item, IInventory craftMatrix) {	}	public void takenFromFurnace(EntityPlayer player, ItemStack item) {	}	public void onClientLogout(INetworkManager manager) {	}	public void onClientLogin(EntityPlayer player) {	}	public void serverDisconnect() {	}	public void serverConnect(NetHandler handler) {	}	public void receiveCustomPacket(Packet250CustomPayload packet) {	}	public void clientChat(String text) {	}	public void onItemPickup(EntityPlayer player, ItemStack item) {	}	public void serverCustomPayload(NetServerHandler handler, Packet250CustomPayload packet) {	}	public void serverChat(NetServerHandler source, String message) {	}	@Override	public void tickStart(EnumSet<TickType> type, Object... tickData) {		if (isServer) return;		modchu_Main.onTickInGame(0.0F, null);	}	@Override	public void tickEnd(EnumSet<TickType> type, Object... tickData) {	}	@Override	public EnumSet<TickType> ticks() {		return EnumSet.of(TickType.PLAYER, TickType.SERVER);	}	@Override	public String getLabel() {		return null;	}}